Scenario 1: "here is the Autolab output tell me what's wrong"
    - with assignment: Lights Out
    - student: has not done local testing, relies on autolab for feedback and
        - now autolab output doesn't help
    - ta: should ask to see feedback from autolab (can give more information about what is going wrong)
        - should ask for student explanation of code 
        - ask if student has done testing
        - try to make student look at a specific examples
        - suggest your approach to debugging (print statements, rubber duck, etc.)

Scenario 2: "is_dll specification function are horrible and confused about pointers"
    - with assignment: editor
    - student: is_dll_pt lack of test cases
        - implementation uses an alias of input and modifies it (purity check fail)
    - ta: need to get student to draw out pointers to recognize this mistake (with simple test cases)
        - prompt student to think about how they could test this function
        - step through code using image
        - go to the board! don’t ever be afraid to do this

Scenario 3:  "no clue where to start"
    - with assignment: images (mask)
    - student: confusion of how to apply mask to image, when to include pixels in calculation 
        - unable to break solution into subproblems
    - ta: prompt student to think about specific case of applying mask on image
        - make sure student understands fundamental problem
        - prompt students to also think about different cases within the problem
        - another case where drawing out example could help

Scenario 4: "check my answers on the written"
    - compute_sum with specification function 
    - student: has idea of answers but isn't sure of explanation 
        - confused about deriving n(n+1)/2 
	- sometimes this can be an academic integrity issue, though maybe not focus of this exercise
    - ta: should have student justify answers
      - for “math” questions, prompt students to think of it as a 21-127 problem
        - May need to ask about concepts/induction knowledge
        - Suggest enumerating cases and trying to find a pattern
        - if that fails prompt students to look up “common knowledge” cases (but discourage in general)       

Scenario 5: "Russian nesting doll of is_rope misconceptions"
    - with assignment: Ropes
    - Student: took simple recursive specification for is_rope and added too many
      cases/conditionals
    - Leaf cases will always return false
    - There were student test cases, using them would have helped
    - Failing that, autolab indicated that the example from the handout failed!
    - GO TO THE BOARD
    - Stepping away from the code yourself can be helpful
    - Learning a little more about what the student thinks their
      doing helps (how *do* you check for circularity?)
