/*
 * Doubly linked lists with point
 * 
 * A text buffer is a doubly linked list (dll), where one of the
 * elements in the dll is designated as containing the point.  The
 * list is terminated on both ends with dummy nodes whose contents are
 * never inspected.
 * 
 * 15-122 Principles of Imperative Computation */

typedef struct dll_node dll;
struct dll_node {
  elem data; /* This is defined elsewhere (gapbuf.c0 or elem-char.c0) */
  dll* next;
  dll* prev;
};

typedef struct dll_pt_header dll_pt;
struct dll_pt_header {
  dll* start; /* the fist node of the list (on the left)  */
  dll* point; /* the current node (where the cursor is)   */
  dll* end;   /* the last node of the list (on the right) */
};

bool is_dll_pt(struct dll_pt_header* B) {
  if (B == NULL) return false;
  if (B->start == NULL) return false;
  if (B->end == NULL) return false;
  if (B->start->next == NULL) return false;
  if (B->end->prev == NULL) return false;
  if (B->start->next == B->end) return false;

  dll_pt* C = B;
  bool found = false;
  while (C->start != B->end) {
    if (C == NULL) return false;
    if (C->start == NULL) return false;
    if (C->start == B->point) found = true;
    if (C->start->next == NULL) return false;
    if (C->start != C->start->next->prev) return false;
    C->start = C->start->next;
  }

  C->start = B->start;
  if (!found) return false;
  return true;
}

bool dll_pt_at_left(dll_pt* B) { return true; }
bool dll_pt_at_right(dll_pt* B) { return true; }
void dll_pt_forward(dll_pt* B) {}
void dll_pt_backward(dll_pt* B) {}
void dll_pt_delete(dll_pt* B) {}
