/*
 * Clac, stack-based calculator language
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 */

#use <string>
#use <parse>
#use <conio>
#use <args>
#use <util>

#use "lib/queues_string.c0"
#use "lib/stacks_int.c0"
#use "lib/tokenize.c0"
#use "print_util.c0"

/* auxiliary arithmetic functions that check for overflow */
int div(int x, int y) {
  if (y == 0) error("division by zero");
  if (x == int_min() && y == -1) error("division overflow");
  return x / y;
}

int mod(int x, int y) {
  if (y == 0) error("modulo zero");
  if (x == int_min() && y == -1) error("modulus overflow");
  return x % y;
}

/* auxiliary deq and pop functions that check for emptiness */
string DEQ(queue Q) {
  if (queue_empty(Q)) error("unexpected end of input");
  return deq(Q);
}

int POP(stack S) {
  if (stack_empty(S)) error("not enough elements on stack");
  return pop(S);
}

void print_state(queue Q, stack S) {
  print(pad(stack_to_string(S), false));
  print(" || ");
  print(pad(queue_to_string(Q), true));
  print("\n");
}


/* return false to exit interpreter */
bool eval(queue Q, stack S, bool trace)
//@ensures \result == false || queue_empty(Q);
{
  if (trace) print_header();
  while (!queue_empty(Q)) {
    if (trace) print_state(Q, S);
    string tok = DEQ(Q);
    // print("Read: "); print(tok); print("\n");
    if (string_equal(tok, "+")) {
      int y = POP(S);
      int x = POP(S);
      push(S, x+y);
    } else if (string_equal(tok, "-")) {
      int y = POP(S);
      int x = POP(S);
      push(S, x-y);
    } else if (string_equal(tok, "*")) {
      int y = POP(S);
      int x = POP(S);
      push(S, x*y);
    } else if (string_equal(tok, "/")) {
      int y = POP(S);
      int x = POP(S);
      push(S, div(x,y));
    } else if (string_equal(tok, "%")) {
      int y = POP(S);
      int x = POP(S);
      push(S, mod(x,y));
    } else if (string_equal(tok, "<")) {
      int y = POP(S);
      int x = POP(S);
      push(S, (x < y) ? 1 : 0);
    } else if (string_equal(tok, "drop")) {
      POP(S);
    } else if (string_equal(tok, "swap")) {
      int y = POP(S);
      int x = POP(S);
      push(S, y); push(S, x);
    } else if (string_equal(tok, "dup")) {
      int x = POP(S);
      push(S, x); push(S, x);
    } else if (string_equal(tok, "rot")) {
      int z = POP(S);
      int y = POP(S);
      int x = POP(S);
      push(S, y); push(S, z); push(S, x);
    } else if (string_equal(tok, "print")) {
      int x = POP(S);
      printint(x); print("\n");
    } else if (string_equal(tok, "quit")) {
      return false;		/* do not continue */
    } else if (string_equal(tok, "if")) {
      /* if false, skip two tokens; otherwise just continue */
      if (POP(S) == 0) {
	DEQ(Q);
	DEQ(Q);
      } /* if true (!= 0), just continue */
    } else if (string_equal(tok, "else")) {
      /* skip next token */
      DEQ(Q);
    } else {
      /* not defined as an operation name, must be int */
      int* x = parse_int(tok, 10);
      if (x == NULL) error(string_join("undefined symbol ", tok));
      push(S, *x);
    }
  }
  if (trace) print_state(Q, S);
  return true;			/* continue */
}
