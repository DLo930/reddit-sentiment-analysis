#use <string>
#use <util>

bool is_substring(string little, string big) {
  int len = string_length(little);
  int offset = string_length(big) - len;
  while (offset >= 0) 
  //@loop_invariant offset <= string_length(big) - string_length(little);
  {
    if (string_equal(little, string_sub(big, offset, offset+len))) return true;
    offset--;
  }
  return false;
}

int common_prefix(string s1, string s2) 
//@ensures 0 <= \result && \result <= string_length(s1);
//@ensures 0 <= \result && \result <= string_length(s2);
//@ensures string_equal(string_sub(s1, 0, \result), string_sub(s2, 0, \result));
/*@ensures \result == string_length(s1)
  @     || \result == string_length(s2)
  @     || string_charat(s1, \result) != string_charat(s2, \result); @*/
{
  int i = 0;
  int len = min(string_length(s1), string_length(s2));

  while(i < len)
  //@loop_invariant 0 <= i && i <= len;
  //@loop_invariant string_equal(string_sub(s1, 0, i), string_sub(s2, 0, i));
  {
    if (string_charat(s1, i) != string_charat(s2, i)) return i;
    i++;
  }
  
  return len;
}

int find_nonrepeating_position(string s)
//@requires string_length(s) > 0;
//@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1);
//@ensures 0 <= \result && \result < string_length(s)-1;
//@ensures string_charat(s, \result) == string_charat(s, 0);
//@ensures string_charat(s, \result+1) != string_charat(s, 0);
{
  int i = 0;
  char c = string_charat(s, 0);

  while (true)
  //@loop_invariant 0 <= i && i < string_length(s) - 1;
  //@loop_invariant string_charat(s, i) == c;
  {
    if (string_charat(s, i+1) != c) return i;
    i++;
  }

  //@assert false;
  return -1;
}

bool is_in(char c, string s, int lower, int upper) 
//@requires 0 <= lower && lower <= upper && upper <= string_length(s);
{
  if (lower == upper) return false;
  return string_charat(s, lower) == c 
    || is_in(c, s, lower+1, upper);
}

bool all_unique(string s, int lower, int upper) 
//@requires 0 <= lower && lower <= upper && upper <= string_length(s);
{
  if (lower == upper) return true;
  return !is_in(string_charat(s, lower), s, lower+1, upper)
    && all_unique(s, lower+1, upper);
}

string same_start_end(string s) 
//@ensures is_substring(\result, s);
/*@ensures string_length(s) < 128
  @     || (string_length(\result) > 1
  @         && string_charat(\result, 0)
  @            == string_charat(\result, string_length(\result) - 1)); @*/
{
  int len = string_length(s);

  for (int i = 1; i < len; i++)
  //@loop_invariant len == 0 || (1 <= i && i <= len && all_unique(s, 0, i));
  {
    char c = string_charat(s, i);

    for (int j = 0; j < i; j++)
    //@loop_invariant 0 <= j && j <= i;
    //@loop_invariant !is_in(c, s, 0, j);
    {
      if (c == string_charat(s, j)) return string_sub(s, j, i+1);
    } 
  }
  
  return s;
}