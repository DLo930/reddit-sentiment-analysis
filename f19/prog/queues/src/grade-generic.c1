queue_t inval() {
  queue_t Q = queue_new();
  Q->size = 42;
  return Q;
}


bool ge_neg_one(void* x) {
  //@assert x != NULL && \hastag(int*,x);
  return (*(int*)x >= -1);
}

bool ge_zero(void* x) {
  //@assert x != NULL && \hastag(int*,x);
  return (*(int*)x >= 0);
}

bool null(void* x) {
  return x == NULL;
}

bool nonnull(void* x) {
  return x != NULL;
}

void* id(void* accum, void* x)
//@requires accum != NULL && \hastag(int*, accum);
//@requires x != NULL && \hastag(int*, x);
{
  return accum;
}

void* sum(void* accum, void* x)
//@requires accum != NULL && \hastag(int*, accum);
//@requires x != NULL && \hastag(int*, x);
{
  int* p = (int*)accum;
  *p = *p + *(int*)x;
  return accum;
}

void* append1(void* accum, void* x)
//@requires accum != NULL && \hastag(string*, accum);
//@requires x != NULL && \hastag(int*, x);
{
  string s = *(string*)accum;
  int i = *(int*)x;
  string* p = alloc(string);
  *p = string_join(s, string_fromint(i));
  return (void*)p;
}

void* append2(void* accum, void* x)
//@requires accum != NULL && \hastag(int*, accum);
{
  int* p = (int*)accum;
  *p += 1;
  return accum;
}

void* last(void* accum, void* x) { return x; }

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  int[] A = parse_ints("42 12 19 66 32 -1 55  0", 10);
  int[] B = parse_ints(" 0 55 -1 32 66 19 12 42", 10);

  if (string_equal(arg, "all_precon1")) {
    queue_all(NULL, &nonnull);

  } else if (string_equal(arg, "all_precon2")) {
    queue_all(inval(), &nonnull);

  } else if (string_equal(arg, "all_precon3")) {
    queue_all(queue_new(), NULL);

  } else if (string_equal(arg, "all")) {
    if (!queue_all(cstr(""), &ge_zero)) return 1;
    if (!queue_all(cstr("15"), &ge_zero)) return 2;
    if ( queue_all(cstr("-1"), &ge_zero)) return 3;
    if (!queue_all(cstr("15 16"), &ge_zero)) return 4;
    if ( queue_all(cstr("-5 16"), &ge_zero)) return 5;
    if ( queue_all(cstr("15 -6"), &ge_zero)) return 6;
    if ( queue_all(cstr("-5 -6"), &ge_zero)) return 7;
    if (!queue_all(cstr("99 15 12"), &ge_zero)) return 8;
    if ( queue_all(cstr("99 15 -2"), &ge_zero)) return 9;
    if ( queue_all(cstr("99 -5 12"), &ge_zero)) return 10;
    if ( queue_all(cstr("99 -5 -2"), &ge_zero)) return 11;
    if ( queue_all(cstr("-9 15 12"), &ge_zero)) return 12;
    if ( queue_all(cstr("-9 15 -2"), &ge_zero)) return 13;
    if ( queue_all(cstr("-9 -5 12"), &ge_zero)) return 14;
    if ( queue_all(cstr("-9 -5 -2"), &ge_zero)) return 15;
    if (!queue_all(cstr("99 15 12"), &nonnull)) return 16;
    if ( queue_all(cstr("99 15 12"), &null)) return 17;

    queue* Q = alloc(queue);
    enq(Q, (void*)alloc(string));
    if (!queue_all(Q, &nonnull)) return 18;
    if ( queue_all(Q, &null)) return 19;
    Q->front->data = NULL;
    if ( queue_all(Q, &nonnull)) return 20;
    if (!queue_all(Q, &null)) return 21;

  } else if (string_equal(arg, "iterate_precon1")) {
    queue_iterate(NULL, NULL, &id);

  } else if (string_equal(arg, "iterate_precon2")) {
    queue_iterate(inval(), NULL, &id);

  } else if (string_equal(arg, "iterate_precon3")) {
    queue_iterate(queue_new(), NULL, NULL);

  } else if (string_equal(arg, "iterate")) {
    int* i = alloc(int);
    string* s = alloc(string);
    queue* Q = alloc(queue);

    if ((void*)s != queue_iterate(Q, (void*)s, &last)) return 1;
    if ((void*)i != queue_iterate(Q, (void*)i, &last)) return 1;
    if (NULL != queue_iterate(Q, NULL, &sum)) return 1;

    Q = cstr("-3 7 33");
    if (!string_equal("-3733", *(string*)queue_iterate(Q, (void*)s, &append1)))
      return 1;
    if ((void*)i != queue_iterate(Q, (void*)i, &sum)) return 1;
    if (74 != *(int*)queue_iterate(Q, (void*)i, &sum)) return 1;

    enq(Q, NULL);
    enq(Q, (void*)s);
    enq(Q, (void*)i);
    if (80 != *(int*)queue_iterate(Q, (void*)i, &append2)) return 1;
    if ((void*)i != queue_iterate(Q, NULL, &last)) return 1;
  }

  return 0;
}
