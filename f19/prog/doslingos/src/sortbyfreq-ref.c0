/*
 * sort_by_freq - correct (!?!?!??!!?!?) reference solution
 *
 */

void sekret_obfuscate_merge(int[] A, string[] S, int lo, int mid, int hi)
//@requires 0 <= lo && lo < mid && mid < hi && hi <= \length(A);
//@requires is_sorted_int(A, lo, mid) && is_sorted_int(A, mid, hi);
//@ensures is_sorted_int(A, lo, hi);
{
  int[] B = alloc_array(int, hi-lo);
  string[] T = alloc_array(string, hi-lo);
  int i = lo;
  int j = mid;
  int k = 0;

  while (i < mid && j < hi)
  //@loop_invariant lo <= i && i <= mid;
  //@loop_invariant mid <= j && j <= hi;
  //@loop_invariant k == (i - lo) + (j - mid);
  {
    if (A[i] <= A[j]) {
      B[k] = A[i];
      T[k] = S[i];
      i++;
    } else {
      B[k] = A[j];
      T[k] = S[j];
      j++;
    }
    k++;
  }

  //@assert i == mid || j == hi;
  // Warning, loop invariants for these loops have been omitted!
  while (i < mid) { B[k] = A[i]; T[k] = S[i]; i++; k++; }
  while (j < hi) { B[k] = A[j]; T[k] = S[j]; j++; k++; }
  for (k = 0; k < hi-lo; k++) { A[lo+k] = B[k]; S[lo + k] = T[k]; }
}


void sekret_obfuscate_mergesort(int[] A, string[] B, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@ensures is_sorted_int(A, lo, hi);
{
  if (hi-lo <= 1) return;
  int mid = lo + (hi-lo)/2;
  sekret_obfuscate_mergesort(A, B, lo, mid);
  sekret_obfuscate_mergesort(A, B, mid, hi);
  sekret_obfuscate_merge(A, B, lo, mid, hi);
  return;
}

void sort_by_freq(string[] vocab, int[] freq, int v)
//@requires v == \length(vocab) && v == \length(freq);
//@ensures is_sorted_int(freq, 0, v);
{
  sekret_obfuscate_mergesort(freq, vocab, 0, v);
}
