/* Selection Sort
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning - ported by Ryan Sit to strings, Spring 2013 */

#use <string>

int min_index(string[] A, int lo, int hi)
//@requires 0 <= lo && lo < hi && hi <= \length(A);
//@ensures lo <= \result && \result < hi;
//@ensures le_seg(A[\result], A, lo, hi);
{
  int m = lo;
  string min = A[lo];
  for (int i = lo+1; i < hi; i++) {
    if (string_compare(A[i], min) < 0) {
      m = i;
      min = A[i];
    }
  }
  return m;
}

void sort(string[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@ensures is_sorted(A, lo, hi);
{
  for (int i = lo; i < hi; i++)
    //@loop_invariant lo <= i && i <= hi;
    //@loop_invariant is_sorted(A, lo, i);
    {
      int m = min_index(A, i, hi);
      //@assert le_seg(A[m], A, i, hi);
      swap(A, i, m);
    }
  return;
}

string[] sortcopy(string[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@ensures \length(\result) == hi - lo;
//@ensures is_sorted(\result, 0, hi - lo);
{
  int resultsize = hi - lo;
  string[] B = alloc_array(string, resultsize);
  for (int i = 0 ; i < resultsize; i++)
    //@loop_invariant 0 <= i && i <= resultsize;
    {
      B[i] = A[lo + i];
    }
  sort(B, 0, resultsize);
  return B;
}
