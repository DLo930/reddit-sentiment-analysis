/* Sorting utilities
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 * Ported by Ryan Sit to strings, Spring 2013
 */

#use <string>

/* Copies A[lo..hi) into a new array, and returns it.
 *
 * \length(\result) will be result_size:
 * If result_size is > hi - lo, then the end of the array will be filled
 * in with the default value (for string).
 */
string[] copy_array_sized(string[] A, int lo, int hi, int result_size)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@requires result_size >= hi - lo;
//@ensures \length(\result) == result_size;
{
  string[] B = alloc_array(string, result_size);
  for (int i = 0 ; i < hi - lo; i++)
    //@loop_invariant 0 <= i && i <= hi - lo;
    {
      B[i] = A[lo + i];
    }
  return B;
}

string[] copy_array(string[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
//@ensures \length(\result) == (hi - lo);
{
  return copy_array_sized(A, lo, hi, hi - lo);
}
