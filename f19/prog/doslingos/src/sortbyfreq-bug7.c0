// Straight up quicksort

void sekret_obfuscate_swap2(int[] A, string[] B, int i, int j) 
//@requires 0 <= i && i < \length(A);
//@requires 0 <= j && j < \length(A);
//@requires \length(A) == \length(B);
{
  int tempA = A[i];
  string tempB = B[i];
  A[i] = A[j];
  B[i] = B[j];
  A[j] = tempA;
  B[j] = tempB;
}

int sekret_obfuse_partition(int[] A, string[] B, int lower, int pi, int upper)
//@requires 0 <= lower && lower <= pi && pi < upper && upper <= \length(A);
//@requires \length(A) == \length(B);
//@ensures lower <= \result && \result < upper;
{
  int pivot = A[pi];
  sekret_obfuscate_swap2(A, B, pi, lower);
  int left = lower + 1;
  int right = upper;

  while (left < right)
  //@loop_invariant lower <= left && left <= right && right <= upper;
  //@loop_invariant pivot == A[lower];
  {
    if (A[left] <= pivot) { 
      left++;
    } else {
      //@assert A[left] > pivot;
      sekret_obfuscate_swap2(A, B, left, right-1);
      right--;
    }
  }

  //@assert left == right;
  sekret_obfuscate_swap2(A, B, lower, left-1);
  return left-1;
}

void sekret_obfsucate_sort(int[] A, string[] B, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@requires \length(A) == \length(B);
//@ensures is_sorted_int(A, lower, upper);
{
  if (upper - lower <= 1) return;
  int pi = lower + (upper - lower)/2;
  //@assert lower <= pi && pi < upper;
  int mid = sekret_obfuse_partition(A, B, lower, pi, upper);
  sekret_obfsucate_sort(A, B, lower, mid);
  sekret_obfsucate_sort(A, B, mid+1, upper);
  return;
}

void sort_by_freq(string[] vocab, int[] freq, int v) 
//@requires v == \length(vocab) && v == \length(freq);
//@ensures is_sorted_int(freq, 0, v);
{
  sekret_obfsucate_sort(freq, vocab, 0, v); 
}
