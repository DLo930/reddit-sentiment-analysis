/* Selection Sort
 *
 * Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 * Ported by Ryan Sit to strings, Spring 2013
 */

#use <string>
#use "lib/stringsearch.c0"

// Single, inline sort
void sort(string[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(A, lower, upper);
{
  for (int i = lower; i < upper; i++)
    //@loop_invariant lower <= i && i <= upper;
    //@loop_invariant is_sorted(A, lower, i);
    {
      int m = i;
      string min = A[i];
      for (int j = i+1; j < upper; j++) {
        if (string_compare(A[j], min) < 0) {
          m = j;
          min = A[j];
        }
      }
      //@assert le_seg(A[m], A, i, upper);
      string tmp = A[i];
      A[i] = A[m];
      A[m] = tmp;
    }
  return;
}

