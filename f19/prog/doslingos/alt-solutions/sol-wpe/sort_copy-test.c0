#use <conio>
#use <string>

string[] array_copy(string[] A, int n)
{
  string[] B = alloc_array(string, n);
  for (int i = 0; i < n; i++)
    {
      B[i] = A[i];
    }
  return B;
}

bool array_equal(string[] A, string[] B, int n)
{
  for (int i = 0; i < n; i++)
    {
      if (!string_equal(A[i], B[i])) return false;
    }
  return true;
}

int main()
{
  println("Initializing tests...");
  string[] testNoElems = alloc_array(string, 0);
  string[] cp_testNoElems = array_copy(testNoElems, 0);

  string[] testOneElem = alloc_array(string, 1);
  testOneElem[0] = "waeqroijd";
  string[] cp_testOneElem = array_copy(testOneElem, 1);

  string[] testSmRevSorted = alloc_array(string, 4);
  testSmRevSorted[0] = "zdz";
  testSmRevSorted[1] = "y237";
  testSmRevSorted[2] = "jmek";
  testSmRevSorted[3] = "abcdefg";
  string[] cp_testSmRevSorted = array_copy(testSmRevSorted, 4);
  string[] sorted_testSmRevSorted = alloc_array(string, 4);
  sorted_testSmRevSorted[3] = "zdz";
  sorted_testSmRevSorted[2] = "y237";
  sorted_testSmRevSorted[1] = "jmek";
  sorted_testSmRevSorted[0] = "abcdefg";

  string[] testSortedNonUnique = alloc_array(string, 3);
  testSortedNonUnique[0] = "a";
  testSortedNonUnique[1] = "a";
  testSortedNonUnique[2] = "b";
  string[] cp_testSortedNonUnique = array_copy(testSortedNonUnique, 3);

  string[] testSortedUnique = alloc_array(string, 3);
  testSortedUnique[0] = "a";
  testSortedUnique[1] = "b";
  testSortedUnique[2] = "c";
  string[] cp_testSortedUnique = array_copy(testSortedUnique, 3);
  
  println("Tests initialized. Beginning tests...");
  
  //sort all arrays
  string[] A = sort_copy(testNoElems, 0, 0);
  string[] B = sort_copy(testOneElem, 0, 1);
  string[] C = sort_copy(testSmRevSorted, 0, 4);
  string[] D = sort_copy(testSortedNonUnique, 0, 3);
  string[] E = sort_copy(testSortedUnique, 0, 3);

  //double-check to see if the arrays really are sorted
  assert(is_sorted(A, 0, 0));
  assert(is_sorted(B, 0, 1));
  assert(is_sorted(C, 0, 4));
  assert(is_sorted(D, 0, 3));
  assert(is_sorted(E, 0, 3));

  //make sure the doslingos-sorted arrays are as expected
  assert(array_equal(A, cp_testNoElems, 0));
  assert(array_equal(B, cp_testOneElem, 1));
  assert(array_equal(C, sorted_testSmRevSorted, 4));
  assert(array_equal(D, cp_testSortedNonUnique, 3));
  assert(array_equal(E, cp_testSortedUnique, 3));

  //make sure the doslingos-sorted array lengths are correct
  //@assert \length(A) == 0;
  //@assert \length(B) == 1;
  //@assert \length(C) == 4;
  //@assert \length(D) == 3;
  //@assert \length(E) == 3;

  //make sure the original arrays have not been changed
  assert(array_equal(testNoElems, cp_testNoElems, 0));
  assert(array_equal(testOneElem, cp_testOneElem, 1));
  assert(array_equal(testSmRevSorted, cp_testSmRevSorted, 4));
  assert(array_equal(testSortedNonUnique, cp_testSortedNonUnique, 3));
  assert(array_equal(testSortedUnique, cp_testSortedUnique, 3));

  //sort(NULL, 0, 0);

  println("Passed all tests.");
  return 0;
}