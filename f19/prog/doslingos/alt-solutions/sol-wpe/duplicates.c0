bool is_unique(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
  for (int i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i && i < n;
    {
      if (string_equal(A[i], A[i+1])) return false;
    }
  return true;
}

int count_unique(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures 0 <= \result && \result <= n;
{
  if (n == 0) return 0;
  if (n == 1) return 1;
  int count = 0;
  
  for (int i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i && i < n;
    //@loop_invariant 0 <= count && count <= n;
    {
      if (!string_equal(A[i], A[i+1])) count++;
      if (i+1 == n-1) count++;
    }

  return count;
}

string[] remove_duplicates(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures is_sorted(A, 0, n);
//@ensures is_unique(A, n);
//@ensures \length(\result) == count_unique(A, n);
{
  if (is_unique(A, n)) return A;

  string[] result = alloc_array(string, count_unique(A, n));
  int result_index = 0;

  for (int i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i && i < n;
    //@loop_invariant 0 <= result_index && result_index <= \length(result);
    {
      if (!string_equal(A[i], A[i+1]))
	{
	  result[result_index] = A[i];
	  result_index++;
	}
      if (i+1 == n-1)
	{
	  result[result_index] = A[i+1];
	  result_index++;
	}
    }
  
  return result;
}