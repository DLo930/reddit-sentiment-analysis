/* 
 * Interface for bloom filters (sets)
 * Task 1 solution
 * 
 * 15-122 Principles of Imperative Computation */

#use <string>
#use <util>

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef struct bloom_header* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;

/*** Implementation of bloom filters ***/

typedef struct bloom_header bloom;
struct bloom_header {
  int[] table;
  int size;
};

bool is_bloom(bloom* B) {
  if (B == NULL) return false;
  //@assert \length(B->table) == B->size;
  return B->size > 0;
}

bloom* bloom_new(int capacity) 
//@requires capacity > 0;
//@ensures is_bloom(\result);
{
  bloom* B = alloc(bloom);
  B->size = (capacity + 3)/4;
  B->table = alloc_array(int, B->size);
  return B;
}

int hash_mul31(string x) {
  int h = 0;
  for (int i = 0; i < string_length(x); i++) {
    int c = char_ord(string_charat(x, i));
    h = h*31 + c;
  }
  return h;
}

bool get_bit(int[] A, int i) 
//@requires 0 <= i && i/32 < \length(A);
{
  int j = i >> 5;
  int k = i & 31;
  return 1 == ((A[j] >> k) & 1); 
}

void set_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
{
  int j = i >> 5;
  int k = i & 31;
  A[j] |= 1 << k;
}

int get_index(bloom* B, int hash_value) 
//@requires is_bloom(B);
{
  return abs(hash_value % (B->size << 5));
}

bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
{
  return get_bit(B->table, get_index(B, hash_mul31(x)));
}

void bloom_add(bloom* B, string x) 
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  set_bit(B->table, get_index(B, hash_mul31(x)));
}