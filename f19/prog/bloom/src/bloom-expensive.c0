/*
 * Bloom filters
 * Expensive implementaiton with no false negatives (sorted linked list)
 *
 * 15-122 Principles of Imperative Computation */

#use <string>

/************************ Implementation ***********************/

typedef struct list_node list;
struct list_node {
  string data;
  list* next;
};

struct bloom_header {
  list* chain;
};
typedef struct bloom_header bloom;

bool is_bloom(bloom* B) {
  if (B == NULL) return false;
  if (B->chain == NULL) return true;

  string last = B->chain->data;
  for (list* l = B->chain->next; l != NULL; l = l->next) {
    if (string_compare(last, l->data) >= 0) return false;
    last = l->data;
  }

  return true;
}

bloom* bloom_new(int table_size)
//@requires table_size > 0;
//@ensures is_bloom(\result);
{
  return alloc(bloom);
}

bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
{
  for (list* l = B->chain; l != NULL; l = l->next) {
    int cmp = string_compare(l->data, x);
    if (cmp == 0) return true;
    if (cmp > 0) return false;
  }

  return false;
}

void bloom_add(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  if (B->chain == NULL || string_compare(x, B->chain->data) < 0) {
    list* new = alloc(list);
    new->data = x;
    new->next = B->chain;
    B->chain = new;

  } else if (string_compare(x, B->chain->data) == 0) {
    return;

  } else {
    list* l;
    for (l = B->chain; l->next != NULL; l = l->next)
    //@loop_invariant l != NULL;
    //@loop_invariant string_compare(x, l->data) > 0;
    {
      int cmp = string_compare(x, l->next->data);
      if (cmp == 0) return; // Already present
      if (cmp < 0) { // New element belongs here
        list* new = alloc(list);
        new->data = x;
        new->next = l->next;
        l->next = new;
        return;
      }
    }

    // Exit for loop: new list node belongs at end of chain
    l->next = alloc(list);
    l->next->data = x;
  }
}

// Client type
typedef bloom* bloom_t;


/*********************** Interface to bloom filters ***********************/

// typedef ______* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;
