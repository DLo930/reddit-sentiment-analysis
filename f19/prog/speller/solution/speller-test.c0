#use <conio>
#use <parse>


int main() {
  int d = 6;
  string[]      dict = parse_tokens("a b c d e f");
  string[] orig_dict = parse_tokens("a b c d e f");


  // check_word
  assert(check_word(dict, d, "c"));
  for (int i = 0; i < d; i++) // Dictionary has not changed
    assert(string_equal(dict[i], orig_dict[i]));

  assert(!check_word(dict, d, "z"));
  for (int i = 0; i < d; i++) // Dictionary has not changed
    assert(string_equal(dict[i], orig_dict[i]));


  // check_text_better
  int t = 6;
  string[]      text = parse_tokens("f e d z y x");
  string[] orig_text = parse_tokens("f e d z y x");
  string[] miss = alloc_array(string, t);

  int m = check_text_better(dict, d, text, t, miss);
  assert(m == 3);
  for (int i = 0; i < d; i++)  // Dictionary has not changed
    assert(string_equal(dict[i], orig_dict[i]));
  for (int j = 0; j < t; j++) {
    string w = text[j];
    // text has not changed
    assert(is_in(w, text, 0, t));
    // words are either in dictionary or misspelled
    assert(   ( is_in(w, dict, 0, d) && !is_in(w, miss, 0, m))
           || (!is_in(w, dict, 0, d) &&  is_in(w, miss, 0, m)));
  }
  for (int k = 0; k < m; k++) // misspelled words come from text
    assert(is_in(miss[k], text, 0, t));

  println("All tests passed!");
  return 0;
}
