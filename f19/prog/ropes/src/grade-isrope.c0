#use <args>

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  rope_t HBD = hbd();

  if (string_equal(arg, "edge")) {
    rope_t r = alloc(struct rope_node);
    if (!is_rope(NULL)) return 1;
    if (is_rope(r)) return 1;
    r->data = "1";
    if (is_rope(r)) return 1;
    r->len = 1;
    if (!is_rope(r)) return 1;
    r->data = "";
    if (is_rope(r)) return 1;
    r->data = "!!";
    if (is_rope(r)) return 1;
    r->len = 2;
    if (!is_rope(r)) return 1;

    rope_t s = alloc(struct rope_node);
    s->right = r;
    if (is_rope(s)) return 1;

    s->left = alloc(struct rope_node);
    if (is_rope(s)) return 1;

  } else if (string_equal(arg, "example")) {
    if (!is_rope(HBD)) return 1;
    if (!is_rope(HBD->left)) return 1;
    if (!is_rope(HBD->left->right)) return 1;
    if (!is_rope(HBD->right)) return 1;
    
    HBD->len = 5;
    if (is_rope(HBD)) return 1;
    HBD->len = 15;
    
    HBD->right->data = "day";
    if (is_rope(HBD)) return 1;
    HBD->right->data = "day!";

    HBD->right->left = alloc(struct rope_node);
    if (is_rope(HBD)) return 1;
    HBD->right->left = NULL;

    HBD->right->right = alloc(struct rope_node);
    if (is_rope(HBD)) return 1;
    HBD->right->right = NULL;

    rope_t r = HBD->right;
    HBD->right = NULL;
    if (is_rope(HBD)) return 1;
    HBD->right = r;

    HBD->data = "foo";
    if (!is_rope(HBD)) return 1;
    HBD->left->data = "bar";
    if (!is_rope(HBD)) return 1;

  } else if (string_equal(arg, "simpleropes")) {
    rope_t r = alloc(struct rope_node);
    r->len = 4;
    r->left = alloc(struct rope_node);
    r->left->len = 2;
    r->left->left = alloc(struct rope_node);
    r->left->left->len = 1;
    r->left->left->data = "!";
    r->left->right = r->left->left;
    r->right = r->left;
    if (!is_rope(r)) return 1;

    r->len = 3;
    r->right = r->left->left;
    if (!is_rope(r)) return 1;
    
    if (!is_rope(balist(32, 32 + 57))) return 1;
    if (!is_rope(leftist(32, 32 + 42))) return 1;
    if (!is_rope(rightist(32, 32 + 19))) return 1;

  } else if (string_equal(arg, "circular")) {
    rope_t r = alloc(struct rope_node);
    r->left = r;
    r->right = r;
    r->len = 1;
    if (is_rope(r)) return 1;

    r->len = 1;
    r->left = alloc(struct rope_node);
    r->left->len = 0;
    r->left->right = r->left;
    r->left->left = r->left;
    r->right = alloc(struct rope_node);
    r->right->data = "5";
    r->right->len = 1;
    if (is_rope(r)) return 1;

    r->len = 0;
    if (is_rope(r)) return 1;

    r->len = 4;
    r->left = alloc(struct rope_node);
    r->left->left = r;
    r->left->right = r;
    r->left->len = 2;
    r->right = r->left;
    if (is_rope(r)) return 1;

    r->len = 3;
    r->left->left = NULL;
    r->left->right = NULL;
    r->left->data = "Hello";
    r->right = alloc(struct rope_node);
    r->right->len = -2;
    r->right->left = alloc(struct rope_node);
    r->right->left->len = 1;
    r->right->left->data = "!";
    r->right->right = alloc(struct rope_node);
    r->right->right->len = -3;
    r->right->right->left = alloc(struct rope_node);
    r->right->right->left->len = -1;
    r->right->right->left->left = r->right->left;
    r->right->right->left->right = r->right;
    r->right->right->right = r->right;
    if (is_rope(r)) return 1;

  } else {
    error("Bad arg");
  }
  
  return 0;
}