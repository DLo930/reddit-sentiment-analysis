/* The file pixel.c0 describes the pixel type. It also defines the
 * pixel interface with five functions: get_red(p), get_green(p),
 * get_blue(p), get_alpha(p), and make_pixel(a,r,g,b).
 *
 * We're going to check that you represent pixels as integers where
 * the bits describe the alpha value, red intensity, green intensity,
 * and blue intensity (in that order). However, if you're *given* a
 * working pixel implementation, you can use the pixel interface
 * without knowing which part of the integer is used to store the blue
 * intensity. You don't even need to know that pixels are integers!
 *
 * When writing this file, only use the interface of pixels.c0. We'll
 * check your code by compiling and running it against different
 * implementations of the pixel interface.
 *
 * There are 4 tasks in this file:
 *  - 4 - Modifying pixels while respecting interfaces
 *  - 5 - Implement quantize() as described in the writeup
 *  - 6 - Testing quantize()
 *  - 7 - Returning multiple values */

/* Task 4 - Respecting interfaces:
   This implementation of the function for this task does not currently
   respect the interface to pixels: change it so that it does. */

pixel_t remove_green(pixel_t p) {
  return make_pixel(get_alpha(p), get_red(p), 0, get_blue(p));
}

/* This is some code for testing the remove_red() function. It *does*
 * respect the pixel interface. You can use it to test your
 * implementation and, if you want, extend it with your own tests, but
 * we won't run this test code in the autograder. */

bool remove_green_works(pixel_t p1) {
  pixel_t p2 = remove_green(p1);
  if (get_alpha(p2) != get_alpha(p1)) return false;
  if (get_red(p2)   != get_red(p1))   return false;
  if (get_green(p2) != 0)             return false;
  if (get_blue(p2)  != get_blue(p1))  return false;
  return true;
}

void test_remove_green() {
  assert(remove_green_works(make_pixel(0xFF, 0x01, 0x03, 0x04)));
  assert(remove_green_works(make_pixel(0x02, 0x00, 0xFF, 0xEE)));
  assert(remove_green_works(make_pixel(0xFF, 0xFF, 0xFF, 0xFF)));
  assert(remove_green_works(make_pixel(0x00, 0x00, 0x00, 0x00)));
  assert(remove_green_works(make_pixel(0x00, 0xAA, 0xBB, 0xCC)));
}


/* Task 5 - Implement quantize() as described in the writeup */

pixel_t quantize(pixel_t p, int q)
//@requires 0 <= q && q < 8;
{
  int i;
  int mask = (0xFF << q) & 0xFF;

  return make_pixel(get_alpha(p),
                    get_red(p) & mask,
                    get_green(p) & mask,
                    get_blue(p) & mask);
}

/* Task 6 - Testing quantize()
 *
 * Write some more tests for quantize. Remember to respect the pixels
 * interface! We *will* run these tests, and will grade them based on
 * their ability to catch buggy implementations of quantize. */

void test_quantize() {
  pixel_t p = quantize(make_pixel(0xFF, 0xFF, 0xFF, 0xFF), 4);
  assert(get_alpha(p) == 0xFF);
  assert(get_red(p)   == 0xF0);
  assert(get_green(p) == 0xF0);
  assert(get_blue(p)  == 0xF0);

  p = quantize(make_pixel(0xFA, 0xFB, 0xFC, 0xFD), 0);
  assert(get_alpha(p) == 0xFA);
  assert(get_red(p) == 0xFB);
  assert(get_green(p) == 0xFC);
  assert(get_blue(p) == 0xFD);

  p = quantize(make_pixel(0xF1, 0xF2, 0xF3, 0xF4), 7);
  assert(get_alpha(p) == 0xF1);
  assert(get_red(p) == 0x80);
  assert(get_green(p) == 0x80);
  assert(get_blue(p) == 0x80);
}

/* Task 7
 *
 * In C and C0, it's a bit difficult to return more than one value
 * from a function. For instance, say we needed to know, given an
 * array of pixels, how many pixels had red intensity 0, how many
 * pixels had blue intensity 0, and how many pixels had green
 * intensity 0.
 *
 * We could write three different functions to return these three
 * values, but what we'd like to do instead is write one loop that
 * calculates all three values. Then, those three values are returned
 * to the user by modifying the contents of an array that was passed
 * to the function.
 *
 * The function summarize is supposed to compute the average intensity
 * of red, green, and blue in the pixels and store the results in
 * results[0], results[1], and results[2], respectively. In other
 * words, the pixel array A[] is an input and should not change, but
 * the integer array results[] is an output, and we have to change
 * it.
 *
 * This function has a couple of bugs and therefore fails
 * the test cases below. Fix it, but do not change the interface. (You
 * shouldn't need to change the test cases, either.) */

void summarize(pixel_t[] A, int length, int[] results)
//@requires \length(A) == length && length != 0;
//@requires \length(results) == 3;
{
  results[0] = 0;
  results[1] = 0;
  results[2] = 0;

  for (int i = 0; i < length; i++)
  //@loop_invariant 0 <= i;
  {
    results[0] = results[0] + get_red(A[i]);
    results[1] = results[1] + get_green(A[i]);
    results[2] = results[2] + get_blue(A[i]);
  }

  results[0] = results[0] / length;
  results[1] = results[1] / length;
  results[2] = results[2] / length;
}

/* Below are some useful testing functions. You can use them to help
   you understand what the function you are asked implement is supposed
   to do, and you can use it to test your implementation. If you want,
   you can extend it with your own tests, but we won't run this test
   code in the autograder. */

pixel_t[] copy_pixels(pixel_t[] A, int length)
//@requires length == \length(A);
//@ensures length == \length(\result);
//@ensures \result != A;
{
  pixel_t[] B = alloc_array(pixel_t, length);
  for (int i = 0; i < length; i++)
    //@loop_invariant 0 <= i;
    {
      B[i] = A[i];
    }
  return B;
}

bool pixels_equal(pixel_t[] A, pixel_t[] B, int length)
//@requires length == \length(A);
//@requires length == \length(B);
{
  for (int i = 0; i < length; i++)
    //@loop_invariant 0 <= i;
    {
      if (get_alpha(A[i]) != get_alpha(B[i])) return false;
      if (get_red(A[i])   != get_red(B[i]))   return false;
      if (get_blue(A[i])  != get_blue(B[i]))  return false;
      if (get_green(A[i]) != get_green(B[i])) return false;
    }
  return true;
}
