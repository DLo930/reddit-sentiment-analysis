/***************************************
 ** E0: a hacky text editor front-end **
 **                                   **
 **         by William Lovas          **
 **         and Robert Simmons        **
 **          using C0/curses          **
 **                                   **
 ***************************************/

 /******************************************************************************
           Once you implement required functionality, run 
           cc0 -d -x -w tbuf.c0 editor.c0 lovas-E0.c0
 ******************************************************************************/

#use <conio>
#use <curses>
#use <string>

// Missing functions from editor.c0
void editor_up(editor* E) { }
void editor_down(editor* E) { }

void render_topbar(WINDOW* W) 
//@requires W != NULL;
{
  c_werase(W);
  for (int i = cc_getbegx(W); i < cc_getmaxx(W); i++)
    c_waddch(W, cc_highlight(char_ord(' ')));

  c_wmove(W, 0, 1);
  cc_wreverseon(W);
  c_waddstr(W, "E0, the minimalist editor -- ^X to exit, ^L to refresh");
  cc_wreverseoff(W);
}

void render_botbar(WINDOW* W, editor* E) 
//@requires W != NULL;
//@requires is_editor(E);
{
  c_werase(W);
  for (int i = cc_getbegx(W); i < cc_getmaxx(W); i++)
    c_waddch(W, cc_highlight(char_ord(' ')));

  c_wmove(W, 0, 1);
  cc_wreverseon(W);

  string msg = "Position (";
  msg = string_join(msg, string_fromint(E->row));
  msg = string_join(msg, ",");
  msg = string_join(msg, string_fromint(E->col));
  msg = string_join(msg, ")");
  c_waddstr(W, msg);
  cc_wreverseoff(W);
}

void render_buf(WINDOW* W, tbuf* B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  c_wmove(W, 0, 0);
  c_werase(W);
  
  for (dll* p = B->start->next; p != B->end; p = p->next) {
    char c = p->data;

    // The display character is either ' ' (if it's a newline) or the char
    // The display character is what gets highlighted if we're at the point
    int display = c == '\n' ? char_ord(' ') : char_ord(c);
    if (p == B->cursor) display = cc_highlight(display);

    if (cc_gety(W) == cc_getmaxy(W) - 1) {
      // Special corner cases: last line of the buffer
      if (c != '\n' && cc_getx(W) < cc_getmaxx(W) - 1) {
        c_waddch(W, display); // Show a regular character (common case)
      } else { 
        if (c == '\n') c_waddch(W, display);
        while (cc_getx(W) != cc_getmaxx(W) - 1) c_waddch(W, char_ord(' '));
        c_waddch(W, char_ord('>'));
        return;
      }

    } else {
      // Normal cases: in the buffer
      if (c != '\n' && cc_getx(W) < cc_getmaxx(W) - 1) {
        c_waddch(W, display); // Show a regular character (common case)
      } else if (c == '\n' && cc_getx(W) < cc_getmaxx(W) - 1) {
        c_waddch(W, display); // Newline (common case)
        c_waddch(W, char_ord('\n'));
      } else if (c == '\n') {
        c_waddch(W, display); // Newline (edge case, newline at end of line)
      } else {
        c_waddch(W, char_ord('\\'));
        c_waddch(W, display); // Wrap to the next line
      }
    }
  }

  // We're at the end of the buffer. This only matters if end = cursor
  if (B->cursor == B->end) {
    c_waddch(W, cc_highlight(char_ord(' ')));
  }
}

/** main: look the other way if you've ever programmed using curses **/

int main() {
  WINDOW* mainwin = c_initscr();
  c_cbreak();
  c_noecho();
  c_keypad(mainwin, true);
  int vis = c_curs_set(0);
  
  int ncols = cc_getmaxx(mainwin); 
  int nlines = cc_getmaxy(mainwin);
  int begx = cc_getbegx(mainwin); 
  int begy = cc_getbegy(mainwin);
  
  WINDOW* canvas = c_subwin(mainwin,
                            nlines - 3  /* lines: save 3 for status info */,
                            ncols       /* cols: same as main window */,
                            begy + 1    /* begy: skip top status bar */,
                            begx        /* begx: same as main window */);
  
  WINDOW* topbar = c_subwin(mainwin, 1 /* lines */, ncols, begy, begx);
  WINDOW* botbar = c_subwin(mainwin, 1 /* lines */, ncols, nlines - 2, begx);
  WINDOW* minibuf = c_subwin(mainwin, 1 /* lines */, ncols, nlines - 1, begx);
  
  editor* E = editor_new();
  render_topbar(topbar);
  render_botbar(botbar, E);

  bool go = true;
  while (go) {
    render_buf(canvas, E->buffer);
    c_wrefresh(canvas);
    //vrender_buf(B, minibuf);
    render_botbar(botbar, E);
    c_wrefresh(botbar);

    int c = c_getch();
    if (c == 24) /* ^X */ { go = false; }
    else if (c == 12) /* ^L */ { 
      c_wclear(mainwin);
      render_topbar(topbar);
      c_wrefresh(mainwin); 
    }
    else if (cc_key_is_backspace(c)) { editor_delete(E); }
    else if (cc_key_is_left(c))  { editor_backward(E); }
    else if (cc_key_is_right(c)) { editor_forward(E); }
    else if (cc_key_is_up(c))    { editor_up(E); }
    else if (cc_key_is_down(c))  { editor_down(E); }
    else if (cc_key_is_enter(c)) { editor_insert(E, '\n'); }
    else if (0 <= c && c <= 127) { editor_insert(E, char_chr(c)); }
  }
  
  c_curs_set(vis);
  c_endwin();
  
  print("thanks for flying E !\b\b"); /* <- wing commander homage -wjl */
  
  return 0;
}
