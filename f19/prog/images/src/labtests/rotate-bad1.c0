// Contract failure: can't handle odd-sized widths/heights

pixel[] rotate(pixel[] A, int width, int height)
//@requires width % 2 == 0; // BUG
//@requires is_valid_imagesize(width, height);
//@requires is_valid_imagesize(2*width, 2*height);
//@requires \length(A) == width * height;
//@requires width == height;
//@ensures \length(\result) == 4*width*height;
{
  pixel[] B = alloc_array(pixel, 4*width*height);
  int width2 = width*2;
  int height2 = height*2;

  for (int row = 0; row < height; row++) 
    //@loop_invariant 0 <= row;
    {
      for (int col = 0; col < width; col++) 
        //@loop_invariant 0 <= col;
        {
          int row2;
          int col2;
          pixel p = A[get_index(row, col, width, height)];
          
          // Upper-right-hand image
          row2 = row;
          col2 = width + col;
          //@assert 0 <= row2 && row2 < height;
          //@assert width <= col2 && col2 < width*2;
          B[get_index(row2, col2, width2, height2)] = p;

          // Lower-right-hand image
          row2 = height + col;
          col2 = width + (height - row - 1);
          //@assert height <= row2 && row2 < height*2;
          //@assert width <= col2 && col2 < width*2;
          B[get_index(row2, col2, width2, height2)] = p;

          // Lower-left-hand image
          row2 = height + (height - row - 1);
          col2 = width - col - 1;
          //@assert height <= row2 && row2 < height*2;
          //@assert 0 <= col2 && col2 < width;
          B[get_index(row2, col2, width2, height2)] = p;

          // Upper-left-hand image
          row2 = width - col - 1;
          col2 = row;
          //@assert 0 <= row2 && row2 < height;
          //@assert 0 <= col2 && col2 < width;
          B[get_index(row2, col2, width2, height2)] = p;
        }
    }

  return B;
}