#use <conio>
#use <string>
#use <args>
#use <parse>
#use <img>
#use <util>

void invert_main(string input, string output, pixel_t color, int tolerance)
//@requires 0 <= tolerance && tolerance < 256;
{
  print("Input image:  ");
  println(input);
  print("Color target: 0x");
  println(int2hex(color));
  print("Tolerance: ");
  printint(tolerance); println("");
  print("Output image: ");
  println(output);

  /* Load source image */
  image_t source = image_load(input);
  if (source == NULL) error("Could not load source image");
  int width = image_width(source);
  int height = image_height(source);
  pixel_t[] inpixels = image_data(source);

  print("Loaded image.  Dimensions are ");
  printint(width);
  print(" by ");
  printint(height);
  println(".");

  /* Run transformation */
  print("Running invert transform...");
  pixel_t[] resultpixels = invert(inpixels, width, height, color, tolerance);
  println("done.");

  /* Create destination image */
  image_t dest = image_create(width, height);
  pixel_t[] outpixels = image_data(dest);
  for (int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i;
    {
      outpixels[i] = resultpixels[i];
    }

  /* Save result */
  print("Saving output...");
  image_save(dest, output);
  println("done.");
}

int main() {
  string *input = alloc(string);
  string *output = alloc(string);
  string *t = alloc(string);
  string *c = alloc(string);

  /* Default values */
  string name_sub = string_sub(*input, 0, string_length(*input) - 4);
  *output = string_join(name_sub, "_invert.png");

  args_string("-i", input);
  args_string("-o", output);
  args_string("-t", t);
  args_string("-c", c);
  args_parse();

  if (string_equal("", *t)
      || string_equal("", *c)
      || string_equal("", *input)) {
    error("Usage: invert -i <input image> -t <tolerance> -c <target color> [-o <output image>]");
  }

  /* Parse the pixel argument (-c) */
  if (string_length(*c) > 10) {
    error("Invalid color value.");
  }

  pixel_t *color = alloc(pixel_t);
  if (string_length(*c) == 10) {
    string s1 = string_sub(*c, 2, 3);
    if(!string_equal("0x", s1)) {
      error("Invalid tolerance or color (must be an integer)");
    }

    string s2 = string_sub(*c, 3, 10);
    int* tmp = parse_int(s2, 16);
    if (tmp == NULL) {
      error("Invalid tolerance or color (must be an integer)");
    }
    *color = *tmp;
  }
  else {
    color = parse_int(*c, 16);
  }

  /* Parse the tolerance argument (-t) */
  int* tolerance = parse_int(*t, 10);

  /* Check that both integer arguments parsed correctly */
  if (tolerance == NULL || color == NULL) {
    error("Invalid tolerance or color (must be an integer)");
  }

  if (*tolerance < 0 || 255 < *tolerance) {
    error("Tolerance must be in the range 0...255");
  }

  invert_main(*input, *output, *color, *tolerance);

  return 0;
}
