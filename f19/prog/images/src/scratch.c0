/*     scratch -c color -i img-in [-o img-out]
   generates img-out as a copy of the input image img-in with
   a scratch of color color along its diagonal.  Color must be
   a valid decimal number.

   Compile with
     c0 -d -o scratch ../solution/pixel.c0 ../solution/imageutil.c0 scratch.c0
*/



/* Assumes that pixel is already defined to be an int (pixel.c0) */
/* typedef int pixel; */

#use <conio>
#use <string>
#use <img>
#use <parse>
#use <args>
#use <util>

pixel_t[] scratch (pixel_t[] A, int width, int height, int color)
//@requires width > 0 && height > 0 && width <= int_max() / height;
//@requires \length(A) == width*height;
//@ensures \result != A;
//@ensures \length(\result) == \length(A);
{
  pixel_t[] B = alloc_array(pixel_t, width*height);

  for (int j = 0; j < height; j++)
    //@loop_invariant 0 <= j;
    {
      for (int i = 0; i < width; i++)
        //@loop_invariant 0 <= i;
        {
          //@assert 0 <= j && j < height && 0 <= i && i < width;
          int index = get_index(j, i, width, height);
          //@assert 0 <= index && index < \length(A);
          //@assert \length(A) == \length(B);
          if (i == j) {
	    int a = get_alpha(A[index]);
	    int r = 0xFF & (color >> 16);
	    int g = 0xFF & (color >> 8);
	    int b = 0xFF & color;
            B[index] = make_pixel(a, r, g, b);
	  }
	  else
            B[index] = A[index];
        }
    }

  return B;
}

void scratch_main(string input, string output, int color)
{
  print("Scratch color:  ");
  printint(color); println("");
  print("Input image:  ");
  println(input);
  print("Output image: ");
  println(output);

  /* Load source image */
  image_t source = image_load(input);
  if (source == NULL) error("Could not load source image");
  int width = image_width(source);
  int height = image_height(source);
  pixel_t[] inpixels = image_data(source);

  print("Loaded image.  Dimensions are ");
  printint(width);
  print(" by ");
  printint(height);
  println(".");

  /* Run transformation */
  print("Removing blue channel...");
  pixel_t[] gbpixels = scratch(inpixels, width, height, color);
  println("done.");
  //@assert \length(gbpixels) == width*height;

  /* Create destination image */
  image_t dest = image_create(width, height);
  pixel_t[] outpixels = image_data(dest);
  for (int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i;
    {
      outpixels[i] = gbpixels[i];
    }

  /* Save result */
  print("Saving output...");
  image_save(dest, output);
  println("done.");
}


string default_output(string input, string name) {
  int len = string_length(input);
  if (!(len > 4 && string_equal(".png", string_sub(input, len-4, len)))) {
    error("Input file does not end with .png");
  }

  string res = string_sub(input, 0, len-4);
  res = string_join(res, "_");
  res = string_join(res, name);
  res = string_join(res, ".png");

  return res;
}


int main() {
  string *output = alloc(string);
  string *input = alloc(string);
  int *color = alloc(int);

  args_string("-o", output);
  args_string("-i", input);
  args_int("-c", color);
  args_parse();

  if (string_equal("", *input)) {
    error("Usage: scratch -c <color> -i <input image> [-o <output image>]");
  }

  if (string_equal("", *output)) {
    *output = default_output(*input, "scratch");
  }

  scratch_main(*input, *output, *color);

  return 0;
}
