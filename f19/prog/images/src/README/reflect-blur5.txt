Compiling your unit tests. You can omit reflect.c0 or blur.c0 if you haven't written test cases for reflect() or blur(), respectively:
   % cc0 -d -w -o images-test pixel.c0 imageutil.c0 reflect.c0 blur.c0 images-test.c0
   % ./images-test

Compiling reflect:
   % cc0 -d -w -o reflect pixel.c0 imageutil.c0 reflect.c0 reflect-main.c0
   % ./reflect -i images/carnegie.png -o images/carnegie-my-output.png
       (This creates the output file images/carnegie-my-output.png. If
        you left off the "-o images/carnegie-my-output.png" part, the
        output file would be called images/carnegie_reflect.png.)
   % imagediff -i images/carnegie-reflect.png -j images/carnegie-my-output.png

Compiling blur:
   % cc0 -d -w -o blur pixel.c0 imageutil.c0 blur.c0 blur-main.c0
   % ./blur -i images/scs.png -o images/scs-my-blur.png -m blur-mask.txt
       (This creates the output file images/scs-my-blur.png. If you
        left off the "-o images/scs-my-blur.png" part, the output
        file would be called images/scs_blur.png.)
   % imagediff -i images/scs-blur.png -j images/scs-my-blur.png

Compiling manipulate:
   % cc0 -d -w -o manipulate pixel.c0 imageutil.c0 reflect.c0 blur.c0 manipulate.c0 manipulate-main.c0
   % ./manipulate -i images/g5.png -o images/g5-my-manip.png

==========================================================

Submitting with Andrew handin script:
   % handin images imageutil.c0 reflect.c0 blur.c0 images-test.c0 manipulate.c0

Creating a tarball to submit with autolab.cs.cmu.edu web interface:
   % tar -czvf handin.tgz imageutil.c0 reflect.c0 blur.c0 images-test.c0 manipulate.c0
