/* Imagediff utility for testing Assignment 1 handins */
/* 15-122 Principles Imperative Computation, Fall 2012 */

#use <img>
#use <parse>
#use <args>
#use <conio>
#use <file>
#use <string>

int transpdiff (int[] A, int[] B, int width, int height)
//@requires 0 < width && 0 < height;
// width * height <= int_max();
//@requires width <= int_max() / height;
//@requires \length(A) == width*height;
//@requires \length(B) == width*height;
{
  int count = 0;
  for (int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i && i <= width*height;
    {
      if ((A[i]&0xFF000000) != (B[i]&0xFF000000)) {
        count = count + 1;
      }
    }
  return count;
}

int imagediff (int[] A, int[] B, int[] C, int width, int height)
//@requires 0 < width && 0 < height;
//@requires width <= int_max() / height;
//@requires \length(A) == width*height;
//@requires \length(B) == width*height;
//@requires \length(C) == width*height;
{
  int count = 0;
  for (int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i && i <= width*height;
    {
      if ((A[i]&0x00FFFFFF) != (B[i]&0x00FFFFFF)) {
        count = count + 1;
        C[i] = make_pixel(get_alpha(A[i]),
                          get_red(A[i])/2 + 128,
                          get_green(A[i])/2 + 128,
                          get_blue(A[i])/2 + 128);
      } else {
        C[i] = make_pixel(get_alpha(A[i]),
                          get_red(A[i])/4,
                          get_green(A[i])/4,
                          get_blue(A[i])/4);
      }
    }
  return count;
}

int main() {
  image_t source1;
  image_t source2;
  image_t dest;
  int width;
  int height;
  int numdiff;
  int numtranspdiff;
  int[] A;
  int[] B;
  int[] C;
  string *input1 = alloc(string);
  string *input2 = alloc(string);
  string *output = alloc(string);
  string[] args;

  args_string("-i", input1);
  args_string("-j", input2);
  args_string("-o", output);
  args = args_parse()->argv;

  if (string_equal("", *input1) || string_equal("", *input2)) {
    print("Usage: imagediff -i <input image 1> -j <input image 2>");
    print(" [-o <output image>]\n");
    print("  - Compares two images for equality.");
    print("Be sure to use PNGs to\n    preserve exact bit values.\n");
    print("  - If output is specified, produces and image");
    print("highlighting the\n    differences between the two images.");
    print("Light is different, dark is equal)\n");
    return 1;
  }
  source1 = image_load(*input1);
  source2 = image_load(*input2);
  if (source1 == NULL || source2 == NULL) {
    println("Image not found. Ensure file exists. (Try 'ls')");
    return 1;
  }
  print("Loaded image ");
  print(*input1);
  print(". Dimensions are ");
  printint(image_width(source1));
  print(" by ");
  printint(image_height(source1));
  println(".");
  A = image_data(source1);
  print("Loaded image ");
  print(*input2);
  print(". Dimensions are ");
  printint(image_width(source2));
  print(" by ");
  printint(image_height(source2));
  println(".");
  B = image_data(source2);

  width = image_width(source1);
  height = image_height(source1);

  if (width != image_width(source2) || height != image_height(source2)) {
    println("Image dimensions do not match.");
    // image_destroy(source1);
    // image_destroy(source2);
    return 1;
  }

  dest = image_create(width, height);
  C = image_data(dest);
  numdiff = imagediff(A, B, C, width, height);
  numtranspdiff = transpdiff(A, B, width, height);
  if (numdiff != 0) {
    print("Number of pixels with different colors: ");
    printint(numdiff);
    print(" out of ");
    printint(width*height);
    println(".");
  } else if (numtranspdiff != 0) {
    print("The colors in the two images were identical.\n");
    print("However, the transparency value differend in ");
    printint(numtranspdiff);
    print(" pixel(s).\n");
    print("(This is not reflected in the output image.)\n");
  } else {
    println("The two images were identical.");
  }
  if (!string_equal("", *output)) {
    println("Saving output.");
    image_save(dest, *output);
  }
  // image_destroy is deprecated.  images are no longer garbage collected.
  // image_destroy(dest);
  // image_destroy(source1);
  // image_destroy(source2);
  return 0;
}
