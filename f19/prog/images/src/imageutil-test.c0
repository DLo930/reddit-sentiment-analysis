#use <args>
#use <conio>
#use <util>

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  // Test get_row function
  if (string_equal(arg, "get_row")) {
    for (int i = 0; i < 5100; i++) {
      if (i / 100 != get_row(i, 100, 51)) return 1;
      if (i / 51 != get_row(i, 51, 100)) return 1;
    }
  } else if (string_equal(arg, "get_row_tiny")) {
    if (0 != get_row(0, 1, 1)) return 1;
    if (0 != get_row(4, 5, 1)) return 1;
    if (4 != get_row(4, 1, 5)) return 1;
  } else if (string_equal(arg, "get_row_invalidsize1")) {
    get_row(0, -1, 419965);
  } else if (string_equal(arg, "get_row_invalidsize2")) {
    get_row(0, 1147445003, 0);
  } else if (string_equal(arg, "get_row_invalidsize3")) {
    get_row(0, 1147445003, 419965);
  } else if (string_equal(arg, "get_row_toobig")) {
    get_row(51000, 51, 100);
  } else if (string_equal(arg, "get_row_toosmall")) {
    get_row(-1, 100, 51);

  // Test get_col function (cutpaste of get_row tests)
  } else if (string_equal(arg, "get_col")) {
    for (int i = 0; i < 5100; i++) {
      if (i % 100 != get_column(i, 100, 51)) return 1;
      if (i % 51 != get_column(i, 51, 100)) return 1;
    }
  } else if (string_equal(arg, "get_col_tiny")) {
    if (0 != get_column(0, 1, 1)) return 1;
    if (4 != get_column(4, 5, 1)) return 1;
    if (0 != get_column(4, 1, 5)) return 1;
  } else if (string_equal(arg, "get_col_invalidsize")) {
    get_column(0, 1147445003, 419965);
  } else if (string_equal(arg, "get_col_toobig")) {
    get_column(51000, 51, 100);
  } else if (string_equal(arg, "get_col_toosmall")) {
    get_column(-1, 100, 51);

  // Test is_valid_pixel function on lots of small sizes
  } else if (string_equal(arg, "is_valid_pixel")) {
    for (int width = 1; width < 10; width++) {
      for (int height = 1; height < 10; height++) {
        for (int row = -5; row < 15; row++) {
          for (int col = -5; col < 15; col++) {
            bool stuans = is_valid_pixel(row, col, width, height);
            bool rowans = 0 <= row && row < height;
            bool colans = 0 <= col && col < width;
            if ((rowans && colans) != stuans) return 1;
          }
        }
      }
    }
  } else if (string_equal(arg, "is_valid_pixel_invalidsize1")) {
    is_valid_pixel(0, 0, -1, 10);
  } else if (string_equal(arg, "is_valid_pixel_invalidsize2")) {
    is_valid_pixel(0, 0, 5, 0);
  } else if (string_equal(arg, "is_valid_pixel_invalidsize3")) {
    is_valid_pixel(0, 0, 1147445003, 419965);

  // Test get_index function on lots of small sizes
  } else if (string_equal(arg, "get_index")) {
    for (int width = 1; width < 10; width++) {
      for (int height = 1; height < 10; height++) {
        for (int row = 0; row < height; row++) {
          for (int col = 0; col < width; col++) {
            int index = row*width + col;
            if (index != get_index(row, col, width, height)) return 1;
          }
        }
      }
    }
  } else if (string_equal(arg, "get_index_invalidsize")) {
    get_index(0, 0, 1147445003, 419965);
  } else if (string_equal(arg, "get_index_toobig1")) {
    get_index(10, 0, 10, 10);
  } else if (string_equal(arg, "get_index_toobig2")) {
    get_index(0, 100, 10, 10);
  } else if (string_equal(arg, "get_index_toosmall1")) {
    get_index(-1, 10, 10, 10);
  } else if (string_equal(arg, "get_index_toosmall2")) {
    get_index(0, -10, 10, 10);

  } else {
    error("Bad argument");
  }

  return 0;
}