#use <args>
#use <conio>
#use <file>
#use <string>

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  if (string_equal(arg, "10x10-check-that-result-is-new-array")) {
    pixel_t[] A = alloc_array(pixel_t, 100);
    for (int i = 0; i < 100; i++) A[i] = 0xFFFFFFFF;
    pixel_t[] B = reflect(A, 10, 10);
    if (A == B) return 1;
  } else if (string_equal(arg, "1x1-manyvalues")) {
    pixel_t[] A = alloc_array(pixel_t, 1);
    int x = 0;
    for (int i = 0; i < 250000; i++) {
      for (int q = 0; q < 8; q++)
        //@loop_invariant q >= 0;
        {
          A[0] = x;
          pixel_t[] B = reflect(A, 1, 1);
          //@assert \length(B) == 4;

          if (B[0] != x) return 1;
          if (B[1] != x) return 1;
          if (B[2] != x) return 1;
          if (B[3] != x) return 1;
        }
      x += 19937; // Cover the space of possible pixels somewhat well
    }
  } else if (string_equal(arg, "2x1-1x2")) {
    pixel_t[] A = alloc_array(pixel_t, 2);
    A[0] = 0xFFFF0000;
    A[1] = 0xFF00FF00;
    pixel_t[] B = reflect(A, 2, 1);
    //@assert \length(B) == 8;

    if (!(A[0] == 0xFFFF0000)) return 1;
    if (!(A[1] == 0xFF00FF00)) return 1;

    if (!(B[0] == 0xFF00FF00)) return 1;
    if (!(B[1] == 0xFFFF0000)) return 1;
    if (!(B[2] == 0xFFFF0000)) return 1;
    if (!(B[3] == 0xFF00FF00)) return 1;
    if (!(B[4] == 0xFF00FF00)) return 1;
    if (!(B[5] == 0xFFFF0000)) return 1;
    if (!(B[6] == 0xFFFF0000)) return 1;
    if (!(B[7] == 0xFF00FF00)) return 1;

    B = reflect(A, 1, 2);
    //@assert \length(B) == 8;

    if (!(A[0] == 0xFFFF0000)) return 1;
    if (!(A[1] == 0xFF00FF00)) return 1;

    if (!(B[0] == 0xFFFF0000)) return 1;
    if (!(B[1] == 0xFFFF0000)) return 1;
    if (!(B[2] == 0xFF00FF00)) return 1;
    if (!(B[3] == 0xFF00FF00)) return 1;
    if (!(B[4] == 0xFF00FF00)) return 1;
    if (!(B[5] == 0xFF00FF00)) return 1;
    if (!(B[6] == 0xFFFF0000)) return 1;
    if (!(B[7] == 0xFFFF0000)) return 1;

  } else if (string_equal(arg, "size-lies1")) {
    pixel_t[] A = alloc_array(pixel_t, 50);
    for (int i = 0; i < 50; i++) A[i] = 0xFFFFFFFF;
    reflect(A, 10, 10);
  } else if (string_equal(arg, "size-lies2")) {
    pixel_t[] A = alloc_array(pixel_t, 50);
    for (int i = 0; i < 50; i++) A[i] = 0xFFFFFFFF;
    reflect(A, 5, 5);
  } else if (string_equal(arg, "size-toosmall1")) {
    pixel_t[] A = alloc_array(pixel_t, 0);
    reflect(A, 0, 5);
  } else if (string_equal(arg, "size-toosmall2")) {
    pixel_t[] A = alloc_array(pixel_t, 0);
    reflect(A, 5, 0);
  } else if (string_equal(arg, "size-invalid")) {
    pixel_t[] A = alloc_array(pixel_t, 8287);
    for (int i = 0; i < 8287; i++) A[i] = 0xFFFFFFFF;
    reflect(A, 1147445003, 419965);

  } else {
    error("Bad argument");
  }

  return 0;

}
