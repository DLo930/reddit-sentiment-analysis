#use <args>
#use <conio>
#use <file>
#use <string>

dll_pt* construct_char_buffer(string s) 
{
  int limit = string_length(s);
  dll_pt* B = alloc(struct dll_pt_header);

  B->start = alloc(struct dll_node);

  dll* last = B->start;
  for(int i = 0; i < limit; i++) 
    //@loop_invariant 0 <= i && i <= limit;
    {
      last->next = alloc(struct dll_node);
      last->next->prev = last;
      last->next->data = string_charat(s,i);
      last = last->next;
    }

  last->next = alloc(struct dll_node);
  last->next->prev = last;

  B->point = last;
  B->end = last->next;

  return B;
}

void process_char(dll_pt* B, dll_pt_ C, char c, bool mimic) 
{
  if (c == '<') {
    print("<= : ");
    dll_pt_backward(B);
    if (mimic) dll_pt_backward_mimic(C);
  } else if (c == '>') {
    print("=> : ");
    dll_pt_forward(B);
    if (mimic) dll_pt_forward_mimic(C);
  } else if (c == '^') {
    print("del: ");
    dll_pt_delete(B); 
    if (mimic) dll_pt_delete_mimic(C); 
  } else {
    error("Autograder bug");
  }
}

void visualize_dll_pt(dll_pt* B)
{
    print("START");
    for (dll* L = B->start->next; L != B->end; L = L->next) {
        print(" <--> ");
        if (L == B->point) print("_");
        printchar('\''); printchar(L->data); printchar('\'');
        if (L == B->point) print("_");
    }
    println(" <--> END");
}

void visualize_dll_pt_(dll_pt_ B)
{
    print("     START");
    for (dll* L = B->start->next; L != B->end; L = L->next) {
        print(" <--> ");
        if (L == B->point) print("_");
        if (L == B->altpoint) print("=");
        printchar('\''); printchar(L->data); printchar('\'');
        if (L == B->point) print("_");
        if (L == B->altpoint) print("=");
    }
    println(" <--> END");
}

int main() {
  bool* mimic = alloc(bool);
  args_flag("-mimic", mimic);

  string* contents = alloc(string);
  *contents = "abc";
  args_string("-contents", contents);
  
  args_t args = args_parse();
  if (args->argc < 1) error("Too few args");
  string arg = args->argv[0];
  if (string_equal(arg, "run")) {
    if (args->argc != 2) error("Wrong number of args"); 
  }
  else if (args->argc != 1) error("Too many args");

  dll_pt* B = construct_char_buffer(*contents);
  //printchar(B->point->data); println("");
  B->point = B->point->prev;
  //if (B->point != NULL) { printchar(B->point->data); println(""); }

  struct dll_node* node = alloc(struct dll_node);
  node->prev = B->start;
  node->next = B->end;
  node->data = 'b';

  if (string_equal(arg, "is_dll_pt")) {
    // Check valid positions for the point
    B->point = B->end->prev;
    while (B->point != B->start) {
      //print("At: "); printchar(B->point->data); println("");
      if (!is_dll_pt(B)) return 1;
      B->point = B->point->prev;
    }

  } else if (string_equal(arg, "is_dll_pt_ends")) {
    // Check invalid positions for the point
    B->point = B->start;
    if (is_dll_pt(B)) return 1;

    B->point = B->end;
    if (is_dll_pt(B)) return 1;

    B->point = NULL;
    if (is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "is_dll_pt-null1")) { // NULL CHECK CITY
    B->start->next = NULL;                       if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null2")) {
    B->start->next->next = NULL;                 if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null3")) {
    B->point->next = NULL;                       if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null4")) {
    B->point->next->next = NULL;                 if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null5")) {
    B->end->prev = NULL;                         if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null6")) {
    B->end->prev->prev = NULL;                   if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null7")) {
    B->point->prev = NULL;                       if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null8")) {
    B->point->prev->prev = NULL;                 if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-null9")) {
    B->start = NULL;                             if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-nullA")) {
    B->point = NULL;                             if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-nullB")) {
    B->end = NULL;                               if (is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "is_dll_pt-unspec")) {
    B->start->prev = alloc(struct dll_node);
    B->start->data = 'X';
    B->end->next = alloc(struct dll_node);
    B->end->data = 'X';
    if (!is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "handout-figure-3")) {
    B->point = node;
    if (is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "handout-figure-4")) {
    B->point->next = node;
    node->prev = B->point;                      
    if (is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "is_dll_pt-bypasspoint")) {
    B->start->next = node;
    B->end->prev = node;
    if (is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "is_dll_pt-out1")) { // BAD POINTER CITY
    B->start->next = node;                       if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out2")) {
    B->start->next->next = node;                 if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out3")) {
    B->point->next = node;                       if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out4")) {
    B->point->next->next = node;                 if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out5")) {
    B->end->prev = node;                         if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out6")) {
    B->end->prev->prev = node;                   if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out7")) {
    B->point->prev = node;                       if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out8")) {
    B->point->prev->prev = node;                 if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-out9")) {
    B->start = node;                             if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-outA")) {
    B->point = node;                             if (is_dll_pt(B)) return 1;
  } else if (string_equal(arg, "is_dll_pt-outB")) {
    B->end = node;                               if (is_dll_pt(B)) return 1;

  } else if (string_equal(arg, "is_dll_pt-NULL")) {
    if (is_dll_pt(NULL)) return 1;

  } else if (string_equal(arg, "is_dll_pt-badalloc")) {
    if (is_dll_pt(alloc(struct dll_pt_header))) return 1;



  } else if (string_equal(arg, "dll_pt_at_left-NULL")) { 
    dll_pt_at_left(NULL);
  } else if (string_equal(arg, "dll_pt_at_left-badalloc")) { 
    dll_pt_at_left(alloc(struct dll_pt_header));
  } else if (string_equal(arg, "dll_pt_at_right-NULL")) { 
    dll_pt_at_right(NULL);
  } else if (string_equal(arg, "dll_pt_at_right-badalloc")) { 
    dll_pt_at_right(alloc(struct dll_pt_header));
  } else if (string_equal(arg, "dll_pt_forward-NULL")) { 
    dll_pt_forward(NULL);
  } else if (string_equal(arg, "dll_pt_forward-badalloc")) { 
    dll_pt_forward(alloc(struct dll_pt_header));
  } else if (string_equal(arg, "dll_pt_backward-NULL")) { 
    dll_pt_backward(NULL);
  } else if (string_equal(arg, "dll_pt_backward-badalloc")) { 
    dll_pt_backward(alloc(struct dll_pt_header));
  } else if (string_equal(arg, "dll_pt_delete-NULL")) { 
    dll_pt_delete(NULL);
  } else if (string_equal(arg, "dll_pt_delete-badalloc")) { 
    dll_pt_delete(alloc(struct dll_pt_header));

  } else if (string_equal(arg, "run")) {
    dll_pt* B2 = construct_char_buffer(*contents);
    // Reset the point to match student code 
    B->point = B->end->prev;
    B2->point = B2->end->prev;

    dll_pt_ C = alloc(struct dll_sol_buffer);
    C->start = B2->start;
    C->point = B2->point;
    C->end = B2->end;

    string s = args->argv[1];
    int limit = string_length(s);
    for (int i = 0; i < limit; i++) {
      process_char(B, C, string_charat(s, i), *mimic);
      visualize_dll_pt(B);
      if (*mimic) visualize_dll_pt_(C);
      if (*mimic && !dll_pt_eq_mimic(B, C)) return 1; 
      if (*mimic) visualize_dll_pt_(C);
      if (*mimic && C->point->prev == C->start) {
        if (!dll_pt_at_left(B)) return 1; 
      }
      if (*mimic && C->point->next == C->end) {
        if (!dll_pt_at_right(B)) return 1; 
      }
    }

  } else {
    error("Bad argument");
  }

  return 0;
}