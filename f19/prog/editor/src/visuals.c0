/*
 * For testing purposes.
 * This prints a visual representation of the internals of a text buffer.
 *
 * W. Lovas (wlovas@cs.cmu.edu)
 * 15-122 Principles of Imperative Computation
 */

#use <conio>

/*** Interface ***/

/* visualization: print a visual representation of the internals of a tbuf */
void visualize_gapbuf(gapbuf G)
  //@requires is_gapbuf(G);
  //@ensures is_gapbuf(G);
  ;

void visualize_tbuf(tbuf B)
  //@requires is_tbuf(B);
  //@ensures is_tbuf(B);
  ;

/* display: print the text that a tbuf represents, along with a cursor */
void display_tbuf(tbuf B)
  //@requires is_tbuf(B);
  //@ensures is_tbuf(B);
  ;


/*** Implementation ***/

void ins(tbuf B, char ch) {
    print("'"); printchar(ch); print("': ");
    tbuf_insert(B, ch);
    visualize_tbuf(B);
}

void del(tbuf B) {
    print("del: ");
    tbuf_delete(B);
    visualize_tbuf(B);
}

void left(tbuf B) {
    print("<= : ");
    tbuf_backward(B);
    visualize_tbuf(B);
}

void right(tbuf B) {
    print("=> : ");
    tbuf_forward(B);
    visualize_tbuf(B);
}

/* visualization: print a visual representation of the internals of a tbuf */

void visualize_gapbuf(gapbuf G)
//@requires is_gapbuf(G);
//@ensures is_gapbuf(G);
{
    for (int i = 0; i < G->gap_start; i++) printchar(G->buffer[i]);
    printchar('[');
    for (int i = G->gap_start; i < G->gap_end; i++) printchar('.');
    printchar(']');
    for (int i = G->gap_end; i < G->limit; i++) printchar(G->buffer[i]);
}

void visualize_tbuf(tbuf B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
    print("START");
    for (dll* L = B->start->next; L != B->end; L = L->next) {
        print(" <--> ");
        if (L == B->point) print("_");
        visualize_gapbuf(L->data);
        if (L == B->point) print("_");
    }
    println(" <--> END");
}

/* display: print the text that a tbuf represents, along with a cursor */

/*
 * during the display of a tbuf, a bool pointer "point" is set to true exactly
 * once, just before the character that should be highlighted as the point.
 * once that character is printed, the pointer is reset to false, ensuring
 * that exactly one character is highlighted as the point.
 */

void display_char(char c, bool *point)
//@ensures point == NULL || *point == false;
{
    if (point != NULL && *point) {
        print("[7m");
        printchar(c);
        print("[m");
        *point = false;
    } else {
        printchar(c);
    }
}

void display_gapbuf(gapbuf G, bool *point)
//@requires is_gapbuf(G);
//@ensures is_gapbuf(G);
{
  for (int i = 0; i < G->gap_start; i++) display_char(G->buffer[i], NULL);
  for (int i = G->gap_end; i < G->limit; i++) display_char(G->buffer[i], point);
}

void display_tbuf(tbuf B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
    bool *point = alloc(bool);
    *point = false;

    for (dll* L = B->start->next; L != B->end; L = L->next) {
        if (L == B->point) *point = true;
        display_gapbuf(L->data, point);
    }

    /* if we haven't yet seen the point, it must be at the end of the buffer */
    if (*point) display_char(' ', point);

    println("");
}
