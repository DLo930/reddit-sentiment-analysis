/*
 * Doubly linked lists with point
 *
 * A text buffer is a doubly linked list (dll), where one of the
 * elements in the dll is designated as containing the point.  The
 * list is terminated on both ends with dummy nodes whose contents are
 * never inspected.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface (missing appropriate contracts) ***/

typedef struct dll_node dll;
struct dll_node {
  elem data; /* This is defined elsewhere (gapbuf.c0 or elem-char.c0) */
  dll* next;
  dll* prev;
};

typedef struct dll_pt_header dll_pt;
struct dll_pt_header {
  dll* start; /* the first node of the list (to the left)  */
  dll* point; /* the current node of the list (where the cursor is) */
  dll* end;   /* the last node of the list (to the right) */
};

bool is_dll_pt(dll_pt* B);

bool dll_pt_at_left(dll_pt* B);  /* Returns true if the point is first  */
                                 /*   first (non-terminal) node         */
bool dll_pt_at_right(dll_pt* B); /* Returns true if the point is last   */
                                 /*   last (non-terminal) node          */

void dll_pt_forward(dll_pt* B);  /* Moves the point forward (right)     */
void dll_pt_backward(dll_pt* B); /* Moves the point backward (left)     */
void dll_pt_delete(dll_pt* B);   /* Remove the current point            */

/*** Implementation ***/
