#use <args>
#use <string>
#use <conio>
#use "mimic-dll.c0"

void visualize_tbuf(tbuf B)
{
    print("START");
    for (dll L = B->start->next; L != B->end; L = L->next) {
        print(" <--> ");
        if (L == B->point) print("_");
        printchar('\''); printchar(L->data); printchar('\'');
        if (L == B->point) print("_");
    }
    println(" <--> END");
}

void visualize_tbuf_(tbuf_ B)
{
    print("     START");
    for (dll L = B->start->next; L != B->end; L = L->next) {
        print(" <--> ");
        if (L == B->point) print("_");
        if (L == B->altpoint) print("=");
        printchar('\''); printchar(L->data); printchar('\'');
        if (L == B->point) print("_");
        if (L == B->altpoint) print("=");
    }
    println(" <--> END");
}

void process_char(tbuf B, tbuf_ C, char c) 
{
  if (c == '<') {
    print("<= : ");
    tbuf_backward(B);
    tbuf_backward_(C);
  } else if (c == '>') {
    print("=> : ");
    tbuf_forward(B);
    tbuf_forward_(C);
  } else if (c == '^') {
    print("del: ");
    tbuf_delete_point(B); 
    tbuf_delete_point_(C); 
  } else {
    4/0; // Autograder bug
  }
}

int process_string(tbuf B, tbuf_ C, string s)
{
  int limit = string_length(s);
  for(int i = 0; i < limit; i++) {
    process_char(B, C, string_charat(s, i));
    visualize_tbuf(B);
    visualize_tbuf_(C);
    if (!tbuf_eq_(B, C)) return 1;
    visualize_tbuf_(C);
    if (C->point->prev == C->start) {
      if (!tbuf_at_left(B)) return 1;
    }
    if (C->point->next == C->end) {
      if (!tbuf_at_right(B)) return 1;
    }
  }
  return 0;
}

// Returns a circular doubly linked list, which is slightly nuts
dll construct_char_buffer(string s) 
{
  int limit = string_length(s);
  dll start = alloc(struct list_node);

  dll last = start;
  for(int i = 0; i < limit; i++) 
    //@loop_invariant 0 <= i && i <= limit;
    {
      last->next = alloc(struct list_node);
      last->next->prev = last;
      last->next->data = string_charat(s,i);
      last = last->next;
    }

  last->next = start;
  start->prev = last;

  return start;
}

int main() {
  args_t args = args_parse();
  if (args->argc != 2) 4/0; // Bug in autograder!
  string s = args->argv[0];

  // Construct a normal text buffer
  tbuf B = alloc(struct text_buffer);
  B->start = construct_char_buffer(s);
  B->point = B->start->prev;
  B->end = alloc(struct list_node);
  B->end->prev = B->start->prev;
  B->end->prev->next = B->end;
  B->start->prev = NULL;
  assert(is_linked(B));

  // Construct a pecular text buffer
  tbuf_ C = alloc(struct dll_sol_buffer);
  C->start = construct_char_buffer(s);
  C->point = C->start->prev;
  C->end = C->start; 

  return process_string(B, C, args->argv[1]);
}