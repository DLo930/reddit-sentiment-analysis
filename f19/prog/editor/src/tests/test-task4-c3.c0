#use <conio>

//EXPECT RETURN 0

int main()
{
  bool passed = true;
  tbuf B = alloc(struct text_buffer);

  //test for null point
  B->start = alloc(struct list_node);
  B->point = NULL;
  B->end = alloc(struct list_node);

  B->start->next = B->end;
  B->end->prev = B->start;

  if(!(is_linked(B) == false)){
    passed = false;
    // error("accepted null point in tbuf");
  }

  //test for excluding the point entirely
  B->point = alloc(struct list_node);

  B->start->next = B->point;
  B->end->prev = B->point;
  B->point->next = B->end;
  B->point->prev = B->start;

  B->point = alloc(struct list_node);

  if(!(is_linked(B) == false)){
    passed = false;
    // error("accepted missing point in tbuf");
  }

  //test for putting the point at start
  B->point = B->start;

  if(!(is_linked(B) == false)){
    passed = false;
    // error("accepted point in start");
  }

  //test for putting the point at end
  B->point = B->end;

  if(!(is_linked(B) == false)){
    passed = false;
    // error("accepted point in end");
  }

  //test for end being start
  B->end = B->start;

  if(!(is_linked(B) == false)){
    passed = false;
    // error("accepted end at start");
  }
  
  //all fixed
  B->end = B->point;
  B->point = B->point->prev;

  if(!(is_linked(B) == true)){
    passed = false;
    // error("failed to accept valid linkage");
  }

  //report
  if(passed) return 0; else return 1;
}
