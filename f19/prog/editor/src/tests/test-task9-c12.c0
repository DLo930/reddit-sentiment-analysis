#use <conio>
#use "sol-tbuf.c0"

//EXPECT RETURN 0

int main()
{
  bool passed = true;
  tbuf B = tbuf_new_();
  tbuf sol = tbuf_new_();

  //test specifics of insert once
  insert_char_(B, 'a');
  insert_char_(B, 'b');
  insert_char_(B, 'c');
  insert_char_(B, 'd');
  insert_char_(B, 'e');
  insert_char_(B, 'f');
  insert_char_(B, 'g');
  insert_char_(B, 'h');
  insert_char_(B, 'i');
  insert_char_(B, 'j');
  insert_char_(B, 'k');
  insert_char_(B, 'l');
  insert_char_(B, 'm');

  insert_char_(sol, 'a');
  insert_char_(sol, 'b');
  insert_char_(sol, 'c');
  insert_char_(sol, 'd');
  insert_char_(sol, 'e');
  insert_char_(sol, 'f');
  insert_char_(sol, 'g');
  insert_char_(sol, 'h');
  insert_char_(sol, 'i');
  insert_char_(sol, 'j');
  insert_char_(sol, 'k');
  insert_char_(sol, 'l');
  insert_char_(sol, 'm');

  for(int i = 0; i < 5; i++) {
    gapbuf_backward_(B->point->data);
    gapbuf_backward_(sol->point->data);
  }

  insert_char(B, 'x');
  insert_char_(sol, 'x');
  
  // get contents
  contents B_c = tbuf_contents(B);
  contents sol_c = tbuf_contents(sol);

  if (!(B_c->cursor == sol_c->cursor && string_equal(B_c->str, sol_c->str))) {
    passed = false;
    // error("there was a discrepancy in the tbuf after insertion");
  }

  //now make it split
  for(int i = 0; i < 2; i++) {
    insert_char(B, 'x');
    insert_char_(sol, 'x');
  }

  //@assert gapbuf_full_(B->point->data);

  //they will have to split
  insert_char(B, 'x');
  insert_char_(sol, 'x');

  // get contents
  B_c = tbuf_contents(B);
  sol_c = tbuf_contents(sol);

  if (!(B_c->cursor == sol_c->cursor && string_equal(B_c->str, sol_c->str))) {
    passed = false;
    // error("there was a discrepancy in the tbuf after we split it");
  }


  //report
  if(passed) return 0; else return 1;
}
