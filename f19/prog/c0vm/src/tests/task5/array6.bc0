C0 C0 FF EE       # magic number
00 13             # version 9, arch = 1 (64 bits)

00 00             # int pool count
# int pool

00 00             # string pool total size
# string pool

00 01             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 03             # number of local variables = 3
00 50             # code length = 80 bytes
10 00    # bipush 0        # 0
36 00    # vstore 0        # sum = 0;
10 64    # bipush 100      # 100
BC 04    # newarray 4      # alloc_array(int, 100)
36 01    # vstore 1        # A = alloc_array(int, 100);
10 00    # bipush 0        # 0
36 02    # vstore 2        # i = 0;
# <00:loop>
15 02    # vload 2         # i
10 64    # bipush 100      # 100
A1 00 06 # if_icmplt +6    # if (i < 100) goto <01:body>
A7 00 15 # goto +21        # goto <02:exit>
# <01:body>
15 01    # vload 1         # A
15 02    # vload 2         # i
63       # aadds           # &A[i]
15 02    # vload 2         # i
4E       # imstore         # A[i] = i;
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 FF E7 # goto -25        # goto <00:loop>
# <02:exit>
10 00    # bipush 0        # 0
36 02    # vstore 2        # j = 0;
# <03:loop>
15 02    # vload 2         # j
10 64    # bipush 100      # 100
A1 00 06 # if_icmplt +6    # if (j < 100) goto <04:body>
A7 00 18 # goto +24        # goto <05:exit>
# <04:body>
15 00    # vload 0         # sum
15 01    # vload 1         # A
15 02    # vload 2         # j
63       # aadds           # &A[j]
2E       # imload          # A[j]
60       # iadd            # 
36 00    # vstore 0        # sum += A[j];
15 02    # vload 2         # j
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # j += 1;
A7 FF E4 # goto -28        # goto <03:loop>
# <05:exit>
15 00    # vload 0         # sum
B0       # return          # 

00 00             # native count
# native pool

