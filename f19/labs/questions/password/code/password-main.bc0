C0 C0 FF EE       # magic number
00 0B             # version 5, arch = 1 (64 bits)

00 03             # int pool count
# int pool
00 23 41 BA
00 00 01 6F
00 00 03 D0

02 B8             # string pool total size
# string pool
52 65 73 70 65 63 74 00  # "Respect"
74 68 65 20 69 6E 74 65 72 66 61 63 65 00  # "the interface"
57 65 6C 63 6F 6D 65 20 74 6F 20 44 72 2E 20 45 76 69 6C 27 73 20 53 75 70 65 72 20 53 65 63 72 65 74 20 45 76 69 6C 20 50 6C 61 6E 20 54 65 72 6D 69 6E 61 6C 00  # "Welcome to Dr. Evil\'s Super Secret Evil Plan Terminal"
54 68 69 73 20 74 65 72 6D 69 6E 61 6C 20 73 68 6F 75 6C 64 20 6F 6E 6C 79 20 62 65 20 72 75 6E 20 62 79 20 44 72 2E 20 45 76 69 6C 20 74 6F 20 72 65 61 64 20 74 68 65 20 53 75 70 65 72 20 53 65 63 72 65 74 20 45 76 69 6C 20 50 6C 61 6E 2E 00  # "This terminal should only be run by Dr. Evil to read the Super Secret Evil Plan."
49 66 20 79 6F 75 20 61 72 65 20 61 6E 79 6F 6E 65 20 65 6C 73 65 2C 20 67 65 74 20 4F 55 54 2E 00  # "If you are anyone else, get OUT."
50 61 73 73 77 6F 72 64 31 3A 20 00  # "Password1: "
49 4E 43 4F 52 52 45 43 54 20 50 41 53 53 57 4F 52 44 2E 20 54 72 79 20 61 67 61 69 6E 3A 20 00  # "INCORRECT PASSWORD. Try again: "
50 61 73 73 77 6F 72 64 31 20 63 6F 72 72 65 63 74 2E 00  # "Password1 correct."
54 68 65 72 65 27 73 20 74 68 65 20 66 69 72 73 74 20 6F 6E 65 2E 00  # "There\'s the first one."
50 61 73 73 77 6F 72 64 32 3A 20 00  # "Password2: "
49 4E 43 4F 52 52 45 43 54 20 50 41 53 53 57 4F 52 44 2E 20 54 72 79 20 61 67 61 69 6E 3A 20 00  # "INCORRECT PASSWORD. Try again: "
50 61 73 73 77 6F 72 64 32 20 63 6F 72 72 65 63 74 2E 00  # "Password2 correct."
54 77 6F 20 64 6F 77 6E 2C 20 74 68 72 65 65 20 74 6F 20 67 6F 2E 00  # "Two down, three to go."
50 61 73 73 77 6F 72 64 33 3A 20 00  # "Password3: "
4E 6F 70 65 2E 20 4B 65 65 70 20 74 72 79 69 6E 67 3A 20 00  # "Nope. Keep trying: "
50 61 73 73 77 6F 72 64 33 20 63 6F 72 72 65 63 74 2E 00  # "Password3 correct."
48 6F 77 27 73 20 79 6F 75 72 20 64 61 79 20 67 6F 69 6E 67 20 73 6F 20 66 61 72 3F 20 4D 69 6E 65 27 73 20 62 65 65 6E 20 73 77 65 6C 6C 2E 00  # "How\'s your day going so far\? Mine\'s been swell."
50 61 73 73 77 6F 72 64 34 3A 20 00  # "Password4: "
4E 6F 70 65 2E 20 4B 65 65 70 20 74 72 79 69 6E 67 3A 20 00  # "Nope. Keep trying: "
50 61 73 73 77 6F 72 64 34 20 63 6F 72 72 65 63 74 2E 00  # "Password4 correct."
4C 61 73 74 20 6F 6E 65 21 00  # "Last one!"
50 61 73 73 77 6F 72 64 35 3A 20 00  # "Password5: "
4E 6F 70 65 2E 20 4B 65 65 70 20 74 72 79 69 6E 67 3A 20 00  # "Nope. Keep trying: "
50 61 73 73 77 6F 72 64 35 20 63 6F 72 72 65 63 74 2E 00  # "Password5 correct."
41 6C 6C 20 66 69 76 65 20 70 61 73 73 77 6F 72 64 73 20 68 61 76 65 20 62 65 65 6E 20 65 6E 74 65 72 65 64 2E 20 55 6E 6C 6F 63 6B 69 6E 67 20 44 72 2E 20 45 76 69 6C 27 73 20 53 75 70 65 72 20 45 76 69 6C 20 53 65 63 72 65 74 20 50 6C 61 6E 2E 00  # "All five passwords have been entered. Unlocking Dr. Evil\'s Super Evil Secret Plan."
43 6F 6E 67 72 61 74 75 6C 61 74 69 6F 6E 73 20 6F 6E 20 63 6F 6D 70 65 6C 65 74 69 6E 67 20 74 68 65 20 6C 61 62 21 00  # "Congratulations on compeleting the lab!"

00 09             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 06             # number of local variables = 6
01 A1             # code length = 417 bytes
14 00 16 # aldc 22         # s[22] = "Welcome to Dr. Evil\'s Super Secret Evil Plan Terminal"
B7 00 05 # invokenative 5  # println("Welcome to Dr. Evil\'s Super Secret Evil Plan Terminal")
57       # pop             # (ignore result)
14 00 4C # aldc 76         # s[76] = "This terminal should only be run by Dr. Evil to read the Super Secret Evil Plan."
B7 00 05 # invokenative 5  # println("This terminal should only be run by Dr. Evil to read the Super Secret Evil Plan.")
57       # pop             # (ignore result)
14 00 9D # aldc 157        # s[157] = "If you are anyone else, get OUT."
B7 00 05 # invokenative 5  # println("If you are anyone else, get OUT.")
57       # pop             # (ignore result)
14 00 BE # aldc 190        # s[190] = "Password1: "
B7 00 06 # invokenative 6  # print("Password1: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 00    # vstore 0        # pass1 = parse_int(readline(), 10);
# <31:loop>
15 00    # vload 0         # pass1
01       # aconst_null     # NULL
9F 00 12 # if_cmpeq +18    # if (pass1 == NULL) goto <32:body>
A7 00 03 # goto +3         # goto <34:or>
# <34:or>
15 00    # vload 0         # pass1
2E       # imload          # *(pass1)
B8 00 01 # invokestatic 1  # password1()
A0 00 06 # if_cmpne +6     # if (*(pass1) != password1()) goto <32:body>
A7 00 1B # goto +27        # goto <33:exit>
# <32:body>
14 00 CA # aldc 202        # s[202] = "INCORRECT PASSWORD. Try again: "
B7 00 06 # invokenative 6  # print("INCORRECT PASSWORD. Try again: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 00    # vstore 0        # pass1 = parse_int(readline(), 10);
A7 FF D6 # goto -42        # goto <31:loop>
# <33:exit>
14 00 EA # aldc 234        # s[234] = "Password1 correct."
B7 00 05 # invokenative 5  # println("Password1 correct.")
57       # pop             # (ignore result)
14 00 FD # aldc 253        # s[253] = "There\'s the first one."
B7 00 05 # invokenative 5  # println("There\'s the first one.")
57       # pop             # (ignore result)
14 01 14 # aldc 276        # s[276] = "Password2: "
B7 00 06 # invokenative 6  # print("Password2: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 01    # vstore 1        # pass2 = parse_int(readline(), 10);
# <35:loop>
15 01    # vload 1         # pass2
01       # aconst_null     # NULL
9F 00 12 # if_cmpeq +18    # if (pass2 == NULL) goto <36:body>
A7 00 03 # goto +3         # goto <38:or>
# <38:or>
15 01    # vload 1         # pass2
2E       # imload          # *(pass2)
B8 00 02 # invokestatic 2  # password2()
A0 00 06 # if_cmpne +6     # if (*(pass2) != password2()) goto <36:body>
A7 00 1B # goto +27        # goto <37:exit>
# <36:body>
14 01 20 # aldc 288        # s[288] = "INCORRECT PASSWORD. Try again: "
B7 00 06 # invokenative 6  # print("INCORRECT PASSWORD. Try again: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 01    # vstore 1        # pass2 = parse_int(readline(), 10);
A7 FF D6 # goto -42        # goto <35:loop>
# <37:exit>
14 01 40 # aldc 320        # s[320] = "Password2 correct."
B7 00 05 # invokenative 5  # println("Password2 correct.")
57       # pop             # (ignore result)
14 01 53 # aldc 339        # s[339] = "Two down, three to go."
B7 00 05 # invokenative 5  # println("Two down, three to go.")
57       # pop             # (ignore result)
14 01 6A # aldc 362        # s[362] = "Password3: "
B7 00 06 # invokenative 6  # print("Password3: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 02    # vstore 2        # pass3 = parse_int(readline(), 10);
# <39:loop>
15 02    # vload 2         # pass3
01       # aconst_null     # NULL
9F 00 14 # if_cmpeq +20    # if (pass3 == NULL) goto <40:body>
A7 00 03 # goto +3         # goto <42:or>
# <42:or>
15 02    # vload 2         # pass3
2E       # imload          # *(pass3)
B8 00 03 # invokestatic 3  # password3(*(pass3))
10 01    # bipush 1        # true
9F 00 1E # if_cmpeq +30    # if (password3(*(pass3)) == true) goto <41:exit>
A7 00 03 # goto +3         # goto <40:body>
# <40:body>
14 01 76 # aldc 374        # s[374] = "Nope. Keep trying: "
B7 00 06 # invokenative 6  # print("Nope. Keep trying: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 02    # vstore 2        # pass3 = parse_int(readline(), 10);
A7 FF D4 # goto -44        # goto <39:loop>
# <41:exit>
14 01 8A # aldc 394        # s[394] = "Password3 correct."
B7 00 05 # invokenative 5  # println("Password3 correct.")
57       # pop             # (ignore result)
14 01 9D # aldc 413        # s[413] = "How\'s your day going so far\? Mine\'s been swell."
B7 00 05 # invokenative 5  # println("How\'s your day going so far\? Mine\'s been swell.")
57       # pop             # (ignore result)
14 01 CD # aldc 461        # s[461] = "Password4: "
B7 00 06 # invokenative 6  # print("Password4: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 03    # vstore 3        # pass4 = parse_int(readline(), 10);
# <43:loop>
15 03    # vload 3         # pass4
01       # aconst_null     # NULL
9F 00 14 # if_cmpeq +20    # if (pass4 == NULL) goto <44:body>
A7 00 03 # goto +3         # goto <46:or>
# <46:or>
15 03    # vload 3         # pass4
2E       # imload          # *(pass4)
B8 00 04 # invokestatic 4  # password4(*(pass4))
10 01    # bipush 1        # true
9F 00 1E # if_cmpeq +30    # if (password4(*(pass4)) == true) goto <45:exit>
A7 00 03 # goto +3         # goto <44:body>
# <44:body>
14 01 D9 # aldc 473        # s[473] = "Nope. Keep trying: "
B7 00 06 # invokenative 6  # print("Nope. Keep trying: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(readline(), 10)
36 03    # vstore 3        # pass4 = parse_int(readline(), 10);
A7 FF D4 # goto -44        # goto <43:loop>
# <45:exit>
14 01 ED # aldc 493        # s[493] = "Password4 correct."
B7 00 05 # invokenative 5  # println("Password4 correct.")
57       # pop             # (ignore result)
14 02 00 # aldc 512        # s[512] = "Last one!"
B7 00 05 # invokenative 5  # println("Last one!")
57       # pop             # (ignore result)
14 02 0A # aldc 522        # s[522] = "Password5: "
B7 00 06 # invokenative 6  # print("Password5: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
36 04    # vstore 4        # pass5 = readline();
# <47:loop>
15 04    # vload 4         # pass5
B8 00 07 # invokestatic 7  # password5(pass5)
10 01    # bipush 1        # true
9F 00 19 # if_cmpeq +25    # if (password5(pass5) == true) goto <49:exit>
A7 00 03 # goto +3         # goto <48:body>
# <48:body>
14 02 16 # aldc 534        # s[534] = "Nope. Keep trying: "
B7 00 06 # invokenative 6  # print("Nope. Keep trying: ")
57       # pop             # (ignore result)
B7 00 07 # invokenative 7  # flush()
57       # pop             # (ignore result)
B7 00 08 # invokenative 8  # readline()
36 04    # vstore 4        # pass5 = readline();
A7 FF E3 # goto -29        # goto <47:loop>
# <49:exit>
14 02 2A # aldc 554        # s[554] = "Password5 correct."
B7 00 05 # invokenative 5  # println("Password5 correct.")
57       # pop             # (ignore result)
14 02 3D # aldc 573        # s[573] = "All five passwords have been entered. Unlocking Dr. Evil\'s Super Evil Secret Plan."
B7 00 05 # invokenative 5  # println("All five passwords have been entered. Unlocking Dr. Evil\'s Super Evil Secret Plan.")
57       # pop             # (ignore result)
14 02 90 # aldc 656        # s[656] = "Congratulations on compeleting the lab!"
B7 00 05 # invokenative 5  # println("Congratulations on compeleting the lab!")
57       # pop             # (ignore result)
10 00    # bipush 0        # 0
B0       # return          # 


#<password1>
00 00             # number of arguments = 0
00 00             # number of local variables = 0
00 09             # code length = 9 bytes
10 14    # bipush 20       # 20
10 32    # bipush 50       # 50
68       # imul            # (20 * 50)
10 1F    # bipush 31       # 31
60       # iadd            # ((20 * 50) + 31)
B0       # return          # 


#<password2>
00 00             # number of arguments = 0
00 03             # number of local variables = 3
00 18             # code length = 24 bytes
10 05    # bipush 5        # 5
36 00    # vstore 0        # a = 5;
15 00    # vload 0         # a
36 01    # vstore 1        # b = a;
15 01    # vload 1         # b
10 05    # bipush 5        # 5
60       # iadd            # (b + 5)
36 02    # vstore 2        # c = (b + 5);
15 00    # vload 0         # a
15 01    # vload 1         # b
68       # imul            # (a * b)
15 02    # vload 2         # c
60       # iadd            # ((a * b) + c)
B0       # return          # 


#<password3>
00 01             # number of arguments = 1
00 03             # number of local variables = 3
00 1B             # code length = 27 bytes
15 00    # vload 0         # input
13 00 00 # ildc 0          # c[0] = 2310586
60       # iadd            # (input + 2310586)
13 00 01 # ildc 1          # c[1] = 367
70       # irem            # ((input + 2310586) % 367)
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (((input + 2310586) % 367) == 0) goto <00:then>
A7 00 09 # goto +9         # goto <01:else>
# <00:then>
10 01    # bipush 1        # true
B0       # return          # 
A7 00 03 # goto +3         # goto <02:endif>
# <01:else>
# <02:endif>
10 00    # bipush 0        # false
B0       # return          # 


#<password4>
00 01             # number of arguments = 1
00 03             # number of local variables = 3
00 36             # code length = 54 bytes
15 00    # vload 0         # input
36 01    # vstore 1        # x = input;
10 00    # bipush 0        # 0
36 02    # vstore 2        # i = 0;
# <03:loop>
15 02    # vload 2         # i
10 03    # bipush 3        # 3
A1 00 06 # if_icmplt +6    # if (i < 3) goto <04:body>
A7 00 14 # goto +20        # goto <05:exit>
# <04:body>
15 01    # vload 1         # x
10 01    # bipush 1        # 1
78       # ishl            # (x << 1)
36 01    # vstore 1        # x = (x << 1);
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 FF E8 # goto -24        # goto <03:loop>
# <05:exit>
15 01    # vload 1         # x
13 00 02 # ildc 2          # c[2] = 976
9F 00 06 # if_cmpeq +6     # if (x == 976) goto <06:cond_true>
A7 00 08 # goto +8         # goto <07:cond_false>
# <06:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <08:cond_end>
# <07:cond_false>
10 00    # bipush 0        # false
# <08:cond_end>
B0       # return          # 


#<func5>
00 02             # number of arguments = 2
00 03             # number of local variables = 3
00 08             # code length = 8 bytes
15 00    # vload 0         # s1
15 01    # vload 1         # s2
B7 00 00 # invokenative 0  # string_equal(s1, s2)
B0       # return          # 


#<readsixnumbers>
00 01             # number of arguments = 1
00 06             # number of local variables = 6
00 62             # code length = 98 bytes
15 00    # vload 0         # input
B7 00 01 # invokenative 1  # string_to_chararray(input)
36 01    # vstore 1        # input_array = string_to_chararray(input);
10 06    # bipush 6        # 6
BC 04    # newarray 4      # alloc_array(int, 6)
36 02    # vstore 2        # results = alloc_array(int, 6);
14 00 00 # aldc 0          # s[0] = "Respect"
15 00    # vload 0         # input
10 00    # bipush 0        # 0
10 07    # bipush 7        # 7
B7 00 02 # invokenative 2  # string_sub(input, 0, 7)
B7 00 00 # invokenative 0  # string_equal("Respect", string_sub(input, 0, 7))
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (string_equal("Respect", string_sub(input, 0, 7)) == true) goto <09:then>
A7 00 3E # goto +62        # goto <10:else>
# <09:then>
10 00    # bipush 0        # 0
36 03    # vstore 3        # i = 0;
# <12:loop>
15 03    # vload 3         # i
10 06    # bipush 6        # 6
A1 00 06 # if_icmplt +6    # if (i < 6) goto <13:body>
A7 00 2D # goto +45        # goto <14:exit>
# <13:body>
15 01    # vload 1         # input_array
15 03    # vload 3         # i
10 07    # bipush 7        # 7
60       # iadd            # (i + 7)
63       # aadds           # &input_array[(i + 7)]
34       # cmload          # input_array[(i + 7)]
B7 00 03 # invokenative 3  # string_fromchar(input_array[(i + 7)])
36 04    # vstore 4        # individual = string_fromchar(input_array[(i + 7)]);
15 04    # vload 4         # individual
10 0A    # bipush 10       # 10
B7 00 04 # invokenative 4  # parse_int(individual, 10)
36 05    # vstore 5        # x = parse_int(individual, 10);
15 02    # vload 2         # results
15 03    # vload 3         # i
63       # aadds           # &results[i]
15 05    # vload 5         # x
2E       # imload          # *(x)
4E       # imstore         # results[i] = *(x);
15 03    # vload 3         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 03    # vstore 3        # i += 1;
A7 FF CF # goto -49        # goto <12:loop>
# <14:exit>
A7 00 03 # goto +3         # goto <11:endif>
# <10:else>
# <11:endif>
15 02    # vload 2         # results
B0       # return          # 


#<password5>
00 01             # number of arguments = 1
00 06             # number of local variables = 6
00 19             # code length = 25 bytes
15 00    # vload 0         # input
14 00 08 # aldc 8          # s[8] = "the interface"
B8 00 05 # invokestatic 5  # func5(input, "the interface")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (func5(input, "the interface") == true) goto <15:then>
A7 00 09 # goto +9         # goto <16:else>
# <15:then>
10 01    # bipush 1        # true
B0       # return          # 
A7 00 03 # goto +3         # goto <17:endif>
# <16:else>
# <17:endif>
10 00    # bipush 0        # false
B0       # return          # 


#<password6>
00 01             # number of arguments = 1
00 06             # number of local variables = 6
00 77             # code length = 119 bytes
15 00    # vload 0         # input
B8 00 06 # invokestatic 6  # readsixnumbers(input)
36 01    # vstore 1        # sixnumbers = readsixnumbers(input);
10 00    # bipush 0        # 0
36 02    # vstore 2        # i = 0;
# <18:loop>
15 02    # vload 2         # i
10 06    # bipush 6        # 6
A1 00 06 # if_icmplt +6    # if (i < 6) goto <19:body>
A7 00 62 # goto +98        # goto <20:exit>
# <19:body>
10 00    # bipush 0        # 0
15 01    # vload 1         # sixnumbers
15 02    # vload 2         # i
63       # aadds           # &sixnumbers[i]
2E       # imload          # sixnumbers[i]
A4 00 06 # if_icmple +6    # if (0 <= sixnumbers[i]) goto <24:and>
A7 00 11 # goto +17        # goto <21:then>
# <24:and>
15 01    # vload 1         # sixnumbers
15 02    # vload 2         # i
63       # aadds           # &sixnumbers[i]
2E       # imload          # sixnumbers[i]
10 06    # bipush 6        # 6
A1 00 0C # if_icmplt +12   # if (sixnumbers[i] < 6) goto <22:else>
A7 00 03 # goto +3         # goto <21:then>
# <21:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <23:endif>
# <22:else>
# <23:endif>
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # (i + 1)
36 03    # vstore 3        # j = (i + 1);
# <25:loop>
15 03    # vload 3         # j
10 06    # bipush 6        # 6
A1 00 06 # if_icmplt +6    # if (j < 6) goto <26:body>
A7 00 25 # goto +37        # goto <27:exit>
# <26:body>
15 01    # vload 1         # sixnumbers
15 02    # vload 2         # i
63       # aadds           # &sixnumbers[i]
2E       # imload          # sixnumbers[i]
15 01    # vload 1         # sixnumbers
15 03    # vload 3         # j
63       # aadds           # &sixnumbers[j]
2E       # imload          # sixnumbers[j]
9F 00 06 # if_cmpeq +6     # if (sixnumbers[i] == sixnumbers[j]) goto <28:then>
A7 00 09 # goto +9         # goto <29:else>
# <28:then>
10 00    # bipush 0        # false
B0       # return          # 
A7 00 03 # goto +3         # goto <30:endif>
# <29:else>
# <30:endif>
15 03    # vload 3         # j
10 01    # bipush 1        # 1
60       # iadd            # 
36 03    # vstore 3        # j += 1;
A7 FF D7 # goto -41        # goto <25:loop>
# <27:exit>
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 FF 9A # goto -102       # goto <18:loop>
# <20:exit>
10 01    # bipush 1        # true
B0       # return          # 

00 09             # native count
# native pool
00 02 00 54       # string_equal
00 01 00 5D       # string_to_chararray
00 03 00 5B       # string_sub
00 01 00 57       # string_fromchar
00 02 00 4F       # parse_int
00 01 00 14       # println
00 01 00 10       # print
00 00 00 0F       # flush
00 00 00 15       # readline

