#use <conio>

/**
 * Checks if the array A contains no duplicates uo
 * to but not including n
 */
bool contains_no_dupes(int[] A, int n)
//@requires n <= \length(A);
{
    for(int i = 0; i < n; i++) {
        for(int j = i + 1; j < n; j++) {
            if(A[i] == A[j]) return false;
        }
    }
    return true;
}

bool is_sorted(int[] A, int n)
/*@requires 0 <= n && n <= \length(A); @*/
{
  for (int i = 0; i < n-1; i++)
  //@loop_invariant 0 <= i;
  {
    if (A[i+1] < A[i]) return false;
  }
  return true;
}

/**
 * Prints out a helpful message indicating a test is complete
 */
void test_completed(string description, bool success) {
    print("\t");
    print(description);
    print(".... ");
    if(success) {
        println("Passed");
    } else {
        println("Failed");
    }
}

bool arr_eq(int[] A, int n, int[] B, int m)
//@requires n <= \length(A);
//@requires m <= \length(B);
{
  if(n != m) return false;

  //@assert n == m;

  for (int i = 0; i < n; i++)
  //@loop_invariant 0 <= i && i <= n;
  {
    if (A[i] != B[i]) return false;
  }
  return true;
}
