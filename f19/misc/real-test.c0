#use <conio>
#use <util>

void printnum(int i) {
    printint(i);
    println("");
}

int main() {
    int maxSize = 268435454;
    println("_____________Basic Tests:__________________");

    real x1 = real_fromInt(1);
    println("Should be 8 1's:");
    real_print(x1);
    printnum(real_sign(x1));
    real_print(real_abs(x1));
    printnum(real_toInt(x1));
    real_print(real_iPart(x1));
    real_print(real_floor(x1));
    real_print(real_ceil(x1));
    real_print(real_round(x1));

    println("");
    real x2 = real_fromString("1");
    println("Should be 1:");
    real_print(x2);
    if (!real_equal(x1,x1) || !real_equal(x2,x2)) {
        println("Bad: not reflexive");
        assert(false);
    }
    if (!real_equal(x1,x2)) {
        println("Bad: 1 <> 1");
        assert(false);
    }
    println("Good: equality check passed.");

    println("");

    real x3 = real_fromInt(0);
    real x4 = real_fromInt(2 * int_max() + 2);
    println("Should be 12 0's:");
    real_print(x3);
    real_print(x4);
    printnum(real_toInt(x4));
    real_print(real_abs(x3));
    printnum(real_sign(x4));
    real_print(real_iPart(x3));
    real_print(real_fPart(x3));
    real_print(real_fPart(x1));
    real_print(real_floor(x3));
    real_print(real_ceil(x3));
    real_print(real_round(x3));
    real_print(real_neg(x3));

    println("");
    if (!real_equal(x3,x4) || !real_equal(x3, real_neg(real_fPart(x2)))) {
        println("Bad: equality check failed.");
    }
    println("Good: equality check passed.");

    println("");
    real x5 = real_fromString("125.34");
    println("Should be\n125.34:");
    real_print(x5);
    real x6 = real_fromInt(32675);
    println("Should be\n32675:");
    real_print(x6);

    println("");
    println("___________fromString, fromInt, and print:_____________");
    println("");
    
    println("Should be\n0.345487349980000004:");
    real_print(real_fromString("abcd.3454.87gbvf3499800000040000"));
    println("Should be\n42342342341423414344564536456456:");
    real_print(real_fromString("42342342341423414344564536456456."));
    println("Should be\n2323423423423423.23423423444:");
    real_print(real_fromString("2323423423423423.23423423444"));
    println("Should be\n562:");
    real_print(real_fromString("00000000000000000562"));
    println("Should be\n23.45:");
    real_print(real_fromString("023.450"));
    println("Should be 0:");
    real_print(real_fromString("00000000000.0000000000000dsdasd.sdasd00"));
    println("Should be\n423.2423234234234234334234:");
    real_print(real_fromString("erjfoi423.24,c23c234 234c234234q3w3423f..40"));
    println("Should be 0:");
    real_print(real_fromString("-0"));
    println("Should be 0:");
    real_print(real_fromString("-0.0"));
    println("Should be -12:");
    real_print(real_fromString("~12"));
    println("Should be -0.2:");
    real_print(real_fromString("-.2"));
    println("Should be -12:");
    real_print(real_fromString("~12."));
    println("Should be\n168923999:");
    real_print(real_fromInt(168923999));
    println("Should be\n-953128564:");
    real_print(real_fromInt(-953128564));

    println("");
    println("___________________Plus and Minus:________________");
    println("");

    x1 = real_fromInt(-5);
    println("Should go from -4 to 5 by 1:");
    for (int i = 0; i < 10; i++) {
        x1 = real_plus(x1, x2);
        real_print(x1);
    }
    x3 = real_fromString("3.25");
    println("Should continue 10 times by 3.25 to 37.5:");
    for (int i = 0; i < 5; i++) {
        x1 = real_plus(x3, x1);
        real_print(x1);
    }
    x4 = real_fromString("~3.25");
    for (int i = 0; i < 5; i++) {
        x1 = real_minus(x1, x4);
        real_print(x1);
    }
    println("Should decrease in the same way:");
    for (int i = 0; i < 5; i++) {
        x1 = real_minus(x1, x3);
        real_print(x1);
    }
    for (int i = 0; i < 5; i++) {
        x1 = real_plus(x4, x1);
        real_print(x1);
    }
    for (int i = 0; i < 10; i++) {
        x1 = real_minus(x1, x2);
        real_print(x1);
    }

    println("");
    x3 = real_fromString("12345335.322456666676412333");
    x4 = real_fromString("34554224554334543000000000");
    x5 = real_fromString("-0.00005");
    x6 = real_fromString("-100000000000");
    println("Should be\n-34554224554334442987654669.677593333323587667:");
    real_print(real_minus(real_plus(real_minus(real_plus(x1,x3),x4),x5),x6));

    println("\n_________________Times and Divide_____________________\n");

    x2 = real_neg(x2); // x2 = -1, x1 = -5
    println("Should oscillate between 5 and -5 six times:");
    for (int i = 0; i < 6; i++) {
        x1 = real_times(x1,x2);
        real_print(x1);
    }
    for (int i = 0; i < 6; i++) {
        x1 = real_times(x2,x1);
        real_print(x1);
    }

    println("\nShould be two -5's:");
    x1 = real_times(x1, real_fromInt(1));
    real_print(x1);
    x1 = real_times(real_fromInt(1), x1);
    real_print(x1);

    println("\nShould be six 0's:");
    x2 = real_fromInt(0);
    x1 = real_times(x1,x2);
    real_print(x1);
    x1 = real_times(x2,x1);
    real_print(x1);
    real_print(real_times(x2,x2));
    real_print(real_times(x2,x3));
    real_print(real_times(x5,x2));
    real_print(real_times(x2,x6));

    println("\nShould be four positives, four negatives with magnitude");
    println("426583488930724470099921742053681.480749379633299487678192799765497111:");
    x6 = real_fromString("34554224554334442987654669.677593333323587667");
    real_print(real_times(x3,x6));
    real_print(real_times(x6,x3));
    real_print(real_times(real_neg(x3), real_neg(x6)));
    real_print(real_times(real_neg(x6), real_neg(x3)));
    real_print(real_times(x3,real_neg(x6)));
    real_print(real_times(real_neg(x6), x3));
    real_print(real_times(real_neg(x3),x6));
    real_print(real_times(x6, real_neg(x3)));

    x1 = real_fromInt(1);
    // x2 is 0
    x3 = real_fromInt(5);
    x4 = real_fromString("2.5");
    // x5 is -.00005
    real x7 = real_fromInt(2);
    real x8 = real_fromInt(3);
    println("\nShould be 5, 5, 5, -5, -5, 5, 0, 0, 0, 2, 0.6:");
    real_print(real_divide(x3,x1,1));
    real_print(real_divide(x3,x1,5));
    real_print(real_divide(x3,x1, maxSize));
    real_print(real_divide(x3, real_neg(x1), 3));
    real_print(real_divide(real_neg(x3),x1,3));
    real_print(real_divide(real_neg(x3), real_neg(x1), 3));
    real_print(real_divide(x2,x3,1));
    real_print(real_divide(x2,x4,10));
    real_print(real_divide(x2,x6,301));
    real_print(real_divide(x3,x4,10));
    real_print(real_divide(x7,x8,1));

    println("\nShould be\n0.666666666666666:");
    real_print(real_divide(x7,x8,15));
    println("Should be 1:");
    real_print(real_divide(x8,x7,1));
    println("Should be\n13821689821733777195061867.8710373333294350668:");
    real_print(real_divide(x6,x4,80));
    println("Should be\n-999:");
    real_print(real_divide(x6,x5,3));
    println("Should be\n-99999999999999999999:");
    real_print(real_divide(x6,x5,20));
    println("Should be\n-691084491086688859753093393551.86666647175334:");
    real_print(real_divide(x6,x5,80));
    println("Should be\n10000:");
    real_print(real_divide(real_fromInt(10), real_divide(x1, real_fromInt(1000), 10), 50));

    real x9 = real_fromString("1455914.5860336909117793215519560299818237799421209891809822380167601392949192");
    x6 = real_fromInt(500000);
    x3 = real_fromString(".34342674921234");
    x5 = real_divide(x6,x3,77);
    if (real_equal(x5,x9)) {
        println("\nGood: division edge case passed");
    }
    else {
        println("\nBad: division edge case failed. Expected:");
        real_print(x9);
        println("Got:");
        real_print(x5);
    }
    x3 = real_fromString("0.343426740000001");
    x5 = real_divide(x6,x3,77);
    if (real_equal(x5,x9)) {
        println("Good: division edge case passed");
    }
    else {
        println("Bad: divison edge case failed");
        real_print(x9);
        real_print(x5);
    }
    x3 = real_fromString("123123123123123123");
    x9 = real_fromString("0.0000000000040609757127662132018746763402356925328078105882956832153051");
    x5 = real_divide(x6,x3,70);
    if (real_equal(x5,x9)) {
        println("Good: division edge case passed");
    }
    else {
        println("Bad: division edge case failed");
        real_print(x9);
        real_print(x5);
    }
    x6 = real_fromInt(5);
    x5 = real_divide(x6,x3,10);
    x9 = real_divide(x6,x3,9);
    println("Should be two 0's:");
    real_print(x5);
    real_print(x9);
    println("\n");

    println("_________________toInt_________________________");
    println("\nShould be\n2147483647:");
    printnum(real_toInt(real_fromInt(int_max())));
    println("Should be\n-2341206:");
    printnum(real_toInt(real_fromString("-2341205.5")));
    println("Should be\n290143256:");
    printnum(real_toInt(real_fromString("290143256.4999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999")));
    println("Should be\n34562:");
    printnum(real_toInt(real_fromString("~ 8589900030 . ...")));
    println("\n");

    println("__________________Exponentiation________________");
    x1 = real_fromInt(0);
    x2 = real_fromInt(1);
    x3 = real_fromString("-2364.34567812300032456");
    x4 = real_fromInt(-5);
    assert(real_equal(real_exp(x1,0,2), x2));
    assert(real_equal(real_exp(x2,0,-100), x2));
    assert(real_equal(real_exp(x3,0,100), x2));
    for (int i = -10; i < 10; i++) {
        assert(i <= 0 || real_equal(real_exp(x1,i,5), x1));
        assert(real_equal(real_exp(x2,i,5), x2));
    }
    println("Good: basic exponentiation tests passed.\n");
    
    println("Should be 1, -5, 25, -125, 625:");
    for (int i = 0; i < 5; i++) {
        real_print(real_exp(x4,i,0));
    }
    println("Should be -0.2, 0.04, -0.008, 0.0016:");
    for (int i = -1; i >= -4; i--) {
        real_print(real_exp(x4,i,6));
    }
    assert(real_equal(real_exp(x3,1,0), x3));
    println("Should be\n5590130.4856589102555471955832018653391936:");
    real_print(real_exp(x3,2,-1));
    println("Should be\n-13217000853.911273308961683789052237313392020085979027288674816:");
    real_print(real_exp(x3,3,45));
    println("Should be\n-0.0004229500120456:");
    real_print(real_exp(x3,-1,16));
    assert(real_equal(real_exp(x3,-1,16), real_divide(real_fromInt(1),x3,16)));
    println("Should be\n-0.00000000007566013467503972157:");
    real_print(real_exp(x3,-3,30));
    println("Should be\n9999999999:");
    x4 = real_fromInt(0);
    for (int i = 0; i < 10; i++) {
        x4 = real_plus(x4, real_times(real_fromInt(9), real_exp(real_fromString("010"),i,0)));
    }
    real_print(x4);
    assert(real_equal(real_divide(x2, real_fromInt(1000000000), 20), real_fromString(".000000001")));
    assert(real_equal(real_divide(x2, real_fromInt(1000000099), 20), real_fromString(".000000001")));
    println("Good: small numbers check passed.\n");
    
    // Too slow
    /*
    println("___________________Large Number Check:_______________");
    x4 = real_fromInt(0);
    x1 = real_fromInt(9);
    x2 = real_fromInt(10);
    for (int i = 0; i < maxSize; i++) {
        x4 = real_plus(x4, real_times(x1, real_exp(x2,i,0)));
    }
    assert(real_equal(x4,x4));
    x1 = real_fromInt(100);
    x3 = real_fromInt(1);
    for (x2 = x3; real_lt(x2,x1); x2 = real_plus(x2,x3)) {
        assert(real_lt(real_minus(x4,x2), x4));
        assert(real_equal(x4, real_plus(x4,x2)));
    }
    println("Good: increment check passed.");
    println("Good: for loop with a real counter passed.");
    assert(real_equal(real_plus(real_minus(x4, x1), real_minus(x4,x1)), x4));
    println("Good: large addition check passed.");
    assert(real_equal(real_minus(x4, real_fromString("1654.3245")), real_minus(x4, real_fromString("1654"))));
    assert(real_equal(real_minus(x4, real_fromString(".9")), x4));
    assert(real_equal(real_minus(x4, real_fromString("1.9")), real_minus(x4,x3)));
    println("Good: large subtraction check passed.");
    println("Should be\n0.0000000469:");
    real_print(real_times(real_fromString(".0002"), real_fromString(".0002345")));
    assert(real_equal(real_times(x4, real_fromInt(19)), x4));
    println("Good: large multiplication check passed.");
    assert(real_equal(real_times(x4,x4), x4));
    println("Good: huge multiplication check passed.");
    */

    println("______________Comparisons____________________");
    x1 = real_fromString("-24365345345.345345211234523421234....2342343334000000000000");
    x2 = real_fromString("-0000000024365345345.3453452112345234212342342343334");
    x3 = real_fromString("-0000000024365345345.3453452112345234212342342343335");
    x4 = real_fromInt(4);
    x5 = real_fromString("4.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
    assert(real_equal(x1,x2));
    assert(real_equal(x2,x1));
    assert(real_lt(x3,x2));
    assert(real_leq(x2,x1));
    assert(real_leq(x1,x2));
    assert(real_leq(x3,x2));
    assert(real_lt(x3,x4));
    assert(real_leq(x3,x4));
    assert(real_lt(x4,x5));
    assert(real_leq(x4,x5));
    assert(!real_equal(x4,x5));
    assert(!real_equal(x1,x3));
    assert(!real_equal(x1,x4));
    assert(!real_equal(x2,x5));
    assert(!real_leq(x5,x4));
    assert(!real_lt(x1,x2));
    assert(!real_leq(x2,x3));
    assert(!real_lt(x4,x2));
    assert(!real_leq(x4,x2));
    println("Good: all comparison checks passed.\n");

    println("___________________Rounding__________________");
    x1 = real_fromInt(0);
    x2 = real_fromString("0.3");
    x3 = real_fromString("0.5");
    x4 = real_fromString("0.674234234234534534534253425345325345");
    x5 = real_fromString("700000000000000000");
    x6 = real_fromString("300000000000000000.00000232314234123412341234");
    x7 = real_fromString("23423423414234234.93423423");
    x8 = real_fromString("3423412314234142341224.499999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");

    assert(real_equal(real_iPart(x1), x1));
    assert(real_equal(real_iPart(x2), x1));
    assert(real_equal(real_iPart(x3), x1));
    assert(real_equal(real_iPart(x4), x1));
    assert(real_equal(real_iPart(x5), x5));
    assert(real_equal(real_iPart(x6), real_fromString("300000000000000000")));
    assert(real_equal(real_iPart(x7), real_fromString("23423423414234234")));
    assert(real_equal(real_iPart(x8), real_fromString("3423412314234142341224")));
    println("Good: positive iPart checks passed.");

    assert(real_equal(real_fPart(x1), x1));
    assert(real_equal(real_fPart(x2), x2));
    assert(real_equal(real_fPart(x3), x3));
    assert(real_equal(real_fPart(x4), x4));
    assert(real_equal(real_fPart(x5), x1));
    assert(real_equal(real_fPart(x6), real_fromString(".00000232314234123412341234")));
    assert(real_equal(real_fPart(x7), real_fromString(".93423423")));
    assert(real_equal(real_fPart(x8), real_minus(x8, real_iPart(x8))));
    println("Good: positive fPart checks passed.");
    
    assert(real_equal(real_floor(x1), x1));
    assert(real_equal(real_floor(x2), x1));
    assert(real_equal(real_floor(x3), x1));
    assert(real_equal(real_floor(x4), x1));
    assert(real_equal(real_floor(x5), x5));
    assert(real_equal(real_floor(x6), real_fromString("300000000000000000")));
    assert(real_equal(real_floor(x7), real_fromString("23423423414234234")));
    assert(real_equal(real_floor(x8), real_fromString("3423412314234142341224")));
    println("Good: positive floor checks passed.");

    assert(real_equal(real_ceil(x1), x1));
    assert(real_equal(real_ceil(x2), real_fromInt(1)));
    assert(real_equal(real_ceil(x3), real_fromInt(1)));
    assert(real_equal(real_ceil(x4), real_fromInt(1)));
    assert(real_equal(real_ceil(x5), x5));
    assert(real_equal(real_ceil(x6), real_fromString("300000000000000001")));
    assert(real_equal(real_ceil(x7), real_fromString("23423423414234235")));
    assert(real_equal(real_ceil(x8), real_fromString("3423412314234142341225")));
    println("Good: positive ceiling checks passed.");
    
    assert(real_equal(real_round(x1), x1));
    assert(real_equal(real_round(x2), x1));
    assert(real_equal(real_round(x3), real_fromInt(1)));
    assert(real_equal(real_round(x4), real_fromInt(1)));
    assert(real_equal(real_round(x5), x5));
    assert(real_equal(real_round(x6), real_fromString("300000000000000000")));
    assert(real_equal(real_round(x7), real_fromString("23423423414234235")));
    assert(real_equal(real_round(x8), real_fromString("3423412314234142341224")));
    println("Good: positive rounding checks passed.");

    x1 = real_neg(x1);
    x2 = real_neg(x2);
    x3 = real_neg(x3);
    x4 = real_neg(x4);
    x5 = real_neg(x5);
    x6 = real_neg(x6);
    x7 = real_neg(x7);
    x8 = real_neg(x8);

    assert(real_equal(real_iPart(x1), x1));
    assert(real_equal(real_iPart(x2), x1));
    assert(real_equal(real_iPart(x3), x1));
    assert(real_equal(real_iPart(x4), x1));
    assert(real_equal(real_iPart(x5), x5));
    assert(real_equal(real_iPart(x6), real_fromString("~ 300000000000000000")));
    assert(real_equal(real_iPart(x7), real_fromString("-23423423414234234")));
    assert(real_equal(real_iPart(x8), real_fromString("~3423412314234142341224")));
    println("Good: negative iPart checks passed.");

    assert(real_equal(real_fPart(x1), x1));
    assert(real_equal(real_fPart(x2), x2));
    assert(real_equal(real_fPart(x3), x3));
    assert(real_equal(real_fPart(x4), x4));
    assert(real_equal(real_fPart(x5), x1));
    assert(real_equal(real_fPart(x6), real_fromString("~.00000232314234123412341234")));
    assert(real_equal(real_fPart(x7), real_fromString("-.93423423")));
    assert(real_equal(real_fPart(x8), real_minus(x8, real_iPart(x8))));
    println("Good: negative fPart checks passed.");
    
    assert(real_equal(real_floor(x1), x1));
    assert(real_equal(real_floor(x2), real_fromInt(-1)));
    assert(real_equal(real_floor(x3), real_fromInt(-1)));
    assert(real_equal(real_floor(x4), real_fromInt(-1)));
    assert(real_equal(real_floor(x5), x5));
    assert(real_equal(real_floor(x6), real_fromString("-300000000000000001")));
    assert(real_equal(real_floor(x7), real_fromString("-23423423414234235")));
    assert(real_equal(real_floor(x8), real_fromString("-3423412314234142341225")));
    println("Good: negative floor checks passed.");

    assert(real_equal(real_ceil(x1), x1));
    assert(real_equal(real_ceil(x2), x1));
    assert(real_equal(real_ceil(x3), x1));
    assert(real_equal(real_ceil(x4), x1));
    assert(real_equal(real_ceil(x5), x5));
    assert(real_equal(real_ceil(x6), real_fromString("-300000000000000000")));
    assert(real_equal(real_ceil(x7), real_fromString("-23423423414234234")));
    assert(real_equal(real_ceil(x8), real_fromString("-3423412314234142341224")));
    println("Good: negative ceiling checks passed.");
    
    assert(real_equal(real_round(x1), x1));
    assert(real_equal(real_round(x2), x1));
    assert(real_equal(real_round(x3), real_fromInt(-1)));
    assert(real_equal(real_round(x4), real_fromInt(-1)));
    assert(real_equal(real_round(x5), x5));
    assert(real_equal(real_round(x6), real_fromString("-300000000000000000")));
    assert(real_equal(real_round(x7), real_fromString("-23423423414234235")));
    assert(real_equal(real_round(x8), real_fromString("-3423412314234142341224")));
    println("Good: negative rounding checks passed.");
    

    println("\nGood: all checks passed.");
    return 0;
}
