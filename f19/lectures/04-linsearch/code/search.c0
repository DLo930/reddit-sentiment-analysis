/* Linear search
 *
 * 15-122: Principles of Imperative Computation
 */

/* // in arrayutil.c0
bool is_in(int x, int[] A, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= \length(A);
{
  if (lo == hi) return false;
  return A[lo] == x || is_in(x, A, lo+1, hi);
}
*/

int search(int x, int[] A, int n)
//@requires n == \length(A);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
        || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{
  for (int i = 0; i < n; i++)
  //@loop_invariant 0 <= i && i <= n;
  //@loop_invariant !is_in(x,A,0,i);
  {
    if (A[i] == x) return i;
  }
  //@assert !is_in(x,A,0,n);
  return -1;
}


int search_sorted(int x, int[] A, int n)
//@requires n == \length(A);
//@requires is_sorted(A,0,n);
/*@ensures (-1 == \result && !is_in(x, A,0,n))
        || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{
  for (int i = 0; i < n; i++)
  //@loop_invariant 0 <= i && i <= n;
  //@loop_invariant gt_seg(x, A,0,i);       // implies !is_in(x, A,0,i)
  //@loop_invariant !is_in(x, A,0,i);
  //@loop_invariant le_segs(A,0,i, A,i,n);  // because is_sorted(A,0,n)
  {
    if (A[i] == x) return i;
    if (A[i] > x) {
      //@assert lt_seg(x, A,i,n);           // implies !is_in(x, A,i,n)
      //@assert !is_in(x, A,i,n);
      return -1;
    }
    //@assert A[i] < x;                     // implies gt_seg(A,0,i+1);
    //@assert gt_seg(x, A,0,i+1);
  }
  //@assert !is_in(x, A,0,n);
  return -1;
}
