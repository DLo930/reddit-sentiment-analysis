#use <util>
#use <conio>

int clear_red(int p) {
  return p & 0xFF00FFFF;
}

int opacify(int p) {
  return p | 0xFF000000;
}

int franken_pixel(int p, int q) {
  int p_green  = 0x0000FF00 & p;
  int q_others = 0xFFFF00FF & q;
  return p_green | q_others;
}

int blue_everywhere(int p) {
  int alpha = p & 0xFF000000;
  int blue  = p & 0x000000FF;
  return alpha | (blue << 16) | (blue << 8) | blue;
}

int red_everywhere(int p) {
  int alpha = p & 0xFF000000;
  int red   = p & 0x00FF0000;
  return alpha | red | (red >> 8) | (red >> 16);
}

int BAD_swap_alpha_red(int p) {
  int new_alpha = (p & 0x00FF0000) << 8;
  int new_red   = (p & 0xFF000000) >> 8;  // WRONG
  int old_green = p & 0x0000FF00;
  int old_blue  = p & 0x000000FF;
  return new_alpha | new_red | old_green | old_blue;
}

int swap_alpha_red(int p) {       // fix: first shift then mask
  int new_alpha = (p << 8) & 0xFF000000;  // original worked too
  int new_red   = (p >> 8) & 0x00FF0000;  // RIGHT
  int old_green = p & 0x0000FF00;
  int old_blue  = p & 0x000000FF;
  return new_alpha | new_red | old_green | old_blue;
}

int main() {
  int p = 0xB3735AF9;
  int q = 0xABCDEF01;

  print("p = "); println(int2hex(p));
  print("q = "); println(int2hex(q));

  print("clear_red(p) = ");          println(int2hex(clear_red(p)));
  print("opacify(p) = ");            println(int2hex(opacify(p)));
  print("franken_pixel(p,q) = ");    println(int2hex(franken_pixel(p,q)));
  print("blue_everywhere(p) = ");    println(int2hex(blue_everywhere(p)));
  print("red_everywhere(p) = ");     println(int2hex(red_everywhere(p)));
  print("BAD_swap_alpha_red(p) = "); println(int2hex(BAD_swap_alpha_red(p)));
  print("swap_alpha_red(p) = ");     println(int2hex(swap_alpha_red(p)));

  return 0;
}
