/*
 * Mystery function with a bug or two
 *
 * 15-122 Principles of Imperative Computation
 */

// Specification function!
int POW(int b, int e)
//@requires e >= 0;
{
  if (e == 0) return 1;
  return POW(b, e-1) * b;
}

int f(int x, int y)
//@requires y >= 0;
//@ensures POW(x, y) == \result;
{
  int b = x;
  int e = y;
  int r = 1;
  while (e > 0)
  //@loop_invariant e >= 0;
  //@loop_invariant POW(b, e) * r == POW(x, y);
  {
    if (e % 2 == 1) {
      r = b * r;
    }
    b = b * b;
    e = e / 2;
  }
  //@assert e == 0;
  return r;
}

int main() {
  int i = 3;
  int k = 2;

  assert(f(i, k) == POW(i, k));

  /*
  if (f(i, 2*k) != f(i*i, k))
    format_harddrive_and_delete_everything();
  */
  return 0;
}
