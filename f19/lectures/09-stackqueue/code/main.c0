#use <conio>
#use <string>

// Using the stack interface

string stack_peek(stack_t S)
//@requires S != NULL;
//@requires !stack_empty(S);
// Time O(1)
{
  string s = pop(S);
  push(S, s);
  return s;
}

int stack_size(stack_t S)
//@requires S != NULL;
{
  int i = 0;
  stack_t T = stack_new();

  while (!stack_empty(S)) {
    string s = pop(S);   // store top in local variable
    push(T, s);
    i++;
  }

  while (!stack_empty(T))
    push(S, pop(T));     // do without using a local variable

  return i;
}


// Using the queue interface

queue_t queue_copy(queue_t Q)
//@requires Q != NULL;
//@ensures \result != NULL;
{
  queue_t T = queue_new();
  queue_t C = queue_new();

  while (!queue_empty(Q)) {
    string x = deq(Q);
    enq(C, x);
    enq(T, x);
  }

  // Q = T; // Doesn't change caller's queue
  while (!queue_empty(T))
    enq(Q, deq(T));

  return C;
}


// Tests

int main() {
  stack_t S = stack_new();
  push(S, "a");
  push(S, "b");
  // peek gives the right answer:
  assert(string_equal(stack_peek(S), "b"));
  // peek is nondestructive:
  assert(string_equal(stack_peek(S), "b"));
  assert(stack_size(S) == 2);

  queue_t Q = queue_new();
  enq(Q, "c");
  enq(Q, "d");
  queue_t Q2 = queue_copy(Q);
  assert(string_equal(deq(Q),deq(Q2)));
  assert(string_equal(deq(Q),deq(Q2)));
  assert(queue_empty(Q) && queue_empty(Q2));

  print("All tests passed\n");
  return 0;
}
