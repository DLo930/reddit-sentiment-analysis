#use <conio>
#use "sol-tbuf.c0"

//EXPECT RETURN 0

int main()
{
  bool passed = true;
  tbuf B = tbuf_new_();

  //split on left
  insert_char_(B, 'a');
  insert_char_(B, 'b');
  insert_char_(B, 'c');
  insert_char_(B, 'd');
  insert_char_(B, 'e');
  insert_char_(B, 'f');
  insert_char_(B, 'g');
  insert_char_(B, 'h');
  insert_char_(B, 'i');
  insert_char_(B, 'j');
  insert_char_(B, 'k');
  insert_char_(B, 'l');
  insert_char_(B, 'm');
  insert_char_(B, 'n');
  insert_char_(B, 'o');
  insert_char_(B, 'p');

  for(int i = 0; i < 15; i++)
    gapbuf_backward_(B->point->data);
 
  split_point(B);
  
  //check exact positioning
  if(!(B->point->data->limit == 16 &&
       B->point->data->buffer[0] == 'a' &&
       B->point->data->buffer[9] == 'b' &&
       B->point->data->buffer[10] == 'c' &&
       B->point->data->buffer[11] == 'd' &&
       B->point->data->buffer[12] == 'e' &&
       B->point->data->buffer[13] == 'f' &&
       B->point->data->buffer[14] == 'g' &&
       B->point->data->buffer[15] == 'h' &&
       B->point->data->gap_start == 1 &&
       B->point->data->gap_end == 9 &&
       B->point->next->data->limit == 16 &&
       B->point->next->data->buffer[8] == 'i' &&
       B->point->next->data->buffer[9] == 'j' &&
       B->point->next->data->buffer[10] == 'k' &&
       B->point->next->data->buffer[11] == 'l' &&
       B->point->next->data->buffer[12] == 'm' &&
       B->point->next->data->buffer[13] == 'n' &&
       B->point->next->data->buffer[14] == 'o' &&
       B->point->next->data->buffer[15] == 'p' &&
       B->point->next->data->gap_start == 0 &&
       B->point->next->data->gap_end == 8)) {
    passed = false;
    // error("there was a discrepancy in the split output");
  }

  //report
  if(passed) return 0; else return 1;
}
