
#use <conio>
#use "kmin.c0"

void partition_test()
{
  int []A1 = alloc_array(int, 1);
  A1[0] = 5;
  assert(partition(A1,0,1,5) == 0);

  int []A2 = alloc_array(int, 2);
  A2[0] = 5;
  A2[1] = 8;
  assert(partition(A2,0,2,5) == 0);
  assert(partition(A2,0,2,8) == 1);
  

  return;
}

void kmin_test()
{
  int []A1 = alloc_array(int, 1);
  A1[0] = 5;
  kmin(A1,0,1,0);
  assert(A1[0] == 5);
  int []A2 = alloc_array(int, 2);
  A2[0] = 5;
  A2[1] = 8;
  kmin(A2,0,2,0);
  assert(A2[0] == 5);
  kmin(A2,0,2,1);
  assert(A2[1] == 8);
  A2[1] = 5;
  A2[0] = 8;
  kmin(A2,0,2,0);
  assert(A2[0] == 5);
  kmin(A2,0,2,1);
  assert(A2[1] == 8);
  int []A11 = alloc_array(int, 11);
  int []B11 = alloc_array(int, 11);
  A11[0] = 5;
  A11[1] = 8;
  A11[2] = 8;
  A11[3] = 9;
  A11[4] = 2;
  A11[5] = 8;
  A11[6] = 4;
  A11[7] = 1;
  A11[8] = 7;
  A11[9] = 5;
  A11[10] = 3;
  for (int i = 0; i < 11; i++) B11[i] = A11[i];
  sort(B11,0,11);
  kmin(A11,0,11,4);
  assert(A11[4] == B11[4]);
  for(int i = 0; i < 11; i++)
  {
    print("i: "); printint(i); print(" ") ; printint(A11[i]); println("");
  }
}

int main()
{
  partition_test();
  kmin_test();
  return 0;
}


