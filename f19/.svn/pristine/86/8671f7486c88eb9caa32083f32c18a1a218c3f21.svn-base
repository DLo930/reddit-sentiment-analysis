/* 
 * Interface for bloom filters (sets)
 * Broken: lookup skips second most recently added element
 * 
 * 15-122 Principles of Imperative Computation */

#use <string>

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef struct bloom_header* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;

/*** Implementation of bloom filters ***/

typedef struct list_node list;
struct list_node {
  string data;
  list* next;
};

typedef struct bloom_header bloom;
struct bloom_header {
  list* chain;
};

bool is_bloom(bloom* B) { 
  return B != NULL;
}

bloom* bloom_new(int table_size)
//@requires table_size > 0;
//@ensures is_bloom(\result);
{
  return alloc(bloom);
}

bool bloom_contains(bloom* B, string x) 
//@requires is_bloom(B);
{
  if (B->chain == NULL) return false;
  if (string_equal(B->chain->data, x)) return true;
  if (B->chain->next == NULL) return false;
  for (list* l = B->chain->next->next; l != NULL; l = l->next) 
    if (string_equal(l->data, x)) return true;
  
  return false;
}

void bloom_add(bloom* B, string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  list* l = alloc(list);
  l->next = B->chain;
  l->data = x;
  B->chain = l;
}