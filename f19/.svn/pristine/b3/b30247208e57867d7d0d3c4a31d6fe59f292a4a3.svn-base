/*
 * Testing dictionary implementation
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 */

#use <conio>
#use <args>
#use <string>

/* see dict.c0 for the interface functions */

bool se_di_ensu(dict_t D, string s, queue_t Q) 
//@requires D != NULL && Q != NULL;
{
  queue_t R = dict_lookup(D, s);
  return R != NULL && R == Q;
}

int main() {

  int* p = alloc(int);
  *p = 0;
  args_int("-test", p);
  args_parse();
  if (*p == 0) {
    print("No test requested\n");
    return 0;
  }
  int test = *p;

  dict_t D = dict_new();
  queue_t Q1 = queue_new();
  queue_t Q2 = queue_new();
  queue_t Q3 = queue_new();
  assert(Q1 != Q2);
  assert(Q1 != Q3);
  assert(Q2 != Q3);

  if (test == 1) {
    print("Lookup in the empty dictionary\n");
    if (dict_lookup(D, "sym1") != NULL) return 1;

  } else if (test == 2) {
    print("Insert and lookup of 3 distinct elements\n");
    dict_insert(D, "sym1", Q1);
    dict_insert(D, "sym2", Q2);
    dict_insert(D, "sym3", Q3);
    if (!se_di_ensu(D, "sym1", Q1)) return 1;
    if (!se_di_ensu(D, "sym2", Q2)) return 1;
    if (!se_di_ensu(D, "sym3", Q3)) return 1;

  } else if (test == 3) {
    print("Lookup of undefined symbol\n");
    dict_insert(D, "sym1", Q1);
    if (dict_lookup(D, "sym1") == NULL) return 1;
    if (dict_lookup(D, "sym2") != NULL) return 1;
    if (dict_lookup(D, "sym3") != NULL) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym2", Q2);
    if (dict_lookup(D, "sym1") == NULL) return 1;
    if (dict_lookup(D, "sym2") == NULL) return 1;
    if (dict_lookup(D, "sym3") != NULL) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym3", Q3);
    if (dict_lookup(D, "sym1") == NULL) return 1;
    if (dict_lookup(D, "sym2") == NULL) return 1;
    if (dict_lookup(D, "sym3") == NULL) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;

  } else if (test == 4) {
    print("Redefining a symbol\n");
    dict_insert(D, "sym1", Q1);
    if (!se_di_ensu(D, "sym1", Q1)) return 1;
    if (!se_di_ensu(D, "sym1", Q1)) return 1;
    if (dict_lookup(D, "sym2") != NULL) return 1;
    if (dict_lookup(D, "sym3") != NULL) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym2", Q2);
    if (!se_di_ensu(D, "sym1", Q1)) return 1;
    if (!se_di_ensu(D, "sym2", Q2)) return 1;
    if (dict_lookup(D, "sym3") != NULL) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym3", Q3);
    if (!se_di_ensu(D, "sym1", Q1)) return 1;
    if (!se_di_ensu(D, "sym2", Q2)) return 1;
    if (!se_di_ensu(D, "sym3", Q3)) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym1", Q2);
    if (!se_di_ensu(D, "sym1", Q2)) return 1;
    if (!se_di_ensu(D, "sym2", Q2)) return 1;
    if (!se_di_ensu(D, "sym3", Q3)) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym3", Q2);
    if (!se_di_ensu(D, "sym1", Q2)) return 1;
    if (!se_di_ensu(D, "sym2", Q2)) return 1;
    if (!se_di_ensu(D, "sym3", Q2)) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;
    dict_insert(D, "sym2", Q3);
    if (!se_di_ensu(D, "sym1", Q2)) return 1;
    if (!se_di_ensu(D, "sym2", Q3)) return 1;
    if (!se_di_ensu(D, "sym3", Q2)) return 1;
    if (dict_lookup(D, "sym4") != NULL) return 1;

  } else if (test == 5) {
    print("Aliasing queues\n");
    dict_insert(D, "sym1", Q1);
    dict_insert(D, "sym2", Q2);
    dict_insert(D, "sym3", Q1);

    queue_t Q = dict_lookup(D, "sym3");
    if (Q == NULL) return 1;
    enq(Q, "abc");

    queue_t R = dict_lookup(D, "sym1");
    if (R == NULL) return 1;
    if (queue_empty(R)) return 1;
    if (!string_equal(deq(R), "abc")) return 1;

  } else if (test == 6) {
    print("Passing invalid dictionary");
    dict_lookup(NULL, "sym1");
    return 1; /* should not get here */

  } else {
    error("Requested invalid test\n");

  }

  return 0;
}
