// My solution to tasks 1-3 in Homework 2

#use <string>
#use "lib/stringsearch.c0"


// return true if the given string array contains no repeated strings and false otherwise
bool all_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
  int i = 1;
  while ( i < n ) 
    //@loop_invariant 0 < i;
    {
      if ( string_equal(A[i-1], A[i]) ) return false;
      i++;
    }
  return true;
}

// return the number of unique strings in the array
int count_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures 0 <= \result && \result <= n;
{
  if ( n == 0 ) return 0;
  int result = 1;
  int i = 1;
  while ( i < n )
    //@loop_invariant 0 <  i;
    //@loop_invariant 0 < result;
    {
      if ( ! string_equal(A[i-1], A[i]) ) result ++;
      i++;
    }
  return result;
}

string[] remove_duplicates(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures is_sorted(\result, 0, \length(\result));
//@ensures all_distinct(\result, \length(\result));
//@ensures \length(\result) == count_distinct(A, n);
{
  string[] result = alloc_array(string, count_distinct(A, n));
  if ( n == 0 ) {
    return result;
  }
  else {
    result[0] = A[0];
    int i = 1;
    int k = 1;
    while ( i < n )
      //@loop_invariant 0 < i;
      //@loop_invariant 0 < k && k <= count_distinct(A, n);
      {
	if ( ! string_equal(A[i-1], A[i]) ) {
	  result[k] = A[i];
	  k++;
	}
	i++;
      }
    return result;
  }
}
