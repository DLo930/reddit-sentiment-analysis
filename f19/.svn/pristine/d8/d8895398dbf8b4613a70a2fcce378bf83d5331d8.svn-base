/**
 * Lab 4 - TA Training: jaburns (Author: astanesc)
 * Assumes both A and B are at least length 1
 */

void sort(int[] A, int n) {
    for(int i = 0; i < n; i++) {
        int min = A[i];
        int min_ind = i;
        for(int j = i+1; j < n; j++) {
            if(min > A[j]) {
                min = A[j];
                min_ind = j;
            }
        }
        int temp = A[min_ind];
        A[min_ind] = A[i];
        A[i] = temp;
    }
}


bool no_prev_dupes(int[] intersection, int len, int check) {
    for(int i = 0; i < len; i++) {
        if(intersection[i] == check) return false;
    }
    return true;
}

int intersect(int[] A, int n, int[] B, int m, int[] intersection)
//@requires 0 <= n && n <= \length(A);
//@requires 0 <= m && m <= \length(B);
//@requires n <= \length(intersection) || m <= \length(intersection);
//@ensures 0 <= \result && \result <= m && \result <= n;
{
    int intersect_ind = 0;

    if(A[0] == B[0]) {
        intersection[0] = A[0];
        intersect_ind = 1;
    }

    for(int i = 1; i < n; i++) {
        for(int j = i; j < m; j++) {
            if(A[i] == B[j] && no_prev_dupes(intersection, intersect_ind, A[i])) {
                intersection[intersect_ind] = A[i];
                intersect_ind++;
                j = m;
            }
        }
    }
    sort(intersection, intersect_ind);
    return intersect_ind;
}
