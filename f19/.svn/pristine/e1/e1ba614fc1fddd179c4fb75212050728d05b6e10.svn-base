queue_t inval() {
  queue_t Q = queue_new();
  Q->size = 42;
  return Q;
}


int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  int[] A = parse_ints("42 12 19 66 32 -1 55 0", 10);

  if (string_equal(arg, "new")) {
    queue* Q = queue_new();
    if (Q == NULL) return 1;
    if (Q->front != NULL) return 1;
    if (Q->size != 0) return 1;

  } else if (string_equal(arg, "size_precon1")) {
    queue_size(NULL);

  } else if (string_equal(arg, "size_precon2")) {
    queue_size(inval());

  } else if (string_equal(arg, "size")) {
    queue* Q = alloc(queue);
    if (queue_size(Q) != 0) return 1;
    Q->back = alloc(list);
    if (queue_size(Q) != 0) return 1;

    for (int i = 1; i < 8; i++) {
      Q = construct(A, 0, i);
      if (queue_size(Q) != i) return 1;
    }

  } else if (string_equal(arg, "NULLs-are-allowed")) {
    queue* Q = alloc(queue);
    enq(Q, NULL);
    if (deq(Q) != NULL) return 1;

  } else if (string_equal(arg, "enq_precon1")) {
    enq(NULL, NULL);

  } else if (string_equal(arg, "enq_precon2")) {
    enq(inval(), (void*)inval());

  } else if (string_equal(arg, "enq")) {
    queue* Q = alloc(queue);
    enq(Q, w(16));
    if (Q->front == NULL || Q->front != Q->back) return 1;
    if (Q->back->next != NULL) return 1;
    if (Q->front->data == NULL || 16 != *(int*)Q->front->data) return 1;

    Q = alloc(queue);
    Q->back = alloc(list);
    enq(Q, w(16));
    if (Q->front == NULL || Q->front != Q->back) return 1;
    if (Q->back->next != NULL) return 1;
    if (Q->front->data == NULL || 16 != *(int*)Q->front->data) return 1;

    for (int i = 7; i >= 0; i--) {
      Q = construct(A, 0, i);
      enq(Q, w(15122));
      A[i] = 15122;
      if (!confirm(Q, A, 0, i+1)) return 1;
    }

  } else if (string_equal(arg, "deq_precon1")) {
    deq(NULL);

  } else if (string_equal(arg, "deq_precon2")) {
    deq(inval());

  } else if (string_equal(arg, "deq_precon3")) {
    deq(queue_new());

  } else if (string_equal(arg, "deq")) {
    for (int i = 0; i < 7; i++) {
      queue* Q = construct(A, i, 8);
      void* x = deq(Q);
      //@assert \hastag(int*, x);
      if (*(int*)x != A[i]) return 1;
      if (!confirm(Q, A, i+1, 8)) return 1;
    }

  } else {
    error(string_join("Bad arg: ", arg));
  }

  return 0;
}
