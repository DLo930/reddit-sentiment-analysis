#use <string>

rope_t balist(int lower, int upper) 
//@requires 32 <= lower && lower < upper && upper <= 126;
{
  rope_t r = alloc(struct rope_node);

  if (upper - lower == 1) {
    r->len = 1;
    r->data = string_fromchar(char_chr(lower));
  } else {
    int mid = (upper + lower) / 2;
    r->len = upper - lower;
    r->left = balist(lower, mid);
    r->right = balist(mid, upper);
  }

  return r;
}

rope_t leftist(int lower, int upper)
//@requires 32 <= lower && lower < upper && upper <= 126;
{
  rope_t r = alloc(struct rope_node);

  if (upper - lower == 1) {
    r->len = 1;
    r->data = string_fromchar(char_chr(lower));
  } else {
    r->len = upper - lower;
    r->left = leftist(lower, upper - 1);
    r->right = leftist(upper - 1, upper);
  }

  return r;
}

rope_t rightist(int lower, int upper)
//@requires 32 <= lower && lower < upper && upper <= 126;
{
  rope_t r = alloc(struct rope_node);

  if (upper - lower == 1) {
    r->len = 1;
    r->data = string_fromchar(char_chr(lower));
  } else {
    r->len = upper - lower;
    r->left = rightist(lower, lower + 1);
    r->right = rightist(lower + 1, upper);
  }

  return r;
}

rope_t hbd() {
  rope_t HBD = alloc(struct rope_node);
  HBD->len = 15;
  HBD->left = alloc(struct rope_node);
  HBD->left->len = 11;
  HBD->left->left = alloc(struct rope_node);
  HBD->left->left->len = 4;
  HBD->left->left->data = "happ";
  HBD->left->right = alloc(struct rope_node);
  HBD->left->right->len = 7;
  HBD->left->right->data = "y birth";
  HBD->right = alloc(struct rope_node);
  HBD->right->len = 4;
  HBD->right->data = "day!";
  return HBD;
}

rope_t totally() {
  rope_t r = alloc(struct rope_node);
  r->len = 7;
  r->left = alloc(struct rope_node);
  r->left->len = 1;
  r->left->data = "t";
  r->right = alloc(struct rope_node);
  r->right->len = 6;
  r->right->data = "otally";
  return r;
}

rope_t efficient() {
  rope_t r = alloc(struct rope_node);
  r->len = 9;
  r->left = alloc(struct rope_node);
  r->left->len = 8;
  r->left->data = "efficien";
  r->right = alloc(struct rope_node);
  r->right->len = 1;
  r->right->data = "t";
  return r;
}

rope_t abra1() {
  rope_t r = alloc(struct rope_node);
  r->len = 11;
  r->left = alloc(struct rope_node);
  r->left->len = 4;
  r->left->left = alloc(struct rope_node);
  r->left->left->len = 2;
  r->left->left->data = "ab";
  r->left->right = alloc(struct rope_node);
  r->left->right->len = 2;
  r->left->right->data = "ra";
  r->right = alloc(struct rope_node);
  r->right->len = 7;
  r->right->left = alloc(struct rope_node);
  r->right->left->len = 5;
  r->right->left->left = alloc(struct rope_node);
  r->right->left->left->len = 3;
  r->right->left->left->data = "cad";
  r->right->left->right = alloc(struct rope_node);
  r->right->left->right->len = 2;
  r->right->left->right->data = "ab";
  r->right->right = alloc(struct rope_node);
  r->right->right->len = 2;
  r->right->right->data = "ra";
  return r;
}

rope_t abra2() {
  rope_t r = alloc(struct rope_node);
  r->len = 11;
  r->left = alloc(struct rope_node);
  r->left->len = 4;
  r->left->left = alloc(struct rope_node);
  r->left->left->len = 3;
  r->left->left->data = "abr";
  r->left->right = alloc(struct rope_node);
  r->left->right->len = 1;
  r->left->right->data = "a";
  r->right = alloc(struct rope_node);
  r->right->len = 7;
  r->right->left = alloc(struct rope_node);
  r->right->left->len = 3;
  r->right->left->data = "cad";
  r->right->right = alloc(struct rope_node);
  r->right->right->len = 4;
  r->right->right->left = alloc(struct rope_node);
  r->right->right->left->len = 2;
  r->right->right->left->data = "ab";
  r->right->right->right = alloc(struct rope_node);
  r->right->right->right->len = 2;
  r->right->right->right->data = "ra";
  return r;
}

// string with length approximately one billion. NBD.
rope_t biggie() {
  rope_t r = alloc(struct rope_node);
  r->len = 15;
  r->left = alloc(struct rope_node);
  r->left->len = 9;
  r->left->data = "012345678";
  r->right = alloc(struct rope_node);
  r->right->len = 6;
  r->right->data = "9abcde";

  while (r->len < 1006632960) {
    rope_t s = alloc(struct rope_node);
    s->len = r->len * 2;
    s->left = r;
    s->right = r;
    r = s;
  }
                
  if (r->len != 1006632960) error(string_fromint(r->len));
  return r;
}