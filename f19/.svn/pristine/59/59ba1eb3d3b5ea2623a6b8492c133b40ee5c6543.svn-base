/* The pixel type and an interface to pixels
 * Stores pixels as ARGB hex strings of length 8 */

#use <parse>
#use <util>

typedef string pixel;    // Library (concrete) view of a pixel


bool is_pixel(string p) {
  if (!(string_length(p) == 8)) { return false; }
  if (!(parse_int(string_sub(p,0,2), 16) != NULL)) { return false; }
  if (!(parse_int(string_sub(p,2,4), 16) != NULL)) { return false; }
  if (!(parse_int(string_sub(p,4,6), 16) != NULL)) { return false; }
  if (!(parse_int(string_sub(p,6,8), 16) != NULL)) { return false; }
  return true;
}

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return *parse_int(string_sub(p,2,4),16);
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return *parse_int(string_sub(p,4,6),16);
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return *parse_int(string_sub(p,6,8),16);
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return *parse_int(string_sub(p,0,2),16);
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= alpha && alpha < 256;
//@requires 0 <= red   && red < 256;
//@requires 0 <= green && green < 256;
//@requires 0 <= blue  && blue < 256;
//@ensures is_pixel(\result);
{
  int i = (alpha << 24) | (red << 16) | (green << 8) | blue;
  return int2hex(i);
}


// Do not write code below this line
typedef pixel pixel_t;   // Client (abstract) view of a pixel
