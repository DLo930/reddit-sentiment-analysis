/* 
 * Resizing hash sets, implemented with separate chaining
 * 
 * 15-122 Principles of Imperative Computation
 */

#use <util>
#use <conio>

/************************/
/*** Client interface ***/
/************************/

// typedef ______* elem;
typedef void* elem;

typedef bool elem_equiv_fn(elem x, elem y)
  /*@requires x != NULL && y != NULL; @*/ ;

typedef int elem_hash_fn(elem x)
  /*@requires x != NULL; @*/ ;

/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* hset_t;
typedef struct hset_header* hset_t;

hset_t hset_new(int capacity, elem_equiv_fn* equiv, elem_hash_fn* hash)
  /*@requires capacity > 0 && equiv != NULL && hash != NULL; @*/
  /*@ensures \result != NULL; @*/ ;

elem hset_lookup(hset_t H, elem x)
  /*@requires H != NULL && x != NULL; @*/ ;

void hset_insert(hset_t H, elem x)
  /*@requires H != NULL && x != NULL; @*/
  /*@ensures hset_lookup(H, x) == x; @*/ ;

/**********************/
/*** Implementation ***/
/**********************/

typedef struct chain_node chain;
struct chain_node {
  elem data;
  chain* next;
};

typedef struct hset_header hset;
struct hset_header {
  int size;
  int capacity;               /* 0 < capacity */
  chain*[] table;             /* \length(table) == capacity */
  elem_equiv_fn* equiv;       /* non-NULL */
  elem_hash_fn* hash;         /* non-NULL */
};

bool elemequiv(hset* H, elem x, elem y)
//@requires H != NULL && H->equiv != NULL;
{
  return (*H->equiv)(x, y);
}

int elemhash(hset* H, elem x) 
//@requires H != NULL && H->capacity > 0 && H->hash != NULL;
//@requires x != NULL;
//@ensures 0 <= \result && \result < H->capacity;
{
  return abs((*H->hash)(x) % H->capacity);
}

// All hash values are correct for the current index
bool is_chain(hset* H, chain* p, int i) 
//@requires H != NULL && H->capacity > 0 && H->hash != NULL;
{
  if (p == NULL) return true;
  return p->data != NULL 
    && elemhash(H, p->data) == i
    && is_chain(H, p->next, i);
}

bool is_chains(hset* H, int lo, int hi) 
//@requires H != NULL && H->capacity > 0 && H->hash != NULL;
//@requires \length(H->table) == H->capacity;
//@requires 0 <= lo && lo <= hi && hi <= H->capacity;
{
  if (lo == hi) return true;
  return is_chain(H, H->table[lo], lo) 
    && is_chains(H, lo+1, hi);
}

bool is_table_expected_length(chain*[] table, int length) {
  //@assert \length(table) == length;
  return true;
}

bool is_hset(hset* H) {
  return  H != NULL
    && H->capacity > 0
    && H->size >= 0 
    && H->equiv != NULL
    && H->hash != NULL
    && is_table_expected_length(H->table, H->capacity)
    && is_chains(H, 0, H->capacity);
}

hset* hset_new(int capacity, elem_equiv_fn* equiv, elem_hash_fn* hash)
//@requires capacity > 0 && equiv != NULL && hash != NULL;
//@ensures is_hset(\result);
{
  hset* H = alloc(hset);
  H->size = 0;
  H->capacity = capacity;
  H->table = alloc_array(chain*, capacity);
  H->equiv = equiv;
  H->hash = hash;
  return H;
}

elem hset_lookup(hset* H, elem x)
//@requires is_hset(H);
//@requires x != NULL;
{
  int i = elemhash(H, x);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (elemequiv(H, p->data, x)) {
      return p->data;
    }
  }

  return NULL;
}

void hset_resize(hset* H) 
//@requires is_hset(H);
//@requires H->size >= H->capacity;
//@ensures is_hset(H);
{
  int old_capacity = H->capacity;
  int new_capacity = H->size * 2;
  assert(new_capacity > H->capacity);
  chain*[] old_table = H->table;
  chain*[] new_table = alloc_array(chain*, new_capacity);

  print("(hset resizing to "); printint(new_capacity); println(")");
  H->capacity = new_capacity; // is_hset now violated!
  H->table = new_table; // is_hset restored *only* because we don't check size

  for (int i = 0; i < old_capacity; i++) 
  //@loop_invariant 0 <= i && i <= old_capacity;
  //@loop_invariant is_hset(H); // only because we don't check size
  {
    chain* p = old_table[i];
    while (p != NULL)
    //@loop_invariant is_hset(H); // only because we don't check size
    {
      //@assert p->data != NULL;
      chain* q = p->next; // Save the rest of the chain
      int h = elemhash(H, p->data);
      p->next = H->table[h];
      H->table[h] = p;
      p = q;
    }
  }
}

void hset_insert(hset* H, elem x) 
//@requires is_hset(H);
//@requires x != NULL;
//@ensures is_hset(H);
//@ensures x == hset_lookup(H, x);
{
  int i = elemhash(H, x);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (elemequiv(H, p->data, x)) {
      p->data = x;
      return;
    }
  }
  
  // prepend new element
  chain* p = alloc(chain);
  p->data = x;
  p->next = H->table[i];
  H->table[i] = p;
  (H->size)++;
  assert(H->size > 0);

  if (H->size >= H->capacity) hset_resize(H); 
}

