#use <args>
#use "make-tbuf.c0"

int main() {
  args_t args = args_parse();
  if (args->argc != 1) 4/0; // Signal bug in autograder!
  string s = args->argv[0];

  tbuf B = make_tbuf("abc-de|fgh-ijklmnop-q");
  
  if (string_equal("good0", s)) {
    B = make_tbuf("|");
  } else if (string_equal("good1", s)) {
    B = make_tbuf("abc|def");
  } else if (string_equal("good4", s)) {
    B = B;
  } 

  // is_linked and is_gapbuf
  else if (string_equal("null", s)) {
    B = NULL;
  } else if (string_equal("alloc", s)) {
    B = alloc(struct text_buffer);
  } else if (string_equal("nullgap", s)) {
    B->point->data = NULL;
  } else if (string_equal("allocgap", s)) {
    B->point->data = alloc(struct gap_buffer);
  } 
  
  // size
  else if (string_equal("size", s)) {
    B = make_tbuf("abc|def");
    B->point->data = gapbuf_new_(8);
  } else if (string_equal("mixedsize", s)) {
    B->point->next->data = gapbuf_new_(8);
    gapbuf_insert_(B->point->next->data, 'c');
    gapbuf_backward_(B->point->next->data);
  } 

  // Empty-or-full
  else if (string_equal("full-empty1", s)) {
    B->point->prev->data = gapbuf_new_(16);
  } else if (string_equal("full-empty2", s)) {
    B->point->data = gapbuf_new(16);
  } else if (string_equal("full-empty3", s)) {
    B->point->next->data = gapbuf_new_(16);
  } else if (string_equal("full-empty4", s)) {
    B->point->next->next->data = gapbuf_new_(16);
  } else if (string_equal("empty-empty1", s)) {
    B = make_tbuf("a-b|");
    gapbuf_delete_(B->point->data);
    gapbuf_delete_(B->point->prev->data);
  } 

  // Alignment
  else if (string_equal("aligned1", s)) {
    gapbuf_backward_(B->point->prev->data);
    gapbuf_backward_(B->point->prev->data);
    gapbuf_backward_(B->point->prev->data);
  } else if (string_equal("aligned2", s)) {
    gapbuf_backward_(B->point->prev->data);
  } else if (string_equal("aligned3", s)) {
    gapbuf_forward_(B->point->next->next->data);
  }

  // Don't know how to deal with the argument, so get weird
  else { 4/0; }

  assert(is_tbuf(B));
  return 0;
}