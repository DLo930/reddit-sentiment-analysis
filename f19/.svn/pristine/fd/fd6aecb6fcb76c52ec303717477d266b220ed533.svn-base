// My solution for Homework 2, Task 6
// Test in-place sorting function

#use "lib/stringsearch.c0"

void copy(string[] from, string[] to, int length) 
  //@requires \length(from) == \length(to);
  //@requires \length(from) == length;
{
  for ( int i=0 ; i < length ; i++ ) 
    //@loop_invariant 0 <= i;
    {
      to[i] = from[i];
    }
}  

int main() {

  int length = 10;
  //@assert length >= 0;
  string[] original = alloc_array(string, length);
  string[] to_sort = alloc_array(string, length);
  for ( int i=0 ; i<length ; i++ )
    //@loop_invariant 0 <= i && i <= length;
    {
      to_sort[i] = string_fromint(100-i);
    }
  copy(to_sort, original, length);
  sort(to_sort, 0, length);
  //@assert is_sorted(to_sort, 0, length);
  for ( int i=0 ; i < length ; i++ ) 
    //@loop_invariant 0 <= i;
    {
      // check that no data was lost
      //@assert binsearch(original[i], to_sort, length) != -1;
      {}
    }
  copy(original, to_sort, length);
  int lower = length / 2;
  sort(to_sort, lower, length);
  //@assert is_sorted(to_sort, lower, length);

  for ( int i=lower ; i < length ; i++ ) 
    //@loop_invariant lower <= i;
    {
      // check that no data was lost
      //@assert is_in(original[i], to_sort, lower, length);
      {}
    }

  for ( int i=0 ; i < lower ; i++ )
    //@loop_invariant 0 <= i;
    {
      // check that the rest of the array is unchanged
      //@assert string_equal(original[i], to_sort[i]);
      {}
    }

  copy(original, to_sort, length);
  int upper = length / 2;
  sort(to_sort, 0, upper);
  //@assert is_sorted(to_sort, 0, upper);

  for ( int i=0 ; i < upper ; i++ ) 
    //@loop_invariant 0 <= i;
    {
      // check that no data was lost
      //@assert is_in(original[i], to_sort, 0, upper);
      {}
    }

  for ( int i=upper ; i < length ; i++ )
    //@loop_invariant upper <= i;
    {
      // check that the rest of the array is unchanged
      //@assert string_equal(original[i], to_sort[i]);
      {}
    }

  string[] all_same = alloc_array(string, 10);
  for ( int i=0 ; i<10 ; i++ ) all_same[i] = "foo";
  sort(all_same, 0, 10);
  for ( int i=0 ; i<10 ; i++ ) {
    //@assert string_equal(all_same[i], "foo");
  }

  

  string[] one = alloc_array(string, 1);
  one[0] = "hello";
  sort(one, 0, 1);
  //@assert string_compare(one[0], "hello") == 0;

  string[] empty = alloc_array(string, 0);
  sort(empty, 0, 0);
  //@assert is_sorted(empty, 0, 0);

  

  return 0;
}
