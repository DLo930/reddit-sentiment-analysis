\part[0\half]\TAGS{ints, correctness}
We want to detect whether an overflow occurs while executing
\begin{lstlisting}
    int x = a*b;
\end{lstlisting}
In each of the following exercises, state whether the given condition
correctly evaluates to \lstinline'true' iff there is overflow.  If
not, give a counterexample in the form of \emph{specific} values for
\lstinline'a', \lstinline'b' and \lstinline'x'
\begin{subparts}
\subpart
\begin{lstlisting}[numbers=none]
 ((a > 0) && (b > 0) && (x < 0) || (a > 0) && (b < 0) && (x > 0) ||
  (a < 0) && (b > 0) && (x > 0) || (a < 0) && (b < 0) && (x < 0))
\end{lstlisting}
\begin{framed}
\ifprintanswers{\color{\answerColor}
It does not always detect overflow (e.g., $2^{20} * 2^{20} = 2^8 \mod 2^{32}$).
}\else~\vspace{0.8in}\fi
\end{framed}

\enlargethispage{5ex}
\subpart
\lstinline'(a != 0) && (x / a != b)'
\begin{framed}
\ifprintanswers{\color{\answerColor}
It does not always detect overflow (e.g., \lstinline'a = -1' and
\lstinline'b = int_min()' yields a division by zero rather a boolean).
}\else~\vspace{0.8in}\fi
\end{framed}
\end{subparts}

\RUBRIC
Part <safe_mult>
TAGS: ints, correctness

Gradescope rubric:
+ 0.25 pts 1st box: does not always detect overflow (e.g., 2^20 * 2^20 = 2^8 mod 2^32 -- all >0)
+ 0.25 pts 2nd box: does not always detect overflow (e.g., a=-1 and b=int_min() yields a division by zero rather a boolean)

Commentary (1st box):
  This does not correctly detect overflow. Consider for example:
    --> 20000000 * 20000000;
    1105788928 (int)
  Lots of counterexamples here.

Commentary (2nd box):
  For a=-1 and b=int_min(), we get x=int_min()
  Here -1 * int_min() gives int_min() and is indeed a overflow. But (a != 0) && (x / -1 != b) gives a division by 0 error.

C0 program that checks student counterexamples (thanks to Joe Finn!):
see svn .../written/questions/int-bool/2b.c0
ENDRUBRIC
