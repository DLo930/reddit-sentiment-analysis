#use <string>

typedef struct student_info* student;
struct student_info {
  string andrew_id;
  int days_present;
  int days_absent;
};

int hash_student(string s) {
  int h = 0;
  for (int i = 0; i < string_length(s); i++)
    h = 32 * h + char_ord(string_charat(s, i));
  return h;	
}

bool students_same_andrewid(string x, string y){
  return (hash_student(x)==hash_student(y));	
}

hset_t new_roster(string[] andrew_ids, int len)
//@requires \length(andrew_ids) == len;
{
  hset_t h = hset_new(len, &students_same_andrewid, &hash_student);
  for (int i = 0; i < len; i++) {
  //loop_invariant i <= len && 0 <= i;
    student v = alloc(struct student_info);
	v -> andrew_id = andrew_ids[i];
    hset_insert(h, andrew_ids[i], (void*)v);
  }
  return h;
}

// ONLY LIBRARY INTERFACE FUNCTIONS MUST BE USED FOR THE FOLLOWING

void mark_present(hset_t H,  string andrew_id)
//@requires H != NULL;
{
  student s = (student)(hset_lookup(H, andrew_id));
  s -> days_present +=1;
  hset_insert(H, andrew_id, (void*)s);	
}

void mark_absent(hset_t H,  string andrew_id)
//@requires H != NULL;
{
  student s = (student)(hset_lookup(H, andrew_id));
  s -> days_absent +=1;
  hset_insert(H, andrew_id, (void*)s);	
}