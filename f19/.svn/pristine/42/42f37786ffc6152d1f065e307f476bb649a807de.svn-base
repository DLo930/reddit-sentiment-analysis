C0 C0 FF EE       # magic number
00 13             # version 9, arch = 1 (64 bits)

00 00             # int pool count
# int pool

00 00             # string pool total size
# string pool

00 01             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 03             # number of local variables = 3
00 B5             # code length = 181 bytes
10 01    # bipush 1        # 1
36 00    # vstore 0        # i = 1;
# <00:loop>
15 00    # vload 0         # i
10 0A    # bipush 10       # 10
A1 00 06 # if_icmplt +6    # if (i < 10) goto <01:body>
A7 00 A7 # goto +167       # goto <02:exit>
# <01:body>
15 00    # vload 0         # i
BC 01    # newarray 1      # alloc_array(char, i)
36 01    # vstore 1        # B = alloc_array(char, i);
10 00    # bipush 0        # 0
36 02    # vstore 2        # k = 0;
# <03:loop>
15 02    # vload 2         # k
15 00    # vload 0         # i
A1 00 06 # if_icmplt +6    # if (k < i) goto <04:body>
A7 00 39 # goto +57        # goto <05:exit>
# <04:body>
15 01    # vload 1         # B
15 02    # vload 2         # k
63       # aadds           # &B[k]
15 02    # vload 2         # k
10 03    # bipush 3        # 3
70       # irem            # (k % 3)
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if ((k % 3) == 0) goto <06:cond_true>
A7 00 08 # goto +8         # goto <07:cond_false>
# <06:cond_true>
10 61    # bipush 97       # 'a'
A7 00 17 # goto +23        # goto <08:cond_end>
# <07:cond_false>
15 02    # vload 2         # k
10 03    # bipush 3        # 3
70       # irem            # (k % 3)
10 01    # bipush 1        # 1
9F 00 06 # if_cmpeq +6     # if ((k % 3) == 1) goto <09:cond_true>
A7 00 08 # goto +8         # goto <10:cond_false>
# <09:cond_true>
10 62    # bipush 98       # 'b'
A7 00 05 # goto +5         # goto <11:cond_end>
# <10:cond_false>
10 63    # bipush 99       # 'c'
# <11:cond_end>
# <08:cond_end>
55       # cmstore         # B[k] = (((k % 3) == 0) ? 'a' : (((k % 3) == 1) ? 'b' : 'c'));
15 02    # vload 2         # k
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # k += 1;
A7 FF C3 # goto -61        # goto <03:loop>
# <05:exit>
10 00    # bipush 0        # 0
36 02    # vstore 2        # k = 0;
# <12:loop>
15 02    # vload 2         # k
15 00    # vload 0         # i
A1 00 06 # if_icmplt +6    # if (k < i) goto <13:body>
A7 00 45 # goto +69        # goto <14:exit>
# <13:body>
15 01    # vload 1         # B
15 02    # vload 2         # k
63       # aadds           # &B[k]
34       # cmload          # B[k]
15 02    # vload 2         # k
10 03    # bipush 3        # 3
70       # irem            # (k % 3)
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if ((k % 3) == 0) goto <18:cond_true>
A7 00 08 # goto +8         # goto <19:cond_false>
# <18:cond_true>
10 61    # bipush 97       # 'a'
A7 00 17 # goto +23        # goto <20:cond_end>
# <19:cond_false>
15 02    # vload 2         # k
10 03    # bipush 3        # 3
70       # irem            # (k % 3)
10 01    # bipush 1        # 1
9F 00 06 # if_cmpeq +6     # if ((k % 3) == 1) goto <21:cond_true>
A7 00 08 # goto +8         # goto <22:cond_false>
# <21:cond_true>
10 62    # bipush 98       # 'b'
A7 00 05 # goto +5         # goto <23:cond_end>
# <22:cond_false>
10 63    # bipush 99       # 'c'
# <23:cond_end>
# <20:cond_end>
A0 00 06 # if_cmpne +6     # if (B[k] != (((k % 3) == 0) ? 'a' : (((k % 3) == 1) ? 'b' : 'c'))) goto <15:then>
A7 00 09 # goto +9         # goto <16:else>
# <15:then>
10 01    # bipush 1        # 1
B0       # return          # 
A7 00 03 # goto +3         # goto <17:endif>
# <16:else>
# <17:endif>
15 02    # vload 2         # k
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # k += 1;
A7 FF B7 # goto -73        # goto <12:loop>
# <14:exit>
15 00    # vload 0         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 00    # vstore 0        # i += 1;
A7 FF 55 # goto -171       # goto <00:loop>
# <02:exit>
10 00    # bipush 0        # 0
B0       # return          # 

00 00             # native count
# native pool

