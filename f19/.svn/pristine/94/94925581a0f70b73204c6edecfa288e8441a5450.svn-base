/* Selection Sort
 *
 * Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 * Ported by Ryan Sit to strings, Spring 2013
 */

#use <string>
#use "stringsearch.c0"

void swap(string[] A, int i, int j)
//@requires 0 <= i && i < \length(A);
//@requires 0 <= j && j < \length(A);
//@ensures string_equal(\old(A[i]), A[j]);
//@ensures string_equal(\old(A[j]), A[i]);
{
  string tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
  return;
}

int min_index(string[] A, int lower, int upper)
//@requires 0 <= lower && lower < upper && upper <= \length(A);
//@ensures lower <= \result && \result < upper;
//@ensures le_seg(A[\result], A, lower, upper);
{
  int m = lower;
  string min = A[lower];
  for (int i = lower+1; i < upper; i++) {
    if (string_lt(A[i], min)) {
      m = i;
      min = A[i];
    }
  }
  return m;
}

void sort(string[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(A, lower, upper);
{
  for (int i = lower; i < upper; i++)
    //@loop_invariant lower <= i && i <= upper;
    //@loop_invariant is_sorted(A, lower, i);
    {
      int m = min_index(A, i, upper);
      //@assert le_seg(A[m], A, i, upper);
      swap(A, i, m);
    }
  return;
}

string[] sort_copy(string[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(\result, lower, upper);
//@ensures \length(\result) == upper - lower;
{
  int resultsize = upper - lower;
  string[] B = alloc_array(string, resultsize);
  for (int i = 0 ; i < resultsize; i++)
    //@loop_invariant 0 <= i && i <= resultsize;
    {
      B[i] = A[lower + i];
    }
  sort(B, 0, resultsize);
  return B;
}
