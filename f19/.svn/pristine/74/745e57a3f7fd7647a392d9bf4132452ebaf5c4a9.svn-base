#use <img>
#use <parse>
#use <args>
#use <conio>
#use <file>
#use <string>

int isqrt (int n)
//@requires n >= 0;
//@ensures 0 <= \result*\result && \result*\result <= n;
//@ensures n < (\result+1)*(\result+1) || (\result+1)*(\result+1) < 0;
//@ensures \result >= 0;
{ int i = 0; int k = 0;
  while (0 <= k && k <= n)
    //@loop_invariant k == i * i;
    //@loop_invariant i == 0 || (i > 0 && (i-1)*(i-1) <= n);
    {
      k = k + 2*i + 1;
      i = i + 1;
    }
  return i-1;
}

int direction (int y, int x)
{
  if (x == 0 && y == 0)
    return 0;

  if (x == 0)
    return 90;

  int q = 10000 * y / x;
  if (q > -4142 && q <= 4142)
    return 0;
  else if (q > 4142 && q <= 24142)
    return 45;
  else if (q > -24142 && q <= -4142)
    return -45;
  else
    return 90;
}

struct mask_header {
  int[] data;
  int size;
  int sum;
};

typedef struct mask_header* mask_t;

mask_t loadmask(string name) {
  file_t file = file_read(name);
  int tmp = 0;
  mask_t mask = alloc(struct mask_header);

  if (file == NULL) {
    error("Unable to read mask file. Try again.");
  }

  int* size = parse_int(file_readline(file),10);
  if (size == NULL) {
    error("Invalid blur mask size");
  }

  if (size == NULL || (*size < 0) || (*size % 2 != 1)) {
    error("Invalid blur mask size");
  }

  mask->data = alloc_array(int, *size * *size);
  int j = 0;
  while (!file_eof(file)) {
    int* value = parse_int(file_readline(file),10);
    if (value == NULL) {
      print("Line ");
      printint(j+2);
      error(" has invalid weight");
    }
    mask->data[j] = *value;
    tmp += *value;
    j++;
  }
  if (j != *size * *size) {
    error("Not enough weights in mask file");
  }
  mask->size = *size;
  mask->sum = tmp;

  return mask;
}

int main() {
  /* Get args */
  args_t args = args_parse();
  if (args->argc != 2) error("Wrong number of args");

  image_t source = image_load(args->argv[0]);
  if (source == NULL) error("Could not load source");
  int width = image_width(source);
  int height = image_height(source);
  pixel_t[] inpixels = image_data(source);

  image_t target = image_load(args->argv[1]);
  if (target == NULL) error("Could not load target");
  if (!(width == image_width(target))) error("Target has wrong width");
  if (!(height == image_height(target))) error("Target has wrong height");
  pixel_t[] outpixels = image_data(target);

  mask_t mask_sobelX = loadmask("sobelX.txt");
  mask_t mask_sobelY = loadmask("sobelY.txt");
  mask_t mask_blur = loadmask("blur-more-mask.txt");

  /* Apply blur */
  int[] blurval =
    apply_mask(inpixels, width, height, mask_blur->data, mask_blur->size);
  //@assert blurval != inpixels;
  //@assert \length(blurval) == \length(inpixels);

  pixel_t[] blurpix = alloc_array(pixel, width*height);
  for (int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i;
    {
      int tmp = blurval[i] / mask_blur->sum;
      //@assert 0 <= tmp && tmp < 256;
      blurpix[i] = (inpixels[i] & 0xFF000000)
        | (tmp << 16)
        | (tmp << 8)
        | tmp;
    }

  /* Apply Sobel operators */
  int[] sobelX =
    apply_mask(blurpix, width, height, mask_sobelX->data, mask_sobelX->size);
  //@assert sobelX != blurpix;
  //@assert \length(sobelX) == \length(blurpix);
  int[] sobelY =
    apply_mask(blurpix, width, height, mask_sobelY->data, mask_sobelY->size);
  //@assert sobelY != blurpix;
  //@assert \length(sobelY) == \length(blurpix);

  int[] G = alloc_array(int, width*height);
  for (int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i;
    {
      G[i] = isqrt(sobelY[i] * sobelY[i] + sobelX[i] * sobelX[i]);
    }

  /* Generating output image */
  pixel_t[] resultpixels = alloc_array(pixel_t, width*height);

  for (int i = 0; i < height; i++)
    //@loop_invariant 0 <= i;
    {
      for (int j = 0; j < width; j++)
	//@loop_invariant 0 <= j;
	{
	  int s = 1;
	  int t = 1;
	  int index = get_index(i, j, width, height);
	  int D = direction(sobelY[index], sobelX[index]);
	  if (i == 0 || j == 0 || i == height - 1 || j == width - 1)
	    resultpixels[index] = -16777216;
	  else if (D == 0 &&
		   s * G[index] > t * G[get_index(i, j - 1, width, height)] &&
		   s * G[index] > t * G[get_index(i, j + 1, width, height)])
	    resultpixels[index] = -1;
	  else if (D == 90 &&
		   s * G[index] > t * G[get_index(i - 1, j, width, height)] &&
		   s * G[index] > t * G[get_index(i + 1, j, width, height)])
	    resultpixels[index] = -1;
	  else if (D == 45 &&
		   s * G[index] > t * G[get_index(i - 1, j - 1,
						  width, height)] &&
		   s * G[index] > t * G[get_index(i + 1, j + 1, width, height)])
	    resultpixels[index] = -1;
	  else if (D == -45 &&
		   s * G[index] > t * G[get_index(i + 1, j - 1,
						  width, height)] &&
		   s * G[index] > t * G[get_index(i - 1, j + 1, width, height)])
	    resultpixels[index] = -1;
	  else
	    resultpixels[index] = -16777216;
	}
    }

  for(int i = 0; i < width*height; i++)
    //@loop_invariant 0 <= i;
    if(outpixels[i] != resultpixels[i]) return 1;

  return 0;
}
