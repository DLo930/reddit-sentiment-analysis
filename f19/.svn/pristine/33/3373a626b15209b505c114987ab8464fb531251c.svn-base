int POW(int b, int e)
//@requires e >= 0;
{
  if (e == 0) return 1;
  return b * POW(b, e-1);
}

int reverse_math(int x)
//@requires 0 <= x && x <= POW(10,8);
//@ensures 0 <= \result && \result <= POW(10,8);
{
  int y = 0;

  for (int i = 0; i < 7; i++)
  //@loop_invariant 0 <= i && i <= 7;
  //@loop_invariant y <= POW(10, i);
  //@loop_invariant x <= POW(10, 7-i);
  {
    y *= 10;
    y += x % 10;
    x /= 10;
  }

  return y;
}

int reverse_array(int x) {
  int[] A = alloc_array(int, 7);
  int y = 0;

  for (int i = 0; i < 7; i++) {
    int a = x % 10;
    A[i] = a;
    x /= 10;
  }

  for (int j = 0; j < 7; j++)
  //@loop_invariant 0 <= j && j <= \length(A);
  //@loop_invariant j == 0 ? y == 0 : y % 10 == A[j-1];
  {
    y *= 10;
    y += A[j];
  }

  return y;
}
