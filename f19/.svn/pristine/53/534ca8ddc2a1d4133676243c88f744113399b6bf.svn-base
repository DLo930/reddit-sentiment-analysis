/*
 * Doslingos - correct (?!?!!!?!) reference solution
 *
 */

int count_vocab(string[] vocab, int[] freq, int v,
                string tweetfile,
                bool fast)
//@requires v == \length(vocab) && v == \length(freq);
//@requires is_sorted(vocab, 0, v);
{
  string_bundle bund = read_words(tweetfile);
  int len = string_bundle_length(bund);
  string[] tweets = string_bundle_array(bund);
  //@assert \length(tweets) == len;

  // Keep track of out-of-vocabulary words
  int oov = 0;

  for(int i = 0; i < len; i++)
    //@loop_invariant 0 <= i;
    {
      // Get index in vocabulary
      int j;
      if(fast) j = binsearch(tweets[i], vocab, v);
      else j = linsearch(tweets[i], vocab, v);
      
      // Update the appropriate frequency count
      if (j == -1) oov += 1;
      else freq[j] += 1;
    }
  
  return oov;
}

void sekret_swap(string[] A, int[] B, int i, int j) 
// so bad no preconditions
{
  string tempA = A[i];
  int tempB = B[i];
  A[i] = A[j];
  B[i] = B[j];
  A[j] = tempA;
  B[j] = tempB;
}

void sort_by_freq(string[] vocab, int[] freq, int v) 
//@requires v == \length(vocab) && v == \length(freq);
//@ensures is_sorted_int(freq, 0, v);
{
  for (int i = 0; i < v; i++) {
    int mi = i;
    int min = freq[i];

    for (int j = i+1; j < v; j++) {
      if (freq[j] < min) {
        mi = j;
        min = freq[j];
      }
    }

    sekret_swap(vocab, freq, i, mi);
  }
}

