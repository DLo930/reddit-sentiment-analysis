\section*{Bit manipulation%
\TAGS{bit-patterns, ints}}

\begin{center}
    \begin{tabular}{r||c|c}
        \multicolumn{3}{c}{and} \\[0.2em]
        \lstinline'&' & 1 & 0\\ \hline \hline
       1 & 1 & 0 \\ \hline
       0 & 0 & 0
    \end{tabular}
    \qquad
    \begin{tabular}{r||c|c}
        \multicolumn{3}{c}{or} \\[0.2em]
        \lstinline'|' & 1 & 0 \\\hline  \hline
              1 & 1 & 1 \\ \hline
              0 &1 & 0 \\
    \end{tabular}
    \qquad
    \begin{tabular}{r||c|c}
        \multicolumn{3}{c}{xor (exclusive or)} \\[0.2em]
        \lstinline'^' & 1 & 0 \\ \hline \hline
               1 & 0 & 1 \\ \hline
               0 & 1 & 0
    \end{tabular}
    \qquad
    \begin{tabular}{c||c|c}
        \multicolumn{3}{c}{complement} \\[0.2em]
        \lstinline'~' & 1 & 0 \\\hline  \hline
                 & 0 & 1\\
        \multicolumn{3}{c}{}
    \end{tabular}
\end{center}

There are also shift operators. They take a number and shift it left
(or right) by the specified number of bits.  In \cn, right shifts
\emph{sign extend}. This means that if the first digit was a 1, then
1s will be copied in as we shift.
\begin{equation*}
  1101\ 1111\ 0101\ 0010_{[2]} >> 8 = \textbf{1111\ 1111}\ 1101\ 1111_{[2]}
\end{equation*}

\checkpoint*{}

\bgroup
\newcommand{\base}[1]{\textcolor{Brown}{#1}}
\newcommand{\bin}[1]{\textcolor{blue}{#1}}
\newcommand{\dec}[1]{\textcolor{red}{#1}}
\newcommand{\hex}[1]{\textcolor{Purple}{#1}}

What does  $(\bin{0001\:0101}_{[\base{2}]} \;\&\;
\bin{0011\:0101}_{[\base{2}]})  \;|\; (\bin{1010\:1010}_{[\base{2}]}
\;^\wedge\; \bin{0001\:1110}_{[\base{2}]})$
evaluate to? \answerline{$\bin{1011\:0101}_{[\base{2}]}$\hfill}

What does $(\dec{5}_{[\base{10}]} \;|\; \dec{13}_{[\base{10}]})  \;^\wedge\; (\dec{28}_{[\base{10}]} \;\&\; \dec{10}_{[\base{10}]})$
evaluate to?
\answerline{$\dec{5}_{[\base{10}]}$\hfill}

What is the difference between logical and bitwise operators?
\begin{solution}
The logical operators apply to entire values (of type
  \lstinline'bool') while bitwise operators apply to each bit of a
  value (of type \lstinline'int').
\end{solution}

\egroup