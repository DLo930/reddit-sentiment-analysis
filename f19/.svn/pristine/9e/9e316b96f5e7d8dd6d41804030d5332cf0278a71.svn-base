\newpage
\section*{Using \lstinline'is_segment' as a loop invariant%
\TAGS{linked-list, testing, loop-invariant}}

What are the loop invariants we need to prove the correctness of this
function? The loop invariant, as always, must be initially true, must
be preserved by every iteration of the loop, and together with the
negation of the loop guard must imply the postcondition. What is the
termination argument?

\begin{lstlisting}[numbers=left, belowskip=0pt, name="copy"]
linkedlist* copy(linkedlist* L)
//@requires is_linkedlist(L);
//@ensures is_linkedlist(\result);
//@ensures eq(L->start, L->end, \result->start, \result->end);
{
    linkedlist* N = alloc(linkedlist);
    N->start = alloc(list);
    list* o = L->start;
    list* n = N->start;
    while (o != L->end)
\end{lstlisting}
\begin{lstlisting}[numbers=left, lineskip=2ex, aboveskip=0pt, belowskip=0pt, name="copy"]
    //@loop_invariant [*\answerline{is\_segment(L->start, o);}*]
    //@loop_invariant [*\answerline{is\_segment(o, L->end);}*]
    //@loop_invariant [*\answerline{is\_segment(N->start, n);}*]
    //@loop_invariant [*\answerline{eq(L->start, o, N->start, n);}*]
\end{lstlisting}
\begin{lstlisting}[numbers=left, aboveskip=0pt, name="copy"]
    {
        n->data = o->data;
        n->next = alloc(list);
        o = o->next; n = n->next;
    }
    N->end = n;
    return N;
}
\end{lstlisting}

\begin{solution}
Termination argument: The distance from \verb'o' to \verb'L->end' is strictly decreasing (lines 12 and 18) and cannot go below zero (line 10).
\end{solution}