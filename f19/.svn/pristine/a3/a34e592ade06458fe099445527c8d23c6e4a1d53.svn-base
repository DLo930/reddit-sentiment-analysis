\section*{Header files%
\TAGS{preprocessor}}

In C0 and C1, we usually wrote the interface and implementation of our
data structures in the same file. Unfortunately, this means that if we
want to show clients our data structure's interface, we end up showing
them our implementation too! C solves this by separating the interface
and implementation respectively into a header file and a source
file. A header file for BST's is shown below:

\begin{lstlisting}[language=C]
#ifndef _BST_H_
#define _BST_H_

typedef struct bst_header bst;
typedef int compare_fn(void *e1, void *e2);
typedef void free_fn(void* e);

bst *bst_new(compare_fn *elem_compare, free_fn *elem_free);
void bst_insert(bst *B, void *e);               /* e cannot be NULL! */
void *bst_lookup(bst *B, void *e);              /* return NULL if not in tree */
void bst_free(bst *B);

#endif
\end{lstlisting}

Header files usually only contain type and function declarations for
the client and no actual code.

Aside: the \lstinline[language=C]'#ifndef',
\lstinline[language=C]'#define', and \lstinline[language=C]'#endif'
lines are known as header guards, and they prevent the header file
from being included too many times in a file.
