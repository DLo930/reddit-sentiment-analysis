bool is_precstack(dict_t D, stack_t S)
//@requires D != NULL && S != NULL;
{
  stack_t tmp = stack_new();

  while (!stack_empty(S)) {
    push(tmp, pop(S));
  }

  int last = -2;

  while (!stack_empty(tmp)) {
    string tok = pop(tmp);
    push(S, tok);
    int prec = dict_lookup(D, tok);

    if (prec < last) return false;

    last = prec;
  }

  return true;
}

queue_t parse(dict_t D, queue_t input)
//@requires D != NULL && input != NULL;
//@ensures \result == NULL || queue_empty(input);
{
  bool opmode = false;

  queue_t output = queue_new();
  stack_t opstack = stack_new();

  while (!queue_empty(input) || !stack_empty(opstack))
  //@loop_invariant is_precstack(D, opstack);
  {
    if (opmode || queue_empty(input)) {
      // we are either in opmode, or the input queue is empty
      if (!queue_empty(input)) {
        // read a operator
        string tok = deq(input);
        int pt = dict_lookup(D, tok);

        if (pt < 0)
          return NULL;

        bool flag = true;

        // put anything on the opstack to output if it has higher precidence
        // than the current token, then put the token on the opstack
        while (!stack_empty(opstack) && flag)
        //@loop_invariant is_precstack(D, opstack);
        {
          string op = pop(opstack);
          int po = dict_lookup(D, op);

          if (po >= pt) {
            enq(output, op);
          } else {
            push(opstack, op);
            flag = false;
          }
        }

        push(opstack, tok);
      } else {
        // we're out of input tokens, so pop everything of the opstack
        while (!stack_empty(opstack))
          enq(output, pop(opstack));
      }
    } else {
      // integer mode!
      //@assert !queue_empty(input);
      string tok = deq(input);

      // ensure the token is a number
      if (parse_int(tok, 10) == NULL)
        return NULL;

      enq(output, tok);
    }

    opmode = !opmode;
  }

  // we shouldn't have any trailing operators
  if (opmode)
    return NULL;

  while (!stack_empty(opstack))
    enq(output, pop(opstack));

  return output;
}
