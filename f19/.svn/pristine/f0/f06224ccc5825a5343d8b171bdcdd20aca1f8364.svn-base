/*
 * Hash sets, implemented with separate chaining
 *
 * 15-122 Principles of Imperative Computation
 */

#use <util>
#use <conio>

/************************/
/*** Client interface ***/
/************************/

// typedef ______ key;
typedef string key;

// typedef _____* value;
typedef void* value;

typedef bool key_equiv_fn(key x, key y);
typedef int key_hash_fn(key k);

/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* hset_t;
typedef struct hset_header* hset_t;

hset_t hset_new(int capacity, key_equiv_fn* equiv, key_hash_fn* hash)
  /*@requires capacity > 0 && equiv != NULL && hash != NULL; @*/
  /*@ensures \result != NULL; @*/ ;

value hset_lookup(hset_t H, key k)
  /*@requires H != NULL; @*/ ;

void hset_insert(hset_t H, key k, value v)
  /*@requires H != NULL && v != NULL; @*/
  /*@ensures hset_lookup(H, k) == v; @*/ ;

/**********************/
/*** Implementation ***/
/**********************/

typedef struct chain_node chain;
struct chain_node {
  key k;
  value val;
  chain* next;
};

typedef struct hset_header hset;
struct hset_header {
  int size;
  int capacity;               /* 0 < capacity */
  chain*[] table;             /* \length(table) == capacity */
  key_equiv_fn* equiv;        /* non-NULL */
  key_hash_fn* hash;          /* non-NULL */
};

bool keyequiv(hset* H, key x, key y)
//@requires H != NULL && H->equiv != NULL;
{
  return (*H->equiv)(x, y);
}

int keyhash(hset* H, key k)
//@requires H != NULL && H->capacity > 0 && H->hash != NULL;
//@ensures 0 <= \result && \result < H->capacity;
{
  return abs((*H->hash)(k) % H->capacity);
}

// All hash values are correct for the current index
bool is_chain(hset* H, chain* p, int i)
//@requires H != NULL && H->capacity > 0 && H->hash != NULL;
{
  if (p == NULL) return true;
  return p->val != NULL
    && keyhash(H, p->k) == i
    && is_chain(H, p->next, i);
}

bool is_chains(hset* H, int lo, int hi)
//@requires H != NULL && H->capacity > 0 && H->hash != NULL;
//@requires \length(H->table) == H->capacity;
//@requires 0 <= lo && lo <= hi && hi <= H->capacity;
{
  if (lo == hi) return true;
  return is_chain(H, H->table[lo], lo)
    && is_chains(H, lo+1, hi);
}

bool is_hset(hset* H) {
  return  H != NULL
    && H->capacity > 0
    && H->size >= 0
    && H->equiv != NULL
    && H->hash != NULL
    && is_chains(H, 0, H->capacity);
}

hset* hset_new(int capacity, key_equiv_fn* equiv, key_hash_fn* hash)
//@requires capacity > 0;
//@ensures is_hset(\result);
{
  hset* H = alloc(hset);
  H->size = 0;
  H->capacity = capacity;
  H->table = alloc_array(chain*, capacity);
  H->equiv = equiv;
  H->hash = hash;
  return H;
}

value hset_lookup(hset* H, key k)
//@requires is_hset(H);
{
  int i = keyhash(H, k);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (keyequiv(H, p->k, k)) {
      return p->val;
    }
  }

  return NULL;
}

void hset_insert(hset* H, key k, value val)
//@requires is_hset(H);
//@requires val != NULL;
//@ensures is_hset(H);
//@ensures val == hset_lookup(H, k);
{
  int i = keyhash(H, k);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (keyequiv(H, p->k, k)) {
      p->val = val;
      return;
    }
  }

  // prepend new element
  chain* p = alloc(chain);
  p->k = k;
  p->val = val;
  p->next = H->table[i];
  H->table[i] = p;
  (H->size)++;
}
