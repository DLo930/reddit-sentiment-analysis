#use <args>
#use <string>
#use <parse>
#use <conio>
#use <rand>
#use <util>

typedef int hash_fn(string s);

int pack(int x, int y) {
  if (x > 0xFFFF) x = 0xFFFF;
  if (y > 0xFFFF) y = 0xFFFF;
  return (x << 16) | y;
}

string randstr(rand_t random) {
  char[] A = alloc_array(char, 20);
  int i = 0;
  int r = rand(random);
  while(r != 0) {
    A[i] = char_chr(32 + (r&0x3F));
    r = (r >> 6) & 0x3FFFFFF;
    i++;
  }

  r = rand(random);
  while(r != 0) {
    A[i] = char_chr(32 + (r&0x3F));
    r = (r >> 6) & 0x3FFFFFF;
    i++;
  }

  return string_from_chararray(A);
}

int test(hash_fn* hash) {
  int[] A = alloc_array(int, 0x10000);
  rand_t r = init_rand(0xC0CAFE);
  for (int i = 0; i < 100000; i++) {
    int hash_value = (*hash)(randstr(r));
    A[hash_value & 0xFFFF] += 1;
  }

  int[] B = alloc_array(int, 6);
  int m = 0;

  for (int i = 0; i < 0x10000; i++) {
    if (A[i] > 5) B[5] += 1;
    else B[A[i]] += 1;
    m = max(A[i], m);
  }

  print("Empty buckets: "); printint(B[0]); println("");
  print("1 insertion:   "); printint(B[1]); println("");
  print("2 insertions:  "); printint(B[2]); println("");
  print("3 insertions:  "); printint(B[3]); println("");
  print("4 insertions:  "); printint(B[4]); println("");
  print("5+ insertions: "); printint(B[5]); println("");
  print("Max length:    "); printint(m); println("");

  if (m >= 1023) m = 1023;
  int empty = (B[0]+999) / 1000;
  //@assert 0 <= empty && empty <= 100;
  int big = (B[5] + 999) / 1000;
  //@assert 0 <= empty && empty <= 100;

  return (m << 16) | (empty << 8) | big ;
}

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  if (string_equal(arg, "hash1")) {
    return test(&hash1);
  } else if (string_equal(arg, "hash2")) {
    return test(&hash2);
  } else if (string_equal(arg, "hash3")) {
    return test(&hash3);
  }

  error("");
}
