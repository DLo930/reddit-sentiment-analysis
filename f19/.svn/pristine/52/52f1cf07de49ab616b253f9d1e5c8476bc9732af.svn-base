#use <args>
#use <conio>
#use <file>
#use <string>

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  if (string_equal(arg, "10x10-check-that-result-is-new-array")) {
    pixel_t[] A = alloc_array(pixel_t, 100);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    for (int i = 0; i < 100; i++) A[i] = 0xFFFFFFFF;
    pixel_t[] B = blur(A, 10, 10, mask, 3);
    if (A == B) return 1;

  } else if (string_equal(arg, "1x1img-1x1mask")) {
    pixel_t[] A = alloc_array(pixel_t, 1);
    A[0] = 0xFF0A0B0C;

    int[] mask = alloc_array(pixel_t, 1);
    mask[0] = 1;

    pixel_t[] B = blur(A,1,1,mask,1);
    if (!(B[0] == 0xFF0A0B0C)) return 1;

    mask[0] = 3;
    B = blur(A,1,1,mask,1);
    if (!(B[0] == 0xFF0A0B0C)) return 1;

  } else if (string_equal(arg, "1x2img-1x1mask")) {
    pixel_t[] A = alloc_array(pixel_t, 2);
    A[0] = 0xFF0A0B0C;
    A[1] = 0x03090807;

    int[] mask = alloc_array(pixel_t, 1);
    mask[0] = 1;

    pixel_t[] B = blur(A,1,2,mask,1);
    if (!(B[0] == 0xFF0A0B0C)) return 1;
    if (!(B[1] == 0x03090807)) return 1;
    B = blur(A,2,1,mask,1);
    if (!(B[0] == 0xFF0A0B0C)) return 1;
    if (!(B[1] == 0x03090807)) return 1;

    mask[0] = 10;
    B = blur(A,1,2,mask,1);
    if (!(B[0] == 0xFF0A0B0C)) return 1;
    if (!(B[1] == 0x03090807)) return 1;
    B = blur(A,2,1,mask,1);
    if (!(B[0] == 0xFF0A0B0C)) return 1;
    if (!(B[1] == 0x03090807)) return 1;

  } else if (string_equal(arg, "1x1img-3x3mask")) {
    pixel_t[] A = alloc_array(pixel_t, 1);
    A[0] = 0xFF0A0B0C;

    int[] mask = alloc_array(pixel_t, 9);
    mask[4] = 50;

    pixel_t[] B = blur(A,1,1,mask,3);
    if (!(B[0] == 0xFF0A0B0C)) return 1;

    mask[0] = 3;
    mask[2] = 19;
    B = blur(A,1,1,mask,3);
    if (!(B[0] == 0xFF0A0B0C)) return 1;

  } else if (string_equal(arg, "2x2img-1x1mask")) {
    pixel_t[] A = alloc_array(pixel_t, 4);
    A[0] = make_pixel(0xFF, 0xEE, 0xDD, 0xCC);
    A[1] = make_pixel(0xBB, 0xAA, 0x99, 0x88);
    A[2] = make_pixel(0x77, 0x66, 0x55, 0x44);
    A[3] = make_pixel(0x33, 0x22, 0x11, 0x00);

    int[] mask = alloc_array(int, 1);
    mask[0] = 5;

    pixel_t[] B = blur(A, 2, 2, mask, 1);
    if (A[0] != B[0]) return 1;
    if (A[1] != B[1]) return 1;
    if (A[2] != B[2]) return 1;
    if (A[3] != B[3]) return 1;

  } else if (string_equal(arg, "size-lies1")) {
    pixel_t[] A = alloc_array(pixel_t, 50);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    for (int i = 0; i < 50; i++) A[i] = 0xFFFFFFFF;
    blur(A, 10, 10, mask, 3);
  } else if (string_equal(arg, "size-lies2")) {
    pixel_t[] A = alloc_array(pixel_t, 50);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    for (int i = 0; i < 50; i++) A[i] = 0xFFFFFFFF;
    blur(A, 5, 5, mask, 3);
  } else if (string_equal(arg, "size-lies3")) {
    pixel_t[] A = alloc_array(pixel_t, 50);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    for (int i = 0; i < 50; i++) A[i] = 0xFFFFFFFF;
    blur(A, 5, 10, mask, 9);

  } else if (string_equal(arg, "size-toosmall1")) {
    pixel_t[] A = alloc_array(pixel_t, 0);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    blur(A, 0, 5, mask, 3);
  } else if (string_equal(arg, "size-toosmall2")) {
    pixel_t[] A = alloc_array(pixel_t, 0);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    blur(A, 5, 0, mask, 3);
  } else if (string_equal(arg, "size-toosmall3")) {
    pixel_t[] A = alloc_array(pixel_t, 25);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    blur(A, 5, 5, mask, -1);

  } else if (string_equal(arg, "size-evenmask")) {
    pixel_t[] A = alloc_array(pixel_t, 100);
    pixel_t[] mask = alloc_array(pixel_t, 4);
    mask[0] = 1; mask[1] = 1; mask[2] = 1; mask[3] = 1;
    for (int i = 0; i < 100; i++) A[i] = 0xFFFFFFFF;
    blur(A, 10, 10, mask, 2);
  } else if (string_equal(arg, "size-invalid")) {
    pixel_t[] A = alloc_array(pixel_t, 8287);
    pixel_t[] mask = alloc_array(pixel_t, 9);
    mask[4] = 1;
    for (int i = 0; i < 8287; i++) A[i] = 0xFFFFFFFF;
    blur(A, 1147445003, 419965, mask, 3);
  } else if (string_equal(arg, "origin-zero-1x1mask")) {
    pixel_t[] A = alloc_array(pixel_t, 4);
    A[0] = make_pixel(0xFF, 0xEE, 0xDD, 0xCC);
    A[1] = make_pixel(0xBB, 0xAA, 0x99, 0x88);
    A[2] = make_pixel(0x77, 0x66, 0x55, 0x44);
    A[3] = make_pixel(0x33, 0x22, 0x11, 0x00);
    int[] mask = alloc_array(int, 1);
    pixel_t[] B = blur(A, 2, 2, mask, 1);
  } else if (string_equal(arg, "origin-zero-bigmask")) {
    pixel_t[] A = alloc_array(pixel_t, 4);
    A[0] = make_pixel(0xFF, 0xEE, 0xDD, 0xCC);
    A[1] = make_pixel(0xBB, 0xAA, 0x99, 0x88);
    A[2] = make_pixel(0x77, 0x66, 0x55, 0x44);
    A[3] = make_pixel(0x33, 0x22, 0x11, 0x00);
    int[] mask = alloc_array(int, 169);
    pixel_t[] B = blur(A, 2, 2, mask, 13);

  } else if (string_equal(arg, "size-invalidmask")) {
    pixel_t[] A = alloc_array(pixel_t, 25);
    pixel_t[] mask = alloc_array(pixel_t, 4097);
    for (int i = 0; i < 4097; i++) mask[i] = 1;
    for (int i = 0; i < 25; i++) A[i] = 0xFFFFFFFF;
    blur(A, 5, 5, mask, 2095103);

  } else if (string_equal(arg, "there-are-negative-nubmbers-lurking")) {
    pixel_t[] A = alloc_array(pixel_t, 25);
    pixel_t[] mask = alloc_array(pixel_t, 81);
    for (int i = 0; i < 81; i++) mask[i] = 1;
    mask[72] = -1;
    for (int i = 0; i < 25; i++) A[i] = 0xFFFFFFFF;
    blur(A, 5, 5, mask, 9);

  } else {
    error("Bad argument");
  }

  return 0;
}
