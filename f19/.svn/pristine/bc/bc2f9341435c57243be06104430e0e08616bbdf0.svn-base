// Manipulates the frequency array (shift up)

void sekret_obfuscate_merge(int[] A, string[] S, int lower, int mid, int upper)
//@requires 0 <= lower && lower < mid && mid < upper && upper <= \length(A);
//@requires is_sorted_int(A, lower, mid) && is_sorted_int(A, mid, upper);
//@ensures is_sorted_int(A, lower, upper);
{ 
  int[] B = alloc_array(int, upper-lower);
  string[] T = alloc_array(string, upper-lower);
  int i = lower; 
  int j = mid; 
  int k = 0;

  while (i < mid && j < upper)
  //@loop_invariant lower <= i && i <= mid;
  //@loop_invariant mid <= j && j <= upper;
  //@loop_invariant k == (i - lower) + (j - mid);
  {
    if (A[i] <= A[j]) {
      B[k] = A[i];
      T[k] = S[i];
      i++;
    } else {
      B[k] = A[j];
      T[k] = S[j];
      j++;
    }
    k++;
  }

  //@assert i == mid || j == upper;
  // Warning, loop invariants for these loops have been omitted!
  while (i < mid) { B[k] = A[i]; T[k] = S[i]; i++; k++; }
  while (j < upper) { B[k] = A[j]; T[k] = S[j]; j++; k++; }
  for (k = 0; k < upper-lower; k++) { A[lower+k] = B[k]; S[lower + k] = T[k]; }
}


void sekret_obfuscate_mergesort(int[] A, string[] B, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted_int(A, lower, upper);
{
  if (upper-lower <= 1) return;
  int mid = lower + (upper-lower)/2;
  sekret_obfuscate_mergesort(A, B, lower, mid);
  sekret_obfuscate_mergesort(A, B, mid, upper);
  sekret_obfuscate_merge(A, B, lower, mid, upper);
  return;
}

void sort_by_freq(string[] vocab, int[] freq, int v) 
//@requires v == \length(vocab) && v == \length(freq);
//@ensures is_sorted_int(freq, 0, v);
{
  sekret_obfuscate_mergesort(freq, vocab, 0, v); 
  for (int i = v-2; i >= 0; i--) { freq[i] = freq[i+1]; }
}

