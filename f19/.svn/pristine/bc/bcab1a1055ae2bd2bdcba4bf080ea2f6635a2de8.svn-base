C0 C0 FF EE       # magic number
00 13             # version 9, arch = 1 (64 bits)

00 00             # int pool count
# int pool

00 00             # string pool total size
# string pool

00 01             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 03             # number of local variables = 3
00 79             # code length = 121 bytes
10 01    # bipush 1        # 1
36 00    # vstore 0        # i = 1;
# <00:loop>
15 00    # vload 0         # i
10 0A    # bipush 10       # 10
A1 00 06 # if_icmplt +6    # if (i < 10) goto <01:body>
A7 00 6B # goto +107       # goto <02:exit>
# <01:body>
15 00    # vload 0         # i
BC 04    # newarray 4      # alloc_array(int, i)
36 01    # vstore 1        # A = alloc_array(int, i);
10 00    # bipush 0        # 0
36 02    # vstore 2        # k = 0;
# <03:loop>
15 02    # vload 2         # k
15 00    # vload 0         # i
A1 00 06 # if_icmplt +6    # if (k < i) goto <04:body>
A7 00 1B # goto +27        # goto <05:exit>
# <04:body>
15 01    # vload 1         # A
15 02    # vload 2         # k
63       # aadds           # &A[k]
15 02    # vload 2         # k
10 03    # bipush 3        # 3
68       # imul            # (k * 3)
10 01    # bipush 1        # 1
60       # iadd            # ((k * 3) + 1)
4E       # imstore         # A[k] = ((k * 3) + 1);
15 02    # vload 2         # k
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # k += 1;
A7 FF E1 # goto -31        # goto <03:loop>
# <05:exit>
10 00    # bipush 0        # 0
36 02    # vstore 2        # k = 0;
# <06:loop>
15 02    # vload 2         # k
15 00    # vload 0         # i
A1 00 06 # if_icmplt +6    # if (k < i) goto <07:body>
A7 00 27 # goto +39        # goto <08:exit>
# <07:body>
15 01    # vload 1         # A
15 02    # vload 2         # k
63       # aadds           # &A[k]
2E       # imload          # A[k]
15 02    # vload 2         # k
10 03    # bipush 3        # 3
68       # imul            # (k * 3)
10 01    # bipush 1        # 1
60       # iadd            # ((k * 3) + 1)
A0 00 06 # if_cmpne +6     # if (A[k] != ((k * 3) + 1)) goto <09:then>
A7 00 09 # goto +9         # goto <10:else>
# <09:then>
10 01    # bipush 1        # 1
B0       # return          # 
A7 00 03 # goto +3         # goto <11:endif>
# <10:else>
# <11:endif>
15 02    # vload 2         # k
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # k += 1;
A7 FF D5 # goto -43        # goto <06:loop>
# <08:exit>
15 00    # vload 0         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 00    # vstore 0        # i += 1;
A7 FF 91 # goto -111       # goto <00:loop>
# <02:exit>
10 00    # bipush 0        # 0
B0       # return          # 

00 00             # native count
# native pool

