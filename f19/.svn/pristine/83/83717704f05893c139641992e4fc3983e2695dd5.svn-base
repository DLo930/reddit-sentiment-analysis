/* 
 * Interface for bloom filters (sets)
 * Broken: only stores most recently added element
 * 
 * 15-122 Principles of Imperative Computation */

#use <string>

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef string* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;

/*** Implementation of bloom filters ***/

bool is_bloom(string* B) {
  return B != NULL;
}

string* bloom_new(int table_size) 
//@requires table_size > 0;
//@ensures is_bloom(\result);
{ 
  return alloc(string); 
}
 
bool bloom_contains(string* B, string x) 
//@requires is_bloom(B);
{ 
  return string_equal(*B, x); 
}

void bloom_add(string* B, string x) 
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x); 
{ 
  *B = x;
}