#use <util>
#use <conio>
#use <parse>
#use <args>
#use <string>

void* w(int i) {
  int* p = alloc(int);
  *p = i;
  return (void*)p;
}

void* c(char c) {
  char* p = alloc(char);
  *p = c;
  return (void*)p;
}

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  if (string_equal(arg, "even:NULL")) {         if ( even(NULL))  return 1;
  } else if (string_equal(arg, "even:4")) {     if (!even(w(4)))  return 1;
  } else if (string_equal(arg, "even:5")) {     if ( even(w(5)))  return 1;
  } else if (string_equal(arg, "even:0")) {     if (!even(w(0)))  return 1;
  } else if (string_equal(arg, "even:-3")) {    if ( even(w(-3))) return 1;
  } else if (string_equal(arg, "even:-4")) {    if ( even(w(-4))) return 1;
  } else if (string_equal(arg, "even:char")) {  even(c('x'));

  } else if (string_equal(arg, "odd:NULL")) {   if (!odd(NULL)) return 1;
  } else if (string_equal(arg, "odd:4")) {      if ( odd(w(4))) return 1;
  } else if (string_equal(arg, "odd:5")) {      if (!odd(w(5))) return 1;
  } else if (string_equal(arg, "odd:0")) {      if ( odd(w(0))) return 1;
  } else if (string_equal(arg, "odd:-4")) {     if ( odd(w(-4))) return 1;
  } else if (string_equal(arg, "odd:-5")) {     if ( odd(w(-5))) return 1;
  } else if (string_equal(arg, "odd:char")) {   odd(c('x'));

  } else if (string_equal(arg, "incr:NULL")) {  if (!incr(NULL)) return 1;
  } else if (string_equal(arg, "incr:char")) {  incr(c('x'));
  } else if (string_equal(arg, "incr:int")) {
    int* p = alloc(int);
    for (int i = -12; i < 100; i++) {
      *p = i;
      if (!incr((void*)p)) return 1;
      if (*p != i+1) return 1;
    }

  } else if (string_equal(arg, "findneg:wrongtag_1")) {
    find_negative(w(-4),c('1'));
  } else if (string_equal(arg, "findneg:wrongtag_2")) {
    find_negative(c('5'),w(1));
  } else if (string_equal(arg, "find_negative")) {
    int* p = alloc(int);
    *p = -7;
    if (NULL != find_negative(NULL, w(3))) return 1;
    if (NULL != find_negative(NULL, w(0))) return 1;
    if (NULL == find_negative(NULL, w(-1))) return 1;
    if (NULL == find_negative(NULL, w(-10))) return 1;
    if ((void*)p != find_negative(NULL, (void*)p)) return 1;
    if ((void*)p != find_negative((void*)p, w(3))) return 1;
    if ((void*)p != find_negative((void*)p, w(0))) return 1;
    if ((void*)p != find_negative((void*)p, w(-1))) return 1;
    if ((void*)p != find_negative((void*)p, w(-10))) return 1;

  } else if (string_equal(arg, "copy:wrongtag")) {
    copy(w(3), (void*)queue_new());
  } else if (string_equal(arg, "copy:NULL")) {
    copy(NULL, NULL);
  } else if (string_equal(arg, "copy")) {
    queue_t Q;
    int* R = alloc(int);

    Q = (queue_t)copy((void*)queue_new(), NULL);
    if (Q == NULL) return 1;
    if (queue_size(Q) != 1) return 1;
    if (NULL != deq(Q)) return 1;
    if (queue_size(Q) != 0) return 1;

    Q = (queue_t)copy((void*)queue_new(), (void*)R);
    if (queue_size(Q) != 1) return 1;
    if ((void*)R != deq(Q)) return 1;
    if (queue_size(Q) != 0) return 1;

    int* i = alloc(int);
    int* j = alloc(int);
    Q = (queue_t)copy(copy((void*)queue_new(), (void*)i), (void*)j);
    if (queue_size(Q) != 2) return 1;
    if ((void*)i != deq(Q)) return 1;
    if (queue_size(Q) != 1) return 1;
    if ((void*)j != deq(Q)) return 1;
    if (queue_size(Q) != 0) return 1;

  } else if (string_equal(arg, "insert:NULL1")) {
    insert(NULL, w(3));
  } else if (string_equal(arg, "insert:NULL2")) {
    insert(w(0), NULL);
  } else if (string_equal(arg, "insert:NULL3")) {
    insert(NULL, NULL);
  } else if (string_equal(arg, "insert:wrongtag1")) {
    insert(c('x'), w(3));
  } else if (string_equal(arg, "insert:wrongtag2")) {
    insert(w(0), c('x'));
  } else if (string_equal(arg, "insert:wrongtag3")) {
    insert((void*)queue_new(), c('9'));
  } else if (string_equal(arg, "insert")) {
    int* i = alloc(int);
    int* j = alloc(int);

    if ((void*) i != insert((void*)i, (void*)j)) return 1;
    if (*i != 0 || *j != 0) return 1;

    *i = 15;
    if ((void*) i != insert((void*)i, (void*)j)) return 1;
    if (*i != 15 || *j != 0) return 1;

    *j = 30;
    if ((void*) i != insert((void*)i, (void*)j)) return 1;
    if (*i != 30 || *j != 15) return 1;

  } else {
    error(string_join("Bad arg: ", arg));
  }

  return 0;
}
