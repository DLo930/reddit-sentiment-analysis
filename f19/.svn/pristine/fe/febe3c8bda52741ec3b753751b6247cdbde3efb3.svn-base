/* 
 * Interface for bloom filters (sets)
 * Correct, uses length as a threshold
 * 
 * 15-122 Principles of Imperative Computation */

#use <string>

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef int* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;

/*** Implementation of bloom filters ***/

bool is_bloom(int* B) {
  return B != NULL && *B >= -1;
}

int* bloom_new(int table_size) 
//@requires table_size > 0;
//@ensures is_bloom(\result);
{ 
  int* B = alloc(int);
  *B = -1;
  return B;
}
 
bool bloom_contains(int* B, string x) 
//@requires is_bloom(B);
{ 
  return *B >= string_length(x);
}

void bloom_add(int* B, string x) 
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x); 
{ 
  if (*B < string_length(x)) *B = string_length(x);
}