/* 
 * Interface for bloom filters (sets)
 * Inappropriately resizes when load factor > .5
 * 
 * 15-122 Principles of Imperative Computation */

#use <string>
#use <util>

/*** Interface to bloom filters ***/

// typedef ______* bloom_t;
typedef struct bloom_header* bloom_t;

bloom_t bloom_new(int table_size)
  /*@requires table_size > 0; @*/
  /*@ensures \result != NULL; @*/ ;

bool bloom_contains(bloom_t B, string x)
  /*@requires B != NULL; @*/ ;

void bloom_add(bloom_t B, string x)
  /*@requires B != NULL; @*/
  /*@ensures bloom_contains(B, x); @*/ ;

/*** Implementation of bloom filters ***/

typedef struct bloom_header bloom;
struct bloom_header {
  bool[] data;
  int limit;
  int count;
};

bool is_bloom(bloom* B) {
  if (B == NULL) return false;
  //@assert \length(B->data) == B->limit;
  return B->limit > 0;
}

bloom* bloom_new(int capacity) 
//@requires capacity > 0;
//@ensures is_bloom(\result);
{
  bloom* B = alloc(bloom);
  B->limit = capacity;
  B->data = alloc_array(bool, capacity);
  return B;
}

int hash_mul31(string x) {
  int h = 0;
  for (int i = 0; i < string_length(x); i++) {
    int c = char_ord(string_charat(x, i));
    h = h*31 + c;
  }
  return h;
}

int get_index(bloom* B, int hash_value) 
//@requires is_bloom(B);
{
  return abs(hash_value % B->limit);
}

bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
{
  return B->data[get_index(B, hash_mul31(x))];
}

void bloom_add(bloom* B, string x) 
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B, x);
{
  B->data[get_index(B, hash_mul31(x))] = true;
  B->count += 1;
  if (B->count >= B->limit/2) {
    assert(int_max()/2 > B->limit);

    bool[] A = alloc_array(bool, B->limit * 2);
    for (int i = 0; i < B->limit; i++) 
    //@loop_invariant 0 <= i;
    {
      A[i] = B->data[i];
    }

    B->data = A;
    B->limit *= 2;
  }
}