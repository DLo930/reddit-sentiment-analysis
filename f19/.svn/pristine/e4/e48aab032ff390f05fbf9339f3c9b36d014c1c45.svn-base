\checkpoint*{\TAGS{amortized-cost, array}}

Repeat this analysis for the case where we triple the size of the
array (both if we are only able to use whole tokens and if we're
allowed to have an amortized cost of a fraction of a token).

We might have to resize again after as few as
\shortanswerline{\hspace{1em}$2k$\hspace{1em}} \lstinline'uba_add'
operations.

That next resize would force us to use
\shortanswerline{\hspace{1em}$3k$\hspace{1em}} tokens to copy
everything into a larger array (with size $9k$).  The adds that we
do in the meantime add elements to the last $2/3$ of the array.

Each cell in the last $2/3$ therefore needs to have
\shortanswerline{\hspace{1em}$3/2$\hspace{1em}} tokens associated with it.

This gives \lstinline'uba_add' an amortized cost of
\shortanswerline{\hspace{1em}$5/2$\hspace{1em}} tokens (if fractional tokens are allowed, otherwise \shortanswerline{\hspace{1em}$3$\hspace{1em}}), because we need one more token to do the initial write whenever we call
\lstinline'uba_add'.

\begin{solution}
    Make sure to mention that we round up if fractional tokens not allowed
\end{solution}