%\clearpage
\Question[2]{Timing Code}
\TAGS{complexity, testing}

In this class we're mostly interested in the big-$O$ behavior of a
function, but in the right circumstances it would be possible to come
up with a specific function describing the amount of time (say, in
milliseconds) that it takes to run a given function.

For this question, consider a C0 function \lstinline'mystery' with three
integer arguments $x$, $y$, and $z$ and with a running time in
milliseconds that is precisely specified by $\textit{T}(x,y,z) = c
\times x^2 \times y \times 2^z$ for some positive constant $c$. (We
don't know or care what \lstinline'mystery' is actually computing for the
purpose of this question.)

Say, for some values of $x$ and $y$ and $z$, the function
\lstinline'mystery' takes 1 second to run.

Leaving $y$ and $z$ the same, how would we change the first
input (in terms of $x$) to make the function run for 16 seconds?
\begin{framed}
\medskip
$T(\uanswer{10em}{$4x$}, y, z) = 16 ~ \mathrm{seconds}$
\vspace{-0.5ex}
\end{framed}


Leaving $x$ and $z$ the same, how would we change the second
input (in terms of $y$) to make the function run for 16 seconds?
\begin{framed}
\medskip
$T(x, \uanswer{10em}{$16x$},  z) = 16 ~ \mathrm{seconds}$
\vspace{-0.5ex}
\end{framed}

\newpage
Leaving $x$ and $y$ the same, how would we change the third
input (in terms of $z$) to make the function run for 16 seconds?
\begin{framed}
\medskip
$T(x, y, \uanswer{10em}{$z+4$}) = 16 ~ \mathrm{seconds}$
\vspace{-0.5ex}
\end{framed}

These kinds of calculations allow us to experimentally investigate the
big-$O$ complexity of a function by modifying the size of the input
(say, doubling it) and seeing how the running time changes. But one
must be careful!  If there was an extra two-second constant cost, so
that the running time of the \lstinline'mystery' function was actually
$\textit{T}(x,y,z) = c \times x^2 \times y \times 2^z + 2000$, then
\lstinline'mystery' would have \emph{the same big-$O$ behavior}, but
investigating the big-$O$ running time by doubling the first argument
from $x$ to $2x$ in the example above could lead us astray!

Why? What additional test(s) might save us from this mistake?
\begin{framed}
\ifprintanswers{\color{\answerColor}
$x \longrightarrow 2x$ will be 3 seconds $\longrightarrow$ 6 seconds,
so we could end up thinking the function was linear in $x$ if those
were our only two experiments.

More tests, much larger or much smaller tests, reasoning about the
code instead of doing experiments, and testing $x$, $2x$, $3x$, $4x$,
etc.  Things that definitely won't help include running more repeated
tests and varying $y$ and $z$.
}\else~\vspace{2.5in}\fi
\end{framed}

\RUBRIC
TAGS: complexity, testing

Gradescope rubric:
+ 0.5 pts Box 1: 4x
+ 0.5 pts Box 2: 16y
+ 0.5 pts Box 3: z+4
+ 0.5 pts Box 4: correct answer

Commentary:
Part (a): 4x
 1/2 point all or nothing

Part (b): 16y
 1/2 point all or nothing

Part (c): z + 4
 1/2 point all or nothing

Part (d): x --> 2x will be 3 seconds --> 6 seconds, so we could
end up thinking the function was linear in x if those were our only
two experiments.

More tests, much larger or much smaller tests, reasoning about the
code instead of doing experiments, and testing x, 2x, 3x, 4x,
etc... Things that definitely won't help include running more repeated
tests and varying y and z.

This is all or nothing. If they hit either part of the question
(the two parts are "Why?" or "What additional tests?") and are no
worse than vague on the other part give the half a point. If they're
aggressively wrong take off the half point.
ENDRUBRIC
