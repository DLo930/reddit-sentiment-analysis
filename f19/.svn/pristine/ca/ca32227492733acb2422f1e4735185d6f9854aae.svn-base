#use <args>
#use <conio>
#use <file>
#use <string>

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  if (string_equal(arg, "10x10-check-that-result-is-new-array")) {
    pixel_t[] A = alloc_array(pixel_t, 100);
    for (int i = 0; i < 100; i++) A[i] = 0xFFFFFFFF;
    pixel_t[] B = rotate(A, 10, 10);
    if (A == B) return 1;
  } else if (string_equal(arg, "1x1-manyvalues")) {
    pixel_t[] A = alloc_array(pixel_t, 1);
    int x = 0;
    for (int i = 0; i < 250000; i++) {
      A[0] = x;
      pixel_t[] B = rotate(A, 1, 1);
      //@assert \length(B) == 4;

      if (B[0] != x) return 1;
      if (B[1] != x) return 1;
      if (B[2] != x) return 1;
      if (B[3] != x) return 1;
      x += 19937; // Cover the space of possible pixels somewhat well
    }
  } else if (string_equal(arg, "2x2-manyvalues")) {
    pixel_t[] A = alloc_array(pixel_t, 4);
    int x = 0;
    for (int i = 0; i < 50000; i++) {
      // Cover the space of possible pixels somewhat well
      A[0] = x | 0xFF000000;
      A[1] = x | 0x00FF0000;
      A[2] = x | 0x0000FF00;
      A[3] = x | 0x000000FF;
      pixel_t[] B = rotate(A, 2, 2);
      //@assert \length(B) == 16;

      if (B[0x0] != (x | 0x00FF0000)) return 1;
      if (B[0x1] != (x | 0x000000FF)) return 1;
      if (B[0x2] != (x | 0xFF000000)) return 1;
      if (B[0x3] != (x | 0x00FF0000)) return 1;
      if (B[0x4] != (x | 0xFF000000)) return 1;
      if (B[0x5] != (x | 0x0000FF00)) return 1;
      if (B[0x6] != (x | 0x0000FF00)) return 1;
      if (B[0x7] != (x | 0x000000FF)) return 1;
      if (B[0x8] != (x | 0x000000FF)) return 1;
      if (B[0x9] != (x | 0x0000FF00)) return 1;
      if (B[0xA] != (x | 0x0000FF00)) return 1;
      if (B[0xB] != (x | 0xFF000000)) return 1;
      if (B[0xC] != (x | 0x00FF0000)) return 1;
      if (B[0xD] != (x | 0xFF000000)) return 1;
      if (B[0xE] != (x | 0x000000FF)) return 1;
      if (B[0xF] != (x | 0x00FF0000)) return 1;

      x += 19937*5; // Cover the space of possible pixels somewhat well
    }
  } else if (string_equal(arg, "size-lies1")) {
    pixel_t[] A = alloc_array(pixel_t, 100);
    for (int i = 0; i < 100; i++) A[i] = 0xFFFFFFFF;
    rotate(A, 5, 5);
  } else if (string_equal(arg, "size-lies2")) {
    pixel_t[] A = alloc_array(pixel_t, 100);
    for (int i = 0; i < 100; i++) A[i] = 0xFFFFFFFF;
    rotate(A, 15, 15);
  } else if (string_equal(arg, "size-notsquare")) {
    pixel_t[] A = alloc_array(pixel_t, 50);
    rotate(A, 5, 10);
  } else if (string_equal(arg, "size-toosmall")) {
    pixel_t[] A = alloc_array(pixel_t, 0);
    rotate(A, 0, 0);
  } else if (string_equal(arg, "size-invalid")) {
    pixel_t[] A = alloc_array(pixel_t, 18532);
    for (int i = 0; i < 18532; i++) A[i] = 0xFFFFFFFF;
    rotate(A, 92682, 92682);

  } else {
    error("Bad argument");
  }

  return 0;

}
