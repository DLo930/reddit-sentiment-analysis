/* 
 * Secret extensions to the library interfaces that make the tracing
 * interpreter work.
 * 
 * 15-122 Principles of Imperative Computation 
 */

#use <conio>
#use <string>
#use "stack_of_int.c0"
#use "queue_of_string.c0"
#use "stack_of_queue_of_string.c0"

string pad(int res, string S, bool left_aligned) {
  int len = string_length(S);
  if (len > res) {
    if (left_aligned) {
      return string_join(string_sub(S, 0, res-3), "...");
    } else {
      return string_join("...", string_sub(S, len-(res-3), len));
    }
  }

  int padding = res - len + 1;
  char[] chr = alloc_array(char, padding);
  for (int i = 0; i < padding - 1; i++) {
    chr[i] = ' ';
  }
  chr[padding-1] = '\0';

  if (left_aligned) {
    return string_join(S, string_from_chararray(chr));
  }
  return string_join(string_from_chararray(chr), S);
}

string sekret_stack_to_string(stack_t S) 
//@requires sekret_is_stack(S);
{
  string result = "";
  for (isekretlist* p = (*S)[0].top; p != (*S)[0].bottom; p = p->next) {
    result = string_join(string_fromint(p->data), result);
    if (p->next != (*S)[0].bottom) result = string_join(" ", result);
  }
  return result;
}

string sekret_queue_to_string(queue_t Q) 
//@requires sekret_is_queue(Q);
{
  string result = "";
  for (ssekretlist* p = (*Q)[0].front; p != (*Q)[0].back; p = p->next) {
    result = string_join(result, p->data);
    if (p->next != (*Q)[0].back) result = string_join(result, " ");
  }
  return result;
}

string sekret_qstack_to_string(queue_t Q, qstack_t S) 
//@requires sekret_is_queue(Q);
//@requires sekret_is_qstack(S);
{
  string result = sekret_queue_to_string(Q);
  for (qsekretlist* p = (*S)[0].top; p != (*S)[0].bottom; p = p->next) {
    result = string_join(result, "   (");
    result = string_join(result, sekret_queue_to_string(p->data));
    result = string_join(result, ")");
  }
  return result;
}

void print_header() {
  println("                       stack || queue");
}

void print_state(queue_t Q, stack_t S, qstack_t R) 
//@requires Q != NULL && S != NULL && R != NULL;
{
  print(pad(28, sekret_stack_to_string(S), false));
  print(" || ");
  print(pad(48, sekret_qstack_to_string(Q, R), true));
  print("\n");
}
