\part[1]\TAGS{pq, safety}
Fill in the \lstinline'@assert' directive as to support the safety of
the implementation of the function \lstinline'pq_rem'.  You can find
relevant code in file \lstinline'heap.c1' published along the lecture
notes.  It removes and returns the element with the highest priority
from a min-heap stored as an array.
\begin{framed}
\begin{lstlisting}[aboveskip=0pt, belowskip=0pt]
elem pq_rem(heap H)
//@requires is_heap(H) && !pq_empty(H);
//@ensures is_heap(H);
{
  elem min = H->data[1];
  (H->next)--;

  if (H->next > 1) {
    H->data[1] = H->data[H->next];

    //@assert [*\uanswer{29em}{is\_heap\_except\_down(H, 1)}*];
    sift_down(H);
  }
  return min;
}
\end{lstlisting}
\end{framed}

\RUBRIC
Part (pq_rem)
TAGS: pq, safety

Gradescope rubric:
+1.0pt EITHER -- //@assert is_heap_except_down(H, 1);
+0.5pt OR -- //@assert is_heap_safe(H);

Commentary:
- full credit (matches pre-conditions of sift_down)
     //@assert is_heap_except_down(H, 1)
- partial credit (valid captures only basic safety invariant of sift_down)
     //@assert is_heap_safe(H);
- no credit (invalid in general)
     //@assert is_heap(H);
ENDRUBRIC
