\checkpoint*{\TAGS{ints}}

What assertion would you need to write to ensure that an addition would
give a result without overflowing (in other words, to ensure that the result
you get in C0 is the same as the result you get with true integer arithmetic).

\begin{lstlisting}
int safe_add(int a, int b)
/*@requires



@*/
{ return a + b; }
\end{lstlisting}

\begin{solution}
\begin{lstlisting}
int safe_add(int a, int b)
/*@requires   (a > 0 && b > 0 && a <= int_max() - b)
  @        || (a < 0 && b < 0 && a >= int_min() - b)
  @        || (a <= 0 && b >= 0) || (a >= 0 && b <= 0)
  @*/
{
  return a + b;
}
\end{lstlisting}
\end{solution}


What about multiplication? For simplicity, you can assume both
numbers are non-negative.

\begin{lstlisting}
int safe_mult(int a, int b)
/*@requires a >= 0 && b >= 0 &&



@*/
{ return a * b; }
\end{lstlisting}

\begin{solution}
\begin{lstlisting}
int safe_mult(int a, int b)
/*@requires a >= 0 && b >= 0 && (b == 0 || a <= int_max()/b)
  @*/
{
  return a * b;
}
\end{lstlisting}
\end{solution}
