bool test_at_left(tbuf* B, int row, int col) {
  string s = stringify(B);
  return (B->start->next == B->cursor) == tbuf_at_left(B)
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_at_right(tbuf* B, int row, int col) {
  string s = stringify(B);
  return (B->cursor == B->end) == tbuf_at_right(B)
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_forward(tbuf* B, int row, int col) {
  if (B->cursor != B->end) {
    B->cursor = B->cursor->next;
    string s = stringify(B);
    B->cursor = B->cursor->prev;
    tbuf_forward(B);
    return ___sekret__is_tbuf(B)
      && string_equal(s, stringify(B));
  }
  return true;
}

bool test_backward(tbuf* B, int row, int col) {
  if (B->start->next != B->cursor) {
    B->cursor = B->cursor->prev;
    string s = stringify(B);
    B->cursor = B->cursor->next;
    tbuf_backward(B);
    return ___sekret__is_tbuf(B)
      && string_equal(s, stringify(B));
  }
  return true;
}

bool test_delete(tbuf* B, int row, int col) {
  if (B->start->next != B->cursor) {
    char c = B->cursor->prev->data;
    dll* p = B->cursor->prev;
    p->prev->next = p->next;
    p->next->prev = p->prev;
    string s = stringify(B);
    B->cursor->prev->next = p;
    B->cursor->prev = p;
    
    char d = tbuf_delete(B);
    return c == d 
      && ___sekret__is_tbuf(B)
      && string_equal(s, stringify(B));
  }
  return true;
}

bool test_insert(tbuf* B, int row, int col) {
  dll* p = alloc(dll);
  p->prev = B->cursor->prev;
  p->data = 'z';
  p->next = B->cursor;
  B->cursor->prev->next = p;
  B->cursor->prev = p;
  string s = stringify(B);
  p->prev->next = p->next;
  p->next->prev = p->prev;

  tbuf_insert(B, 'z');
  return ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_row(tbuf* B, int row, int col) {
  string s = stringify(B);
  return row == tbuf_row(B)
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_col(tbuf* B, int row, int col) {
  string s = stringify(B);
  return col == tbuf_col(B)
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  tbuf* Al = alloc(tbuf);
  tbuf* Bad = construct(10, 3, 7);
  Bad->cursor->next->next = NULL;

  tbuf* B = construct(10, 0, 9);

  // Precondition cases:

  if (string_equal(arg, "new")) { 
    B = tbuf_new();
    if (B == NULL) return 1;
    if (B->start == NULL) return 1;
    if (B->cursor == NULL) return 1;
    if (B->end == NULL) return 1;
    if (B->start->next != B->cursor) return 1;
    if (B->start != B->cursor->prev) return 1;
    if (B->cursor != B->end) return 1;

  } else if (string_equal(arg, "at_left_NULL"))   { tbuf_at_left(NULL);
  } else if (string_equal(arg, "at_left_alloc"))  { tbuf_at_left(Al);
  } else if (string_equal(arg, "at_left_bad"))    { tbuf_at_left(Bad);
    
  } else if (string_equal(arg, "at_right_NULL"))  { tbuf_at_right(NULL);
  } else if (string_equal(arg, "at_right_alloc")) { tbuf_at_right(Al);
  } else if (string_equal(arg, "at_right_bad"))   { tbuf_at_right(Bad);
    
  } else if (string_equal(arg, "forward_NULL"))   { tbuf_forward(NULL);
  } else if (string_equal(arg, "forward_alloc"))  { tbuf_forward(Al);
  } else if (string_equal(arg, "forward_bad"))    { tbuf_forward(Bad);
  } else if (string_equal(arg, "forward_end"))    { 
    B->cursor = B->end;
    tbuf_forward(B);

  } else if (string_equal(arg, "backward_NULL"))  { tbuf_backward(NULL);
  } else if (string_equal(arg, "backward_alloc")) { tbuf_backward(Al);
  } else if (string_equal(arg, "backward_bad"))   { tbuf_backward(Bad);
  } else if (string_equal(arg, "backward_start")) { tbuf_backward(B);

  } else if (string_equal(arg, "delete_NULL"))    { tbuf_delete(NULL);
  } else if (string_equal(arg, "delete_alloc"))   { tbuf_delete(Al);
  } else if (string_equal(arg, "delete_bad"))     { tbuf_delete(Bad);
  } else if (string_equal(arg, "delete_start"))   { tbuf_delete(B);

  } else if (string_equal(arg, "insert_NULL"))    { tbuf_insert(NULL, 'x');
  } else if (string_equal(arg, "insert_alloc"))   { tbuf_insert(Al, 'x');
  } else if (string_equal(arg, "insert_bad"))     { tbuf_insert(Bad, 'x');

  } else if (string_equal(arg, "row_NULL"))       { tbuf_row(NULL);
  } else if (string_equal(arg, "row_alloc"))      { tbuf_row(Al);
  } else if (string_equal(arg, "row_bad"))        { tbuf_row(Bad);

  } else if (string_equal(arg, "col_NULL"))       { tbuf_col(NULL);
  } else if (string_equal(arg, "col_alloc"))      { tbuf_col(Al);
  } else if (string_equal(arg, "col_bad"))        { tbuf_col(Bad);

  } else if (string_equal(arg, "at_left")) {
    if (!exhaustively_test(0, 10, &test_at_left)) return 1;

  } else if (string_equal(arg, "at_right")) { 
    if (!exhaustively_test(0, 10, &test_at_right)) return 1;

  } else if (string_equal(arg, "forward")) { 
    if (!exhaustively_test(0, 10, &test_forward)) return 1;

  } else if (string_equal(arg, "backward")) { 
    if (!exhaustively_test(0, 10, &test_backward)) return 1;

  } else if (string_equal(arg, "delete")) { 
    if (!exhaustively_test(0, 10, &test_delete)) return 1;

  } else if (string_equal(arg, "insert")) { 
    if (!exhaustively_test(0, 10, &test_insert)) return 1;

  } else if (string_equal(arg, "row")) { 
    if (!exhaustively_test(0, 10, &test_row)) return 1;

  } else if (string_equal(arg, "col")) { 
    if (!exhaustively_test(0, 10, &test_col)) return 1;

  } else {
    error("Bad arg");
  }

  return 0;
}