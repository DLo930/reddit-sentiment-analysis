#use <args>
#use <string>
#use <parse>
#use <conio>

bool workaround(int* x, int y) {
  *x = y;
  return true;
}

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  if (string_equal(arg, "new-contracts1")) {
    bloom_t B = bloom_new(0);
    
  } else if (string_equal(arg, "new-contracts2")) {
    bloom_t B = bloom_new(-1);

  } else if (string_equal(arg, "add-contracts1")) {
    bloom_add(NULL, "");

  } else if (string_equal(arg, "add-contracts2")) {
    bloom_add(alloc(struct bloom_filter), "");

  } else if (string_equal(arg, "contains-contracts1")) {
    bloom_add(NULL, "");

  } else if (string_equal(arg, "contains-contracts2")) {
    bloom_add(alloc(struct bloom_filter), "");

  } else if (string_equal(arg, "new")) {
    int* x = alloc(int);

    for (int i = 1; i < 1000; i++) {
      bloom_t B = bloom_new(i);
      if ((i+31)/32 != B->limit) return 1;
      //@assert workaround(x, \length(B->data));
      if ((i+31)/32 != *x) return 1;
    }

  } else if (string_equal(arg, "invariant1")) {
    if (is_bloom(NULL)) return 1;

  } else if (string_equal(arg, "invariant2")) {
    if (is_bloom(alloc(struct bloom_filter))) return 1;

  } else if (string_equal(arg, "invariant3")) {
    bloom_t B = alloc(struct bloom_filter);
    B->limit = 5;
    if (is_bloom(B)) return 1;

  } else if (string_equal(arg, "invariant4")) {
    bloom_t B = alloc(struct bloom_filter);
    B->limit = 5;
    B->data = alloc_array(int, 17);
    if (is_bloom(B)) return 1;

  } else {
    error("Bad arg");
  }

  return 0;
}