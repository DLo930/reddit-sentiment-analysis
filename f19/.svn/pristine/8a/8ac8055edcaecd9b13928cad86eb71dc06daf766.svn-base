\section*{The LCS problem}

The \emph{Longest Common Subsequence} problem is a famous $\mathcal{NP}$-hard
problem in Computer Science theory that you'll be solving in polynomial time
today (not really --- we'll be solving a slightly easier problem using a
technique called Dynamic Programming that you can learn much more about in
15-210 and 15-451)! We'll be using generic dictionaries implemented using
binary search trees to memoize our solution and make it faster.

From Wikipedia, "The longest common subsequence (LCS) problem is the problem of
finding the longest subsequence common to all sequences in a set of sequences
(often just two sequences). It differs from problems of finding common
substrings: unlike substrings, subsequences are not required to occupy
consecutive positions within the original sequences. The longest common
subsequence problem is a classic computer science problem, the basis of data
comparison programs such as the diff utility, and has applications in
bioinformatics for comparing genome sequences. It is also widely used by
revision control systems such as Git for reconciling multiple changes made to a
revision-controlled collection of files."

