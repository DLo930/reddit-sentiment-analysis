editor* ed(tbuf* B, int row, int col) {
  editor* E = alloc(editor);
  E->buffer = B;
  E->row = row;
  E->col = col;
  return E;
}

int ___sekret__col(tbuf* B)
//@requires ___sekret__is_tbuf(B);
//@requires B->cursor->prev != B->start;
//@requires B->cursor->prev->data == '\n';
{
  int i = 0;
  for (dll* p = B->cursor->prev->prev;
       p != B->start && p->data != '\n';
       p = p->prev)
    i++;
  return i;
}

bool test_forward(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  string s;
  if (B->cursor == B->end) s = stringify(B);
  else {
    row = B->cursor->data == '\n' ? row+1 : row;
    col = B->cursor->data == '\n' ? 0 : col+1;
    B->cursor = B->cursor->next;
    s = stringify(B);
    B->cursor = B->cursor->prev;
  }

  editor_forward(E);
  return E->row == row
    && E->col == col
    && E->buffer == B
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_insert_char(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  dll* p = alloc(dll);
  p->prev = B->cursor->prev;
  p->next = B->cursor;
  p->prev->next = p;
  p->next->prev = p;
  p->data = 'x';
  string s = stringify(B);
  p->prev->next = p->next;
  p->next->prev = p->prev;

  editor_insert(E, 'x');
  return E->row == row
    && E->col == col+1
    && E->buffer == B
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_insert_newline(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  dll* p = alloc(dll);
  p->prev = B->cursor->prev;
  p->next = B->cursor;
  p->prev->next = p;
  p->next->prev = p;
  p->data = '\n';
  string s = stringify(B);
  p->prev->next = p->next;
  p->next->prev = p->prev;

  editor_insert(E, '\n');
  return E->row == row+1
    && E->col == 0
    && E->buffer == B
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_backward(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  string s;
  if (B->start->next == B->cursor) s = stringify(B);
  else {
    row = B->cursor->prev->data == '\n' ? row-1 : row;
    col = B->cursor->prev->data == '\n' ? ___sekret__col(B) : col-1;
    B->cursor = B->cursor->prev;
    s = stringify(B);
    B->cursor = B->cursor->next;
  }

  editor_backward(E);
  return E->row == row
    && E->col == col
    && E->buffer == B
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_delete(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  string s;
  if (B->start->next == B->cursor) s = stringify(B);
  else {
    row = B->cursor->prev->data == '\n' ? row-1 : row;
    col = B->cursor->prev->data == '\n' ? ___sekret__col(B) : col-1;
    dll* p = B->cursor->prev;
    p->prev->next = p->next;
    p->next->prev = p->prev;
    s = stringify(B);
    p->prev->next = p;
    p->next->prev = p;
  }

  editor_delete(E);
  return E->row == row
    && E->col == col
    && E->buffer == B
    && ___sekret__is_tbuf(B)
    && string_equal(s, stringify(B));
}

bool test_forward_stress(tbuf* B, int row, int col) {
  row = 15122;
  col = 15122;
  editor* E = ed(B, 15122, 15122);
  if (B->cursor != B->end) {
    row = B->cursor->data == '\n' ? row+1 : row;
    col = B->cursor->data == '\n' ? 0 : col+1;
  }

  editor_forward(E);
  return E->row == row
    && E->col == col
    && E->buffer == B;
}

bool test_insert_char_stress(tbuf* B, int row, int col) {
  editor* E = ed(B, 15122, 15122);

  editor_insert(E, 'x');
  return E->row == 15122
    && E->col == 15123
    && E->buffer == B;
}

bool test_insert_newline_stress(tbuf* B, int row, int col) {
  editor* E = ed(B, 15122, 15122);

  editor_insert(E, '\n');
  return E->row == 15123
    && E->col == 0;
}

bool test_backward_stress(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  if (B->cursor->prev != B->start) {
    if (col == 0) {
      E->row = 15122;
      row = 15121;
      col = ___sekret__col(B);
    } else {
      E->row = 15122;
      E->col = 15122;
      row = 15122;
      col = 15121;
    }
  }

  editor_backward(E);
  return E->row == row
    && E->col == col;
}

bool test_delete_stress(tbuf* B, int row, int col) {
  editor* E = ed(B, row, col);
  if (B->cursor->prev != B->start) {
    if (col == 0) {
      E->row = 15122;
      row = 15121;
      col = ___sekret__col(B);
    } else {
      E->row = 15122;
      E->col = 15122;
      row = 15122;
      col = 15121;
    }
  }

  editor_delete(E);
  return E->row == row
    && E->col == col;
}

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  editor* Al = alloc(editor);
  editor* Bad = alloc(editor);
  Bad->buffer = construct(4, 2, 1);
  Bad->buffer->cursor->next = NULL;
  Bad->row = 2;
  Bad->col = 1;

  editor* Ill = alloc(editor);
  Ill->buffer = construct(4, 2, 1);
  Ill->row = 1;
  Ill->col = 2;

  editor* E = alloc(editor);
  E->buffer = construct(4, 0, 1);
  E->row = 1;
  E->col = 0;


  if (string_equal(arg, "new")) {
    E = editor_new();
    if (E == NULL) return 1;
    if (E->row != 1) return 1;
    if (E->col != 0) return 1;
    if (E->buffer == NULL) return 1;
    if (E->buffer->start == NULL) return 1;
    if (E->buffer->cursor == NULL) return 1;
    if (E->buffer->end == NULL) return 1;
    if (E->buffer->end != E->buffer->cursor) return 1;
    if (E->buffer->start->next != E->buffer->cursor) return 1;
    if (E->buffer->cursor->prev != E->buffer->start) return 1;

  } else if (string_equal(arg, "forward_NULL"))    { editor_forward(NULL);
  } else if (string_equal(arg, "forward_alloc"))   { editor_forward(Al);
  } else if (string_equal(arg, "forward_badpos"))  { editor_forward(Ill);
  } else if (string_equal(arg, "forward_badbuf"))  { editor_forward(Bad);

  } else if (string_equal(arg, "backward_NULL"))   { editor_backward(NULL);
  } else if (string_equal(arg, "backward_alloc"))  { editor_backward(Al);
  } else if (string_equal(arg, "backward_badpos")) { editor_backward(Ill);
  } else if (string_equal(arg, "backward_badbuf")) { editor_backward(Bad);

  } else if (string_equal(arg, "delete_NULL"))     { editor_delete(NULL);
  } else if (string_equal(arg, "delete_alloc"))    { editor_delete(Al);
  } else if (string_equal(arg, "delete_badpos"))   { editor_delete(Ill);
  } else if (string_equal(arg, "delete_badbuf"))   { editor_delete(Bad);

  } else if (string_equal(arg, "insert_NULL"))     { editor_insert(NULL, 'x');
  } else if (string_equal(arg, "insert_alloc"))    { editor_insert(Al, 'x');
  } else if (string_equal(arg, "insert_badpos"))   { editor_insert(Ill, 'x');
  } else if (string_equal(arg, "insert_badbuf"))   { editor_insert(Bad, 'x');

  } else if (string_equal(arg, "forward")) {
    if (!exhaustively_test(0, 10, &test_forward)) return 1;
  } else if (string_equal(arg, "forward_recalculate")) {
    if (!exhaustively_test(0, 10, &test_forward_stress)) return 1;

  } else if (string_equal(arg, "backward")) {
    if (!exhaustively_test(0, 10, &test_backward)) return 1;
  } else if (string_equal(arg, "backward_recalculate")) {
    if (!exhaustively_test(0, 10, &test_backward_stress)) return 1;

  } else if (string_equal(arg, "delete")) {
    if (!exhaustively_test(0, 10, &test_delete)) return 1;
  } else if (string_equal(arg, "delete_recalculate")) {
    if (!exhaustively_test(0, 10, &test_delete_stress)) return 1;

  } else if (string_equal(arg, "insert")) {
    if (!exhaustively_test(0, 10, &test_insert_char)) return 1;
    if (!exhaustively_test(0, 10, &test_insert_newline)) return 1;
  } else if (string_equal(arg, "insert_recalculate")) {
    if (!exhaustively_test(0, 10, &test_insert_char_stress)) return 1;
    if (!exhaustively_test(0, 10, &test_insert_newline_stress)) return 1;

  } else {
    error("Bad arg");
  }

  return 0;
}
