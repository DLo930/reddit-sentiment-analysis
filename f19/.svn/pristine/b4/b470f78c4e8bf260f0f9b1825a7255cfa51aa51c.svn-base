\enlargethispage{5ex}
Write an implementation for \lstinline'image_getpixel', assuming
pixels are stored the same way they were stored in the programming
assignment.  Include any necessary preconditions and postconditions
for the implementation.
\begin{framed}
\ifprintanswers
\begin{lstlisting}[basicstyle=\basicstyle\color{\answerColor}]
pixel_t image_getpixel(image_t IMG, int row, int col)
//@requires is_image(IMG);
//@requires 0 <= row && row < image_getheight(IMG);
//@requires 0 <= col && col < image_getwidth(IMG);
{
    return IMG->data[row*(IMG->width) + col];
}
\end{lstlisting}
\else~\vspace{3.6in}\fi
\end{framed}

\RUBRIC
Part (b -- image_getpixel)
TAGS: correctness, pointer, safety, struct

Gradescope rubric:
+0.25pts is_image(IMG) precondition
+0.25pts bounds checks are present (0 <= row && row < IMG->height, etc)
+0.5pts Consistent with interface contracts
+0.5pts Implementation code is correct

Commentary:
  . pixel_t image_getpixel(image_t IMG, int row, int col)
    //@requires is_image(IMG);
    //@requires 0 <= row && row < image_getheight(IMG);
    //@requires 0 <= col && col < image_getwidth(IMG);
    {
        return IMG->data[row*(IMG->width) + col];
    }
  . 1/4 point for is_image(IMG) precondition
      *** IMG != NULL is okay as an ADDITIONAL check, but mark it redundant
  . 1/4 point for repeating the bounds
      *** IMG->width instead of image_getwidth(IMG), etc is OK
  . 1/4 point for implementation

ENDRUBRIC
