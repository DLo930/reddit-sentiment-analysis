/* The pixel type and an interface to pixels
 * Stores pixels as structs */

struct pixel_header {
  int alpha;
  int red;
  int green;
  int blue;
};
typedef struct pixel_header* pixel;  // Library (concrete) view of a pixel


bool is_pixel(struct pixel_header* p) {
  if (p == NULL) return false;
  if (!(0 <= p->alpha && p->alpha < 256)) return false;
  if (!(0 <= p->red   && p->red   < 256)) return false;
  if (!(0 <= p->green && p->green < 256)) return false;
  if (!(0 <= p->blue  && p->blue  < 256)) return false;
  return true;
}

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return p->red;
}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return p->green;
}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return p->blue;
}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@requires is_pixel(p);
//@ensures 0 <= \result && \result < 256;
{
  return p->alpha;
}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= alpha && alpha < 256;
//@requires 0 <= red   && red < 256;
//@requires 0 <= green && green < 256;
//@requires 0 <= blue  && blue < 256;
//@ensures is_pixel(\result);
{
  pixel p = alloc(struct pixel_header);
  p->alpha = alpha;
  p->red = red;
  p->green = green;
  p->blue = blue;
  return p;
}


// Do not write code below this line
typedef pixel pixel_t;   // Client (abstract) view of a pixel
