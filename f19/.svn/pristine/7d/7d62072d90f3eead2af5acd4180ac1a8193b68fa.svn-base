#use <args>
#use <conio>
#use <util>
#use <string>

/*
// 1 point - the test in the handout
// 1 point - a very long array (runs)
// .5 point - a very long array (stable)
// 1 point - many many tests (works)
// .5 point - many many tests (stable)

bool is_stable_sorted(int[] A, string[] B, int len)
//@requires len == \length(A) && len == \length(B);
{
  for (int i = 1; i < len; i++)
  //@loop_invariant 1 <= i;
  {
    if (A[i-1] > A[i]) {
      print("Array indices out of order: A["); printint(i-1); print("] = ");
      printint(A[i-1]); print(", A["); printint(i); print("] = ");
      printint(A[i]); println("");
      return false;
    }
    if (A[i-1] == A[i] && string_compare(B[i-1], B[i]) > 0) {
      print("Not stable at index "); printint(i); println("");
      return false;
    }
  }
  return true;
}

bool manytests() {
  int len;
  int[] test_array = alloc_array(int);
  int num_sorted_arrays = (1 << len) - 1;
  for (int i = 0; i < num_sorted_arrays; i++) {
    test_array[0] = 0;
    for (int j = 1; j < len; j++)

  }
}
*/

int main() {
  args_t args = args_parse();
  if (args->argc != 1) error("Wrong number of args");
  string arg = args->argv[0];

  // Example frequency/vocab from the handout
  int[] example_freq = alloc_array(int, 8);
  example_freq[0] = 1;
  example_freq[1] = 12;
  example_freq[2] = 0;
  example_freq[3] = 0;
  example_freq[4] = 2;
  example_freq[5] = 4;
  example_freq[6] = 1;
  example_freq[7] = 2;

  string[] example_vocab = alloc_array(string, 8);
  example_vocab[0] = "burrow";
  example_vocab[1] = "ha";
  example_vocab[2] = "his";
  example_vocab[3] = "is";
  example_vocab[4] = "list";
  example_vocab[5] = "of";
  example_vocab[6] = "out";
  example_vocab[7] = "winter";

  if (string_equal(arg, "a1")) {
    // v is incorrect
    string[] lol = alloc_array(string, 2);
    lol[0] = "hi";
    lol[1] = "sup";
    int[] jk = alloc_array(int, 2);
    count_vocab(lol, jk, 3, "texts/scott_tweet.txt", true);
  } else if (string_equal(arg, "a2")) {
    // \length(vocab) is incorrect
    string[] lol = alloc_array(string, 3);
    lol[0] = "hi";
    lol[1] = "sup";
    lol[2] = "z";
    int[] jk = alloc_array(int, 2);
    count_vocab(lol, jk, 2, "texts/scott_tweet.txt", true);
  } else if (string_equal(arg, "a3")) {
    // \length(freq) is incorrect
    string[] lol = alloc_array(string, 2);
    lol[0] = "hi";
    lol[1] = "sup";
    int[] jk = alloc_array(int, 3);
    count_vocab(lol, jk, 2, "texts/scott_tweet.txt", true);
  } else if (string_equal(arg, "a4")) {
    // Not sorted
    string[] lol = alloc_array(string, 2);
    lol[0] = "sup";
    lol[1] = "hi";
    int[] jk = alloc_array(int, 2);
    count_vocab(lol, jk, 2, "texts/scott_tweet.txt", true);
  } else if (string_equal(arg, "a5")) {
    // Not unique
    string[] lol = alloc_array(string, 2);
    lol[0] = "sup";
    lol[1] = "sup";
    int[] jk = alloc_array(int, 2);
    count_vocab(lol, jk, 2, "texts/scott_tweet.txt", true);

  } else if (string_equal(arg, "example-from-handout-linsearch")) {
    int oov = count_vocab(example_vocab, example_freq, 8,
                          "texts/scott_tweet.txt", false);
    if (!(string_equal(example_vocab[0], "burrow"))) return 1;
    if (!(string_equal(example_vocab[1], "ha"))) return 1;
    if (!(string_equal(example_vocab[2], "his"))) return 1;
    if (!(string_equal(example_vocab[3], "is"))) return 1;
    if (!(string_equal(example_vocab[4], "list"))) return 1;
    if (!(string_equal(example_vocab[5], "of"))) return 1;
    if (!(string_equal(example_vocab[6], "out"))) return 1;
    if (!(string_equal(example_vocab[7], "winter"))) return 1;

    if (!(oov == 1)) return 1;
    if (!(example_freq[0] == 2)) return 1;
    if (!(example_freq[1] == 12)) return 1;
    if (!(example_freq[2] == 1)) return 1;
    if (!(example_freq[3] == 1)) return 1;
    if (!(example_freq[4] == 2)) return 1;
    if (!(example_freq[5] == 5)) return 1;
    if (!(example_freq[6] == 2)) return 1;
    if (!(example_freq[7] == 2)) return 1;
  } else if (string_equal(arg, "example-from-handout-binsearch")) {
    int oov = count_vocab(example_vocab, example_freq, 8,
                          "texts/scott_tweet.txt", true);

    if (!(string_equal(example_vocab[0], "burrow"))) return 1;
    if (!(string_equal(example_vocab[1], "ha"))) return 1;
    if (!(string_equal(example_vocab[2], "his"))) return 1;
    if (!(string_equal(example_vocab[3], "is"))) return 1;
    if (!(string_equal(example_vocab[4], "list"))) return 1;
    if (!(string_equal(example_vocab[5], "of"))) return 1;
    if (!(string_equal(example_vocab[6], "out"))) return 1;
    if (!(string_equal(example_vocab[7], "winter"))) return 1;
    if (!(oov == 1)) return 1;

    if (!(example_freq[0] == 2)) return 1;
    if (!(example_freq[1] == 12)) return 1;
    if (!(example_freq[2] == 1)) return 1;
    if (!(example_freq[3] == 1)) return 1;
    if (!(example_freq[4] == 2)) return 1;
    if (!(example_freq[5] == 5)) return 1;
    if (!(example_freq[6] == 2)) return 1;
    if (!(example_freq[7] == 2)) return 1;
  } else if (string_equal(arg, "haha-lol")) {
    int oov = count_vocab(example_vocab, example_freq, 8,
                          "texts/sekret/jklol.txt", true);

    if (!(oov == 2)) return 1;
    if (!(example_freq[0] == 1)) return 1;
    if (!(example_freq[1] == 15)) return 1;
    if (!(example_freq[2] == 0)) return 1;
    if (!(example_freq[3] == 0)) return 1;
    if (!(example_freq[4] == 2)) return 1;
    if (!(example_freq[5] == 4)) return 1;
    if (!(example_freq[6] == 1)) return 1;
    if (!(example_freq[7] == 2)) return 1;
  } else if (string_equal(arg, "scott-thrice-1")) {
    // Check for multiples (scott's tweet)
    int oov = count_vocab(example_vocab, example_freq, 8,
                          "texts/sekret/scotttweet-thrice.txt", true);

    if (!(oov == 3)) return 1;
    if (!(example_freq[0] == 5)) return 1;
    if (!(example_freq[1] == 12)) return 1;
    if (!(example_freq[2] == 3)) return 1;
    if (!(example_freq[3] == 3)) return 1;
  } else if (string_equal(arg, "scott-thrice-2")) {
    // Check for running the function multiple times
    int oov = 0;
    oov += count_vocab(example_vocab, example_freq, 8,
                       "texts/scott_tweet.txt", true);
    oov += count_vocab(example_vocab, example_freq, 8,
                       "texts/scott_tweet.txt", false);
    oov += count_vocab(example_vocab, example_freq, 8,
                       "texts/scott_tweet.txt", false);

    if (!(oov == 3)) return 1;
    if (!(example_freq[0] == 4)) return 1;
    if (!(example_freq[1] == 12)) return 1;
    if (!(example_freq[2] == 3)) return 1;
    if (!(example_freq[3] == 3)) return 1;
  } else if (string_equal(arg, "news_vocab")) {
    string_bundle bund = read_words("texts/news_vocab_sorted.txt");
    int v = string_bundle_length(bund);
    //@assert v == 45600;
    string[] vocab = string_bundle_array(bund);
    int[] freq = alloc_array(int, v);

    int oov = count_vocab(vocab, freq, v, "texts/sekret/twitter_1k.txt", true);
    if (!(oov == 1560)) return 1;

    // Some spot checks, because you've gotta love twitter
    int i;
    i = binsearch("ha", vocab, 45600); //@assert i == 18220;
    if (!(freq[i] == 5)) return 1;
    i = binsearch("sad", vocab, 45600); //@assert i == 35606;
    if (!(freq[i] == 4)) return 1;
    i = binsearch("funny", vocab, 45600); //@assert i == 16771;
    if (!(freq[i] == 10)) return 1;
    i = binsearch("astute", vocab, 45600); //@assert i == 3396;
    if (!(freq[i] == 0)) return 1;

  } else if (string_equal(arg, "tiny1")) {
    string[] vocab = alloc_array(string, 0);
    int[] freq = alloc_array(int, 0);

    int oov = count_vocab(vocab, freq, 0, "texts/sekret/empty.txt", false);
    if (!(oov == 0)) return 1;
  } else if (string_equal(arg, "tiny2")) {
    string[] vocab = alloc_array(string, 0);
    int[] freq = alloc_array(int, 0);

    int oov = count_vocab(vocab, freq, 0, "texts/sekret/1.txt", false);
    if (!(oov == 1)) return 1;
  } else if (string_equal(arg, "tiny3")) {
    string[] vocab = alloc_array(string, 1);
    vocab[0] = "1";
    int[] freq = alloc_array(int, 1);

    int oov = count_vocab(vocab, freq, 1, "texts/sekret/empty.txt", true);
    if (!(oov == 0)) return 1;
    if (!(freq[0] == 0)) return 1;
  } else if (string_equal(arg, "tiny4")) {
    string[] vocab = alloc_array(string, 1);
    vocab[0] = "1";
    int[] freq = alloc_array(int, 1);

    int oov = count_vocab(vocab, freq, 1, "texts/sekret/1.txt", true);
    if (!(oov == 0)) return 1;
    if (!(freq[0] == 1)) return 1;

  } else {
    error("Bad argument");
  }

return 0;

}
