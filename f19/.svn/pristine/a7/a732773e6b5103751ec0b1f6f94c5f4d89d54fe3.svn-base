\section*{Memory allocation%
\TAGS{c-memory}}

In C0 and C1, we had the functions \lstinline[language=C]'alloc',
which allocated enough memory for a singleton of some type, and
\lstinline[language=C]'alloc_array', which allocated enough memory for
an array of some type. In C, there is only\footnote{Note that
  \lstinline[language=C]'malloc' does not initialize the memory it
  allocates to $0$. If you require this, there is a variant of
  \lstinline[language=C]'malloc' called \lstinline[language=C]'calloc'
  (and a corresponding \lstinline[language=C]'xcalloc') that does
  this.  } \lstinline[language=C]'malloc', which takes one argument
--- the amount of memory you want.

For example, an equivalent of %
\lstinline[language=C]'alloc(struct list_node)' %
in C is \lstinline[language=C]'malloc(sizeof(struct list_node))', and
the equivalent of \lstinline[language=C]'alloc_array(int, 3)' in C is
\lstinline[language=C]'malloc(3*sizeof(int))'.

However, \lstinline[language=C]'malloc' can return
\lstinline[language=C]'NULL' when out of memory.  Usually
you would have to check the return value to see if it is
\lstinline[language=C]'NULL', but we provide you with a replacement
for \lstinline[language=C]'malloc' that does this check for you:
\lstinline[language=C]'xmalloc'. To use it, put
\lstinline[language=C]'#include "path/to/xalloc.h"' at the beginning
of your C file.
