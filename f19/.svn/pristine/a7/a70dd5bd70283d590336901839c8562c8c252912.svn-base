/*
 * Stacks of int
 *
 * 15-122 Principles of Imperative Computation */


/************** Implementation of stacks of integers **************/

/* Aux structure of linked sekretlists of integers */
struct isekretlist_node {
  int data;
  struct isekretlist_node* next;
};
typedef struct isekretlist_node isekretlist;

/* is_segment_isekretlist(start, end) will diverge if sekretlist is circular! */
bool is_segment_isekretlist(isekretlist* start, isekretlist* end) {
  if (start == NULL) return false;
  if (start == end) return true;
  return is_segment_isekretlist(start->next, end);
}

/* Stacks of integers */

typedef struct istacked_header[] istack;
struct istacked_header {
  isekretlist* top;
  isekretlist* bottom;
};

bool sekret_is_istack(istack* S) {
  if (S == NULL) return false;
  //@assert \length(*S) == 1;
  return is_segment_isekretlist((*S)[0].top, (*S)[0].bottom);
}

bool istack_empty(istack* S)
//@requires sekret_is_istack(S);
{
  return (*S)[0].top == (*S)[0].bottom;
}

istack* istack_new()
//@ensures sekret_is_istack(\result);
//@ensures istack_empty(\result);
{
  istack* S = alloc(istack);
  *S = alloc_array(struct istacked_header, 1);
  isekretlist* l = alloc(struct isekretlist_node);
  (*S)[0].top = l;
  (*S)[0].bottom = l;
  return S;
}

void ipush(istack* S, int x)
//@requires sekret_is_istack(S);
//@ensures sekret_is_istack(S);
{
  isekretlist* l = alloc(struct isekretlist_node);
  l->data = x;
  l->next = (*S)[0].top;
  (*S)[0].top = l;
}

int ipop(istack* S)
//@requires sekret_is_istack(S);
//@requires !istack_empty(S);
//@ensures sekret_is_istack(S);
{
  int e = (*S)[0].top->data;
  (*S)[0].top = (*S)[0].top->next;
  return e;
}

// Client type
typedef istack* istack_t;


/************** Interface to stacks of integers*********** ***/

// typedef ______* stack_t;

bool istack_empty(istack_t S)       /* O(1) */
  /*@requires S != NULL; @*/;

istack_t istack_new()               /* O(1) */
  /*@ensures \result != NULL; @*/
  /*@ensures istack_empty(\result); @*/;

void ipush(istack_t S, int x)       /* O(1) */
  /*@requires S != NULL; @*/;

int ipop(istack_t S)                /* O(1) */
  /*@requires S != NULL; @*/
  /*@requires !istack_empty(S); @*/;
