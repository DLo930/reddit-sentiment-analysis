\section*{Contracts%
\TAGS{correctness, loop-invariant, safety}}

There are 4 types of contract annotations in C0 (for convenience, we're using
\lstinline'exp' here to mean any Boolean expression):
\begin{center}
\begin{tabular}{l|l}
    Annotation & Checked
\\ \hline
\\ \lstinline'//@requires exp;' & before function execution
\\ \lstinline'//@ensures exp;' & before function returns
\\ \lstinline'//@loop_invariant exp;' & before the loop condition is checked
\\ \lstinline'//@assert exp;' & wherever you put it in the code
\end{tabular}
\end{center}

There are certain special variables and functions you have access to only in
annotations. One of these is \result. It can be used only in
\ensures{} statements and it will give you the return value of
the function. (There are other such variables/functions that we'll get to later
in the semester.)

To help you develop an intuition about contracts, here are some explanations of
the different kinds of annotations:

\begin{itemize}
\item{\requires}: %
  For checking \answerline{preconditions}

\item{\ensures}: %
  For checking \answerline{postconditions}

  Allow use of the special expression \answerline{(backslash) result}
\item{\loopinvariant}: %
  We can only write these immediately after the beginning of a
  \lstinline'while' loop or \lstinline'for' loop.

  When are these checked? \answerline{immediately before the loop
    guard}.
\item{\assert}: %
  Assertion statements don't play the special role in reasoning that
  \requires, \ensures, and \loopinvariant{} statements do. They can be very
  helpful for debugging code and summarizing what you know, especially
  after a loop.
\end{itemize}
